bl_info = {
    "name": "Set Color",
    "author": "Vakhrushev N., Vakhrusheva A.",
    "version": (1, 1),
    "blender": (2, 80, 0),
    "location": "Shader Node > Toolshelf",
    "description": "Adds color to your object according to the color tables.",
    "warning": "",
    "doc_url": "https://youtu.be/p6_aTsp986k",
    "category": "Add Shader",
}

import bpy
import math
import re
import pickle
import os
from random import randint

#Start of tables with color palettes (end on 2371 line) \/

#RAL.Create the list of data RAL Classic. Contains RAL Classic number and hex-color
ral_list = {
    1000 : 0xCCC58F,
    1001 : 0xD1BC8A,
    1002 : 0xD2B773,
    1003 : 0xF7BA0B,
    1004 : 0xE2B007,
    1005 : 0xC89F04,
    1006 : 0xE1A100,
    1007 : 0xE79C00,
    1011 : 0xAF8A54,
    1012 : 0xD9C022,
    1013 : 0xE9E5CE,
    1014 : 0xDED09F,
    1015 : 0xEADEBD,
    1016 : 0xEAF044,
    1017 : 0xF4B752,
    1018 : 0xF3E03B,
    1019 : 0xA4957D,
    1020 : 0x9A9464,
    1021 : 0xEEC900,
    1023 : 0xF0CA00,
    1024 : 0xB89C50,
    1026 : 0xF5FF00,
    1027 : 0xA38C15,
    1028 : 0xFFAB00,
    1032 : 0xDDB20F,
    1033 : 0xFAAB21,
    1034 : 0xEDAB56,
    1035 : 0xA29985,
    1036 : 0x927549,
    1037 : 0xEEA205,
    2000 : 0xDD7907,
    2001 : 0xBE4E24,
    2002 : 0xC63927,
    2003 : 0xFA842B,
    2004 : 0xE75B12,
    2005 : 0xFF2300,
    2007 : 0xFFA421,
    2008 : 0xF3752C,
    2009 : 0xE15501,
    2010 : 0xD4652F,
    2011 : 0xEC7C25,
    2012 : 0xDB6A50,
    2013 : 0x954527,
    3000 : 0xAB2524,
    3001 : 0xA02128,
    3002 : 0xA1232B,
    3003 : 0x8D1D2C,
    3004 : 0x701F29,
    3005 : 0x5E2028,
    3007 : 0x402225,
    3009 : 0x703731,
    3011 : 0x7E292C,
    3012 : 0xCB8D73,
    3013 : 0x9C322E,
    3014 : 0xD47479,
    3015 : 0xE1A6AD,
    3016 : 0xAC4034,
    3017 : 0xD3545F,
    3018 : 0xD14152,
    3020 : 0xC1121C,
    3022 : 0xD56D56,
    3024 : 0xF70000,
    3026 : 0xFF0000,
    3027 : 0xB42041,
    3028 : 0xCB3334,
    3031 : 0xAC323B,
    3032 : 0x711521,
    3033 : 0xB24C43,
    4001 : 0x8A5A83,
    4002 : 0x933D50,
    4003 : 0xD15B8F,
    4004 : 0x691639,
    4005 : 0x83639D,
    4006 : 0x992572,
    4007 : 0x4A203B,
    4008 : 0x904684,
    4009 : 0xA38995,
    4010 : 0xC63678,
    4011 : 0x8773A1,
    4012 : 0x6B6880,
    5000 : 0x384C70,
    5001 : 0x1F4764,
    5002 : 0x2B2C7C,
    5003 : 0x2A3756,
    5004 : 0x1D1F2A,
    5005 : 0x154889,
    5007 : 0x41678D,
    5008 : 0x313C48,
    5009 : 0x2E5978,
    5010 : 0x13447C,
    5011 : 0x232C3F,
    5012 : 0x3481B8,
    5013 : 0x232D53,
    5014 : 0x6C7C98,
    5015 : 0x2874B2,
    5017 : 0x0E518D,
    5018 : 0x21888F,
    5019 : 0x1A5784,
    5020 : 0x0B4151,
    5021 : 0x07737A,
    5022 : 0x2F2A5A,
    5023 : 0x4D668E,
    5024 : 0x6A93B0,
    5025 : 0x296478,
    5026 : 0x102C54,
    6000 : 0x327662,
    6001 : 0x28713E,
    6002 : 0x276235,
    6003 : 0x4B573E,
    6004 : 0x0E4243,
    6005 : 0x0F4336,
    6006 : 0x40433B,
    6007 : 0x283424,
    6008 : 0x35382E,
    6009 : 0x26392F,
    6010 : 0x3E753B,
    6011 : 0x66825B,
    6012 : 0x31403D,
    6013 : 0x797C5A,
    6014 : 0x444337,
    6015 : 0x3D403A,
    6016 : 0x026A52,
    6017 : 0x468641,
    6018 : 0x48A43F,
    6019 : 0xB7D9B1,
    6020 : 0x354733,
    6021 : 0x86A47C,
    6022 : 0x3E3C32,
    6024 : 0x008754,
    6025 : 0x53753C,
    6026 : 0x005D52,
    6027 : 0x81C0BB,
    6028 : 0x2D5546,
    6029 : 0x007243,
    6032 : 0x0F8558,
    6033 : 0x478A84,
    6034 : 0x7FB0B2,
    6035 : 0x1B542C,
    6036 : 0x005D4C,
    6037 : 0x008F39,
    6038 : 0x00BB2E,
    7000 : 0x7E8B92,
    7001 : 0x8F999F,
    7002 : 0x817F68,
    7003 : 0x7A7B6D,
    7004 : 0x9EA0A1,
    7005 : 0x6B716F,
    7006 : 0x756F61,
    7008 : 0x746643,
    7009 : 0x5B6259,
    7010 : 0x575D57,
    7011 : 0x555D61,
    7012 : 0x596163,
    7013 : 0x555548,
    7015 : 0x51565C,
    7016 : 0x373F43,
    7021 : 0x2E3234,
    7022 : 0x4B4D46,
    7023 : 0x818479,
    7024 : 0x474A50,
    7026 : 0x374447,
    7030 : 0x939388,
    7031 : 0x5D6970,
    7032 : 0xB9B9A8,
    7033 : 0x818979,
    7034 : 0x939176,
    7035 : 0xCBD0CC,
    7036 : 0x9A9697,
    7037 : 0x7C7F7E,
    7038 : 0xB4B8B0,
    7039 : 0x6B695F,
    7040 : 0x9DA3A6,
    7042 : 0x8F9695,
    7043 : 0x4E5451,
    7044 : 0xBDBDB2,
    7045 : 0x91969A,
    7046 : 0x82898E,
    7047 : 0xCFD0CF,
    7048 : 0x888175,
    8000 : 0x887142,
    8001 : 0x9C6B30,
    8002 : 0x7B5141,
    8003 : 0x80542F,
    8004 : 0x8F4E35,
    8007 : 0x6F4A2F,
    8008 : 0x6F4F28,
    8011 : 0x5A3A29,
    8012 : 0x673831,
    8014 : 0x49392D,
    8015 : 0x633A34,
    8016 : 0x4C2F26,
    8017 : 0x44322D,
    8019 : 0x3F3A3A,
    8022 : 0x211F20,
    8023 : 0xA65E2F,
    8024 : 0x79553C,
    8025 : 0x755C49,
    8028 : 0x4E3B2B,
    8029 : 0x773C27,
    9001 : 0xEFEBDC,
    9002 : 0xDDDED4,
    9003 : 0xF4F8F4,
    9004 : 0x2E3032,
    9005 : 0x0A0A0D,
    9006 : 0xA5A8A6,
    9007 : 0x8F8F8C,
    9010 : 0xF7F9EF,
    9011 : 0x292C2F,
    9016 : 0xF7FBF5,
    9017 : 0x2A2D2F,
    9018 : 0xCFD3CD,
    9022 : 0x9C9C9C,
    9023 : 0x7E8182
}

#DESIGN.Create the dict of data RAL Design. Contains RAL Design number and hex-color
design_dict = {
    "000 15 00" : 0x2E3032,
    "000 20 00" : 0x37393B,
    "000 25 00" : 0x414345,
    "000 30 00" : 0x4A4B4C,
    "000 35 00" : 0x565758,
    "000 40 00" : 0x606162,
    "000 45 00" : 0x6E6F70,
    "000 50 00" : 0x787A7A,
    "000 55 00" : 0x838585,
    "000 60 00" : 0x909293,
    "000 65 00" : 0x9FA1A2,
    "000 70 00" : 0xADAFAF,
    "000 75 00" : 0xBBBDBE,
    "000 80 00" : 0xCACBCC,
    "000 85 00" : 0xD6D7D6,
    "000 90 00" : 0xE1E4E2,
    "010 20 15" : 0x4A2E35,
    "010 20 20" : 0x512D35,
    "010 20 25" : 0x572A36,
    "010 30 15" : 0x63444B,
    "010 30 20" : 0x6B404A,
    "010 30 25" : 0x733E4A,
    "010 30 30" : 0x7A3948,
    "010 30 35" : 0x7C3244,
    "010 30 40" : 0x842A42,
    "010 30 44" : 0x8C2143,
    "010 40 10" : 0x755F62,
    "010 40 15" : 0x7D5A60,
    "010 40 20" : 0x84555E,
    "010 40 25" : 0x8D535F,
    "010 40 30" : 0x944E5C,
    "010 40 35" : 0x984859,
    "010 40 40" : 0xA1435B,
    "010 40 45" : 0xA83D59,
    "010 40 50" : 0xAE3558,
    "010 40 53" : 0xB22C54,
    "010 50 10" : 0x8C767B,
    "010 50 15" : 0x947279,
    "010 50 20" : 0x9D6D77,
    "010 50 25" : 0xA76876,
    "010 50 30" : 0xAF6473,
    "010 50 35" : 0xB45E72,
    "010 50 40" : 0xBA5A70,
    "010 50 45" : 0xC1546F,
    "010 50 50" : 0xCC4C6E,
    "010 60 10" : 0xA68C91,
    "010 60 15" : 0xB28B91,
    "010 60 20" : 0xBC8690,
    "010 60 25" : 0xC4818F,
    "010 60 30" : 0xCA7C8D,
    "010 60 35" : 0xD4788C,
    "010 60 40" : 0xDC738B,
    "010 60 45" : 0xE86D89,
    "010 70 10" : 0xC4A9AE,
    "010 70 15" : 0xCCA4AA,
    "010 70 20" : 0xD9A0AA,
    "010 70 25" : 0xE29CA8,
    "010 70 30" : 0xEA98A7,
    "010 70 35" : 0xF593A6,
    "010 80 10" : 0xE0C4C7,
    "010 80 15" : 0xEAC0C5,
    "010 80 20" : 0xF3BBC3,
    "010 90 05" : 0xF1E2E3,
    "010 90 10" : 0xF7DFDC,
    "010 92 05" : 0xF6E7EA,
    "020 20 05" : 0x3D3537,
    "020 20 10" : 0x473436,
    "020 20 20" : 0x533034,
    "020 20 29" : 0x5C252D,
    "020 30 05" : 0x53494B,
    "020 30 10" : 0x5C4648,
    "020 30 20" : 0x693F43,
    "020 30 30" : 0x783A41,
    "020 30 40" : 0x852E3D,
    "020 30 48" : 0x8A2036,
    "020 40 05" : 0x6B6161,
    "020 40 10" : 0x725E5F,
    "020 40 20" : 0x835759,
    "020 40 30" : 0x914E54,
    "020 40 40" : 0x9C444E,
    "020 40 50" : 0xAB3348,
    "020 50 05" : 0x837878,
    "020 50 10" : 0x8C7474,
    "020 50 20" : 0x9D6D70,
    "020 50 30" : 0xAD656B,
    "020 50 40" : 0xB85B65,
    "020 50 50" : 0xC64F5F,
    "020 50 58" : 0xD8435A,
    "020 60 05" : 0x9C9090,
    "020 60 10" : 0xA78E90,
    "020 60 20" : 0xB98789,
    "020 60 30" : 0xC97E84,
    "020 60 40" : 0xD8747E,
    "020 70 05" : 0xB6AAAC,
    "020 70 10" : 0xC1A8A9,
    "020 70 20" : 0xD8A2A5,
    "020 70 30" : 0xE99AA0,
    "020 80 05" : 0xD6C8C7,
    "020 80 10" : 0xDEC3C3,
    "020 80 20" : 0xF4BDC0,
    "020 90 05" : 0xF1E4E0,
    "020 90 10" : 0xF6E0DD,
    "030 30 20" : 0x684342,
    "030 30 30" : 0x743C3A,
    "030 30 40" : 0x7F3436,
    "030 30 45" : 0x852A30,
    "030 40 10" : 0x715E5D,
    "030 40 20" : 0x835A58,
    "030 40 30" : 0x90524F,
    "030 40 40" : 0x9E4847,
    "030 40 50" : 0xAC3F44,
    "030 40 60" : 0xB5313D,
    "030 50 10" : 0x8C7573,
    "030 50 20" : 0x9C716C,
    "030 50 30" : 0xAA6762,
    "030 50 40" : 0xBA615E,
    "030 50 50" : 0xC65655,
    "030 50 60" : 0xD5494C,
    "030 60 10" : 0xA68F8D,
    "030 60 20" : 0xB78883,
    "030 60 30" : 0xC8837D,
    "030 60 40" : 0xD87B75,
    "030 60 50" : 0xE6706C,
    "030 70 10" : 0xC2AAA7,
    "030 70 20" : 0xD4A19B,
    "030 70 30" : 0xE79A93,
    "030 70 40" : 0xF4928D,
    "030 80 10" : 0xDDC4BF,
    "030 80 20" : 0xF0BCB6,
    "030 90 05" : 0xF1E4E0,
    "030 90 10" : 0xF5E1DB,
    "040 20 19" : 0x4F322C,
    "040 30 05" : 0x524A48,
    "040 30 10" : 0x594843,
    "040 30 20" : 0x64433A,
    "040 30 30" : 0x733F36,
    "040 30 40" : 0x7D3A31,
    "040 40 05" : 0x6C6261,
    "040 40 10" : 0x715F5A,
    "040 40 20" : 0x7D5A50,
    "040 40 30" : 0x8B5547,
    "040 40 40" : 0x974D3B,
    "040 40 50" : 0xA14633,
    "040 40 60" : 0xAB3C2B,
    "040 40 67" : 0xB43426,
    "040 50 05" : 0x817876,
    "040 50 10" : 0x89766F,
    "040 50 20" : 0x997266,
    "040 50 30" : 0xA96D5C,
    "040 50 40" : 0xB46550,
    "040 50 50" : 0xC35F47,
    "040 50 60" : 0xCE563D,
    "040 50 70" : 0xDA4C37,
    "040 60 05" : 0x9C9290,
    "040 60 10" : 0xA58F88,
    "040 60 20" : 0xB38A7E,
    "040 60 30" : 0xC28472,
    "040 60 40" : 0xD07F67,
    "040 60 50" : 0xDF785D,
    "040 60 60" : 0xEB7152,
    "040 70 05" : 0xB6ABA9,
    "040 70 10" : 0xC0A9A3,
    "040 70 20" : 0xD3A597,
    "040 70 30" : 0xE39F8B,
    "040 70 40" : 0xED9981,
    "040 70 50" : 0xFA9073,
    "040 80 05" : 0xD4C8C4,
    "040 80 10" : 0xDDC8BE,
    "040 80 20" : 0xF2C3B3,
    "040 80 30" : 0xF9BCA6,
    "040 90 05" : 0xEFE4DD,
    "040 90 10" : 0xF7E2D8,
    "050 20 10" : 0x443A36,
    "050 20 16" : 0x48332A,
    "050 30 20" : 0x624637,
    "050 30 30" : 0x6F4332,
    "050 30 36" : 0x74412B,
    "050 40 10" : 0x6D5F56,
    "050 40 20" : 0x7A5C4B,
    "050 40 30" : 0x83563E,
    "050 40 40" : 0x8F5231,
    "050 40 50" : 0x994C2B,
    "050 50 10" : 0x88796F,
    "050 50 20" : 0x957561,
    "050 50 30" : 0xA17154,
    "050 50 40" : 0xAC6B49,
    "050 50 50" : 0xB9673D,
    "050 50 60" : 0xC06131,
    "050 50 70" : 0xCC5E28,
    "050 50 78" : 0xD46025,
    "050 60 10" : 0xA29084,
    "050 60 20" : 0xAF8B77,
    "050 60 30" : 0xBF8A6B,
    "050 60 40" : 0xCA8560,
    "050 60 50" : 0xD68151,
    "050 60 60" : 0xE17B42,
    "050 60 70" : 0xEB7436,
    "050 60 80" : 0xF66A23,
    "050 70 10" : 0xBDADA2,
    "050 70 20" : 0xCBA994,
    "050 70 30" : 0xDCA484,
    "050 70 40" : 0xE99F78,
    "050 70 50" : 0xF49A6B,
    "050 70 60" : 0xFB935A,
    "050 80 10" : 0xDAC9BC,
    "050 80 20" : 0xE9C4AA,
    "050 80 30" : 0xF4BD9D,
    "050 90 05" : 0xF0E5DC,
    "050 90 10" : 0xF8E5D5,
    "050 92 05" : 0xEFE7E2,
    "060 20 05" : 0x3B3835,
    "060 30 05" : 0x504B47,
    "060 30 10" : 0x554940,
    "060 30 20" : 0x5D4A38,
    "060 30 27" : 0x64462B,
    "060 40 05" : 0x68625C,
    "060 40 10" : 0x6D6054,
    "060 40 20" : 0x79604A,
    "060 40 30" : 0x805D3B,
    "060 40 40" : 0x8A5B31,
    "060 50 05" : 0x817A74,
    "060 50 10" : 0x847A6D,
    "060 50 20" : 0x8F775D,
    "060 50 30" : 0x9C7651,
    "060 50 40" : 0xA57243,
    "060 50 50" : 0xB06E37,
    "060 50 60" : 0xB46721,
    "060 50 70" : 0xBD6618,
    "060 60 05" : 0x9B948D,
    "060 60 10" : 0xA19384,
    "060 60 20" : 0xAF9175,
    "060 60 30" : 0xB89068,
    "060 60 40" : 0xC08C57,
    "060 60 50" : 0xCA8647,
    "060 60 60" : 0xD48435,
    "060 60 70" : 0xDC7F24,
    "060 60 80" : 0xE97B19,
    "060 70 05" : 0xB5AEA7,
    "060 70 10" : 0xBCADA0,
    "060 70 20" : 0xC7AA90,
    "060 70 30" : 0xD2A980,
    "060 70 40" : 0xDCA470,
    "060 70 50" : 0xE8A261,
    "060 70 60" : 0xF19D4E,
    "060 70 70" : 0xFB9A39,
    "060 80 10" : 0xD5C8B8,
    "060 80 20" : 0xE3C8AA,
    "060 80 30" : 0xF2C396,
    "060 80 40" : 0xF9BE83,
    "060 90 05" : 0xEEE6DA,
    "060 90 10" : 0xF3E5D3,
    "060 90 15" : 0xF6E2CA,
    "070 30 20" : 0x5A4C37,
    "070 40 10" : 0x686255,
    "070 40 20" : 0x716144,
    "070 40 30" : 0x7A5F37,
    "070 40 40" : 0x7F5E28,
    "070 50 10" : 0x827B6B,
    "070 50 20" : 0x8A785B,
    "070 50 30" : 0x927649,
    "070 50 40" : 0x9A7639,
    "070 50 50" : 0x9B7633,
    "070 50 55" : 0xA3762B,
    "070 60 10" : 0x9C9282,
    "070 60 20" : 0xA39374,
    "070 60 30" : 0xAD8F61,
    "070 60 40" : 0xB38E4E,
    "070 60 50" : 0xBD8F3F,
    "070 60 60" : 0xC38D2E,
    "070 60 70" : 0xCA8A21,
    "070 60 75" : 0xD08B13,
    "070 70 10" : 0xB5AE9D,
    "070 70 20" : 0xC0AC8A,
    "070 70 30" : 0xC9AC79,
    "070 70 40" : 0xD2AA66,
    "070 70 50" : 0xD9A957,
    "070 70 60" : 0xE1A541,
    "070 70 70" : 0xE7A12B,
    "070 70 80" : 0xEC9E08,
    "070 80 10" : 0xD2CAB6,
    "070 80 20" : 0xDDCAA3,
    "070 80 30" : 0xE8C894,
    "070 80 40" : 0xF3C885,
    "070 80 50" : 0xF9C76F,
    "070 80 60" : 0xFDC55A,
    "070 90 05" : 0xEFE7DE,
    "070 90 10" : 0xEFE7D3,
    "070 90 20" : 0xF8E6C1,
    "075 40 20" : 0x6B6043,
    "075 40 30" : 0x715E34,
    "075 40 38" : 0x755E27,
    "075 50 20" : 0x86795A,
    "075 50 30" : 0x8F7A4A,
    "075 50 40" : 0x95773A,
    "075 50 50" : 0x987627,
    "075 50 58" : 0x9D730E,
    "075 60 10" : 0x9B9483,
    "075 60 20" : 0xA09270,
    "075 60 30" : 0xAA9362,
    "075 60 40" : 0xB09453,
    "075 60 50" : 0xB4913D,
    "075 60 60" : 0xB98E25,
    "075 60 70" : 0xC28F02,
    "075 70 10" : 0xB3AE9D,
    "075 70 20" : 0xBCAD88,
    "075 70 30" : 0xC3AD78,
    "075 70 40" : 0xCAAC65,
    "075 70 50" : 0xD4AB54,
    "075 70 60" : 0xDBAA3F,
    "075 70 70" : 0xE1AA27,
    "075 70 80" : 0xE3A800,
    "075 80 10" : 0xD2CAB7,
    "075 80 20" : 0xD9C9A3,
    "075 80 30" : 0xE0C991,
    "075 80 40" : 0xE8C781,
    "075 80 50" : 0xF1C76F,
    "075 80 60" : 0xF7C55C,
    "075 90 10" : 0xF3EAD2,
    "075 90 20" : 0xF6E6BE,
    "075 92 05" : 0xEDEADF,
    "080 20 10" : 0x3B382D,
    "080 30 05" : 0x4D4B45,
    "080 30 10" : 0x4D4A3C,
    "080 30 20" : 0x544C30,
    "080 30 26" : 0x574A28,
    "080 40 05" : 0x66625B,
    "080 40 10" : 0x686556,
    "080 40 20" : 0x6B6142,
    "080 40 30" : 0x716236,
    "080 40 40" : 0x766120,
    "080 50 05" : 0x7D7972,
    "080 50 10" : 0x807C6B,
    "080 50 20" : 0x857D5C,
    "080 50 30" : 0x8B7D4B,
    "080 50 40" : 0x8D7A3A,
    "080 50 50" : 0x937C2B,
    "080 60 05" : 0x96948C,
    "080 60 10" : 0x989382,
    "080 60 20" : 0x9F956F,
    "080 60 30" : 0xA5955E,
    "080 60 40" : 0xA99452,
    "080 60 50" : 0xAD963D,
    "080 60 60" : 0xB39421,
    "080 60 70" : 0xB59304,
    "080 70 10" : 0xB4AF9D,
    "080 70 20" : 0xB9AF89,
    "080 70 30" : 0xBFB079,
    "080 70 40" : 0xC8B067,
    "080 70 50" : 0xCCAF52,
    "080 70 60" : 0xD2B13D,
    "080 70 70" : 0xD5B029,
    "080 70 80" : 0xD7AD00,
    "080 70 88" : 0xD9AC00,
    "080 80 05" : 0xCDCAC0,
    "080 80 10" : 0xD3CDB7,
    "080 80 20" : 0xD7CBA2,
    "080 80 30" : 0xDBC98F,
    "080 80 40" : 0xE4CC7F,
    "080 80 50" : 0xE9CA6A,
    "080 80 60" : 0xEECA52,
    "080 80 70" : 0xF1C93C,
    "080 80 80" : 0xF8C821,
    "080 80 90" : 0xFACA00,
    "080 90 05" : 0xEEE8DC,
    "080 90 10" : 0xEDE5CF,
    "080 90 20" : 0xF3E5BC,
    "085 40 20" : 0x676140,
    "085 40 30" : 0x6D6538,
    "085 50 20" : 0x827B58,
    "085 50 30" : 0x867B46,
    "085 50 40" : 0x877C37,
    "085 50 50" : 0x8A7D23,
    "085 60 10" : 0x979583,
    "085 60 20" : 0x9C9571,
    "085 60 30" : 0xA29760,
    "085 60 40" : 0xA4964E,
    "085 60 50" : 0xA7973A,
    "085 60 60" : 0xAC9820,
    "085 70 10" : 0xAEAE99,
    "085 70 20" : 0xB6AF8A,
    "085 70 30" : 0xBBB074,
    "085 70 40" : 0xBDB064,
    "085 70 50" : 0xC2B14E,
    "085 70 60" : 0xC3B037,
    "085 70 70" : 0xC8AF22,
    "085 70 75" : 0xCBB10B,
    "085 80 10" : 0xCBCAB3,
    "085 80 20" : 0xD3CCA4,
    "085 80 30" : 0xD7CC8E,
    "085 80 40" : 0xD9CC7C,
    "085 80 50" : 0xDFCC68,
    "085 80 60" : 0xE3CC52,
    "085 80 70" : 0xE7CB39,
    "085 80 80" : 0xE8CA11,
    "085 80 85" : 0xE6CA05,
    "085 90 10" : 0xEEEAD3,
    "085 90 20" : 0xF1E8BD,
    "085 90 30" : 0xF5E6A8,
    "090 30 20" : 0x514D2E,
    "090 40 10" : 0x666556,
    "090 40 20" : 0x676343,
    "090 40 30" : 0x6D6637,
    "090 50 10" : 0x7D7C6C,
    "090 50 20" : 0x807C5B,
    "090 50 30" : 0x857F48,
    "090 50 40" : 0x857E38,
    "090 60 10" : 0x959484,
    "090 60 20" : 0x9D9572,
    "090 60 30" : 0x9E9764,
    "090 60 40" : 0x9E974F,
    "090 60 50" : 0xA1993B,
    "090 60 60" : 0xA49B25,
    "090 70 10" : 0xB1AF9C,
    "090 70 20" : 0xB5AF88,
    "090 70 30" : 0xBBB27B,
    "090 70 40" : 0xBCB263,
    "090 70 50" : 0xBEB453,
    "090 70 60" : 0xC0B53C,
    "090 70 70" : 0xC1B61D,
    "090 70 80" : 0xC0B503,
    "090 80 10" : 0xCFCBB5,
    "090 80 20" : 0xD1CBA3,
    "090 80 30" : 0xD6CE93,
    "090 80 40" : 0xDAD184,
    "090 80 50" : 0xDCD068,
    "090 80 60" : 0xDCCF4F,
    "090 80 70" : 0xDED23F,
    "090 80 80" : 0xDDD113,
    "090 80 90" : 0xE1D400,
    "090 90 05" : 0xEAE8DD,
    "090 90 10" : 0xEAE9D3,
    "090 90 20" : 0xEFEABE,
    "090 90 30" : 0xF1EAAC,
    "095 40 20" : 0x666344,
    "095 40 30" : 0x646635,
    "095 50 20" : 0x7F7B5B,
    "095 50 30" : 0x7E7C49,
    "095 50 40" : 0x838039,
    "095 50 50" : 0x7D8321,
    "095 60 10" : 0x979585,
    "095 60 20" : 0x969673,
    "095 60 30" : 0x98965D,
    "095 60 40" : 0x9A994D,
    "095 60 50" : 0x989939,
    "095 60 60" : 0x969B20,
    "095 60 70" : 0x949E03,
    "095 70 10" : 0xB1AE9C,
    "095 70 20" : 0xB3B18C,
    "095 70 30" : 0xB5B37A,
    "095 70 40" : 0xB3B364,
    "095 70 50" : 0xB4B254,
    "095 70 60" : 0xB5B241,
    "095 70 70" : 0xB3B61E,
    "095 80 10" : 0xCCCAB7,
    "095 80 20" : 0xD0CCA5,
    "095 80 30" : 0xD2CE93,
    "095 80 40" : 0xD4D17E,
    "095 80 50" : 0xD5D16D,
    "095 80 60" : 0xD1CF59,
    "095 80 70" : 0xCDCF39,
    "095 80 80" : 0xCBCE20,
    "095 90 10" : 0xE8E8D2,
    "095 90 20" : 0xECE8BE,
    "095 90 30" : 0xECEBA7,
    "095 90 40" : 0xEDEB94,
    "095 90 50" : 0xF1EE84,
    "095 90 59" : 0xF4F071,
    "100 20 05" : 0x373B34,
    "100 30 05" : 0x4A4B45,
    "100 30 10" : 0x4B4C3D,
    "100 30 20" : 0x4D5233,
    "100 40 05" : 0x60615B,
    "100 40 10" : 0x646556,
    "100 40 20" : 0x626748,
    "100 40 30" : 0x616735,
    "100 40 40" : 0x5F6A22,
    "100 50 05" : 0x787A73,
    "100 50 10" : 0x7B7B69,
    "100 50 20" : 0x7B7F5B,
    "100 50 30" : 0x7A804C,
    "100 50 40" : 0x798237,
    "100 50 50" : 0x738423,
    "100 60 05" : 0x94958C,
    "100 60 10" : 0x959583,
    "100 60 20" : 0x959974,
    "100 60 30" : 0x929960,
    "100 60 40" : 0x969C52,
    "100 60 50" : 0x919E3F,
    "100 60 60" : 0x889F1D,
    "100 70 05" : 0xAFB0A7,
    "100 70 10" : 0xAFB09D,
    "100 70 20" : 0xAFB38B,
    "100 70 30" : 0xADB479,
    "100 70 40" : 0xB0B76A,
    "100 70 50" : 0xADB655,
    "100 70 60" : 0xABB840,
    "100 80 05" : 0xC8CBBF,
    "100 80 10" : 0xCBCCB4,
    "100 80 20" : 0xCACEA3,
    "100 80 30" : 0xCCD092,
    "100 80 40" : 0xC9D07F,
    "100 80 50" : 0xCBD36E,
    "100 80 60" : 0xC7D754,
    "100 80 70" : 0xC5D841,
    "100 80 80" : 0xBFD919,
    "100 90 05" : 0xE6E6DB,
    "100 90 10" : 0xE7E9D2,
    "100 90 20" : 0xE9ECBE,
    "100 90 30" : 0xE9EEAD,
    "100 90 40" : 0xE8F097,
    "100 90 50" : 0xE5EE83,
    "110 20 10" : 0x343A2E,
    "110 30 20" : 0x445133,
    "110 40 10" : 0x606657,
    "110 40 20" : 0x5D6747,
    "110 40 30" : 0x576A37,
    "110 40 40" : 0x546D28,
    "110 50 10" : 0x777C6B,
    "110 50 20" : 0x73805E,
    "110 50 30" : 0x73824E,
    "110 50 40" : 0x6B853C,
    "110 50 50" : 0x608623,
    "110 50 55" : 0x5F8B18,
    "110 60 10" : 0x8F9784,
    "110 60 20" : 0x8D9C78,
    "110 60 30" : 0x8E9D67,
    "110 60 40" : 0x879E57,
    "110 60 50" : 0x7EA342,
    "110 60 60" : 0x76A625,
    "110 60 65" : 0x75A815,
    "110 70 10" : 0xABB19E,
    "110 70 20" : 0xA7B38D,
    "110 70 30" : 0xA2B47C,
    "110 70 40" : 0x9FB86B,
    "110 70 50" : 0x9BBA57,
    "110 70 60" : 0x91BC42,
    "110 70 70" : 0x86BD23,
    "110 70 77" : 0x84BF04,
    "110 80 10" : 0xC4CBB6,
    "110 80 20" : 0xC0D2A4,
    "110 80 30" : 0xC0D194,
    "110 80 40" : 0xB9D583,
    "110 80 50" : 0xB9D871,
    "110 80 60" : 0xB2DC5F,
    "110 80 70" : 0xABDC45,
    "110 90 05" : 0xE4E7DD,
    "110 90 10" : 0xE0EAD2,
    "110 90 20" : 0xDCEDBE,
    "110 90 30" : 0xDCEEAC,
    "110 90 35" : 0xD7F0A3,
    "110 90 40" : 0xDAF29B,
    "110 92 05" : 0xE8ECE1,
    "120 30 05" : 0x464B44,
    "120 30 10" : 0x485043,
    "120 30 20" : 0x425438,
    "120 40 05" : 0x5D635C,
    "120 40 10" : 0x5E6656,
    "120 40 20" : 0x56684A,
    "120 40 30" : 0x506B3C,
    "120 40 40" : 0x427029,
    "120 50 05" : 0x777B73,
    "120 50 10" : 0x737D6D,
    "120 50 20" : 0x6F835F,
    "120 50 30" : 0x67854F,
    "120 50 40" : 0x5A873D,
    "120 50 50" : 0x548930,
    "120 60 05" : 0x929890,
    "120 60 10" : 0x8C9786,
    "120 60 20" : 0x869A77,
    "120 60 30" : 0x819F68,
    "120 60 40" : 0x79A259,
    "120 60 50" : 0x70A548,
    "120 60 60" : 0x62A734,
    "120 60 63" : 0x5CA82B,
    "120 70 05" : 0xA9B0A7,
    "120 70 10" : 0xA6B19D,
    "120 70 20" : 0xA1B58F,
    "120 70 30" : 0x99BA81,
    "120 70 40" : 0x92BE70,
    "120 70 50" : 0x89C05F,
    "120 70 60" : 0x80C24F,
    "120 70 70" : 0x75C138,
    "120 70 75" : 0x6AC127,
    "120 80 05" : 0xC6CCC1,
    "120 80 10" : 0xC1CDB7,
    "120 80 20" : 0xBBD2AB,
    "120 80 30" : 0xB3D598,
    "120 80 40" : 0xABD788,
    "120 80 50" : 0xA1DC76,
    "120 80 60" : 0x98DF67,
    "120 90 05" : 0xDFE5DA,
    "120 90 10" : 0xE1EBD4,
    "120 90 20" : 0xD8EEC2,
    "120 90 30" : 0xD0F3B1,
    "130 30 20" : 0x395036,
    "130 40 10" : 0x5A6859,
    "130 40 20" : 0x4E6749,
    "130 40 30" : 0x466B40,
    "130 50 10" : 0x6F7D6D,
    "130 50 20" : 0x648161,
    "130 50 30" : 0x5A8452,
    "130 50 40" : 0x4C8744,
    "130 50 50" : 0x3B8A3A,
    "130 60 10" : 0x879787,
    "130 60 20" : 0x809B7A,
    "130 60 30" : 0x739E6C,
    "130 60 40" : 0x68A15D,
    "130 60 50" : 0x56A44C,
    "130 60 60" : 0x42A840,
    "130 70 10" : 0xA2B3A2,
    "130 70 20" : 0x9AB894,
    "130 70 30" : 0x8EBA87,
    "130 70 40" : 0x82BD75,
    "130 70 50" : 0x75C16A,
    "130 70 60" : 0x64C458,
    "130 80 10" : 0xBFD0BC,
    "130 80 20" : 0xB5D3AE,
    "130 80 30" : 0xABD7A0,
    "130 80 40" : 0x9DDA91,
    "130 80 50" : 0x91DD81,
    "130 90 05" : 0xDEE7DE,
    "130 90 10" : 0xDDEDD7,
    "130 90 20" : 0xCEEFC6,
    "130 92 05" : 0xE3EDE3,
    "140 20 05" : 0x2F3733,
    "140 20 10" : 0x313F34,
    "140 20 20" : 0x2C4332,
    "140 30 05" : 0x454E49,
    "140 30 10" : 0x405245,
    "140 30 20" : 0x37563D,
    "140 30 30" : 0x275936,
    "140 30 40" : 0x155B33,
    "140 40 05" : 0x5C655E,
    "140 40 10" : 0x546658,
    "140 40 20" : 0x47694D,
    "140 40 30" : 0x3B6E44,
    "140 40 40" : 0x1E733A,
    "140 40 50" : 0x0F7633,
    "140 50 05" : 0x727B74,
    "140 50 10" : 0x6D7E6F,
    "140 50 20" : 0x5F8265,
    "140 50 30" : 0x518759,
    "140 50 40" : 0x3B8A4D,
    "140 50 50" : 0x238E42,
    "140 50 60" : 0x0A9238,
    "140 60 05" : 0x8B9590,
    "140 60 10" : 0x849888,
    "140 60 20" : 0x789F80,
    "140 60 30" : 0x69A373,
    "140 60 40" : 0x5BA667,
    "140 60 50" : 0x3FA759,
    "140 60 60" : 0x24AC50,
    "140 60 70" : 0x07AC45,
    "140 70 05" : 0xA5AFA8,
    "140 70 10" : 0x9DB2A4,
    "140 70 20" : 0x90B797,
    "140 70 30" : 0x80BC8C,
    "140 70 40" : 0x76C080,
    "140 70 50" : 0x5EC571,
    "140 70 60" : 0x42C764,
    "140 80 10" : 0xBCD0BE,
    "140 80 20" : 0xAED4B0,
    "140 80 30" : 0x9DD6A4,
    "140 80 40" : 0x87DC98,
    "140 90 05" : 0xDCE8DE,
    "140 90 10" : 0xDAEED9,
    "150 30 20" : 0x2D5540,
    "150 30 30" : 0x1D583B,
    "150 40 10" : 0x52665B,
    "150 40 20" : 0x446B53,
    "150 40 30" : 0x276D4B,
    "150 40 40" : 0x0A7140,
    "150 40 50" : 0x02723B,
    "150 50 10" : 0x687D72,
    "150 50 20" : 0x588269,
    "150 50 30" : 0x438861,
    "150 50 40" : 0x288A5B,
    "150 50 50" : 0x058E50,
    "150 50 60" : 0x009047,
    "150 60 10" : 0x83988D,
    "150 60 20" : 0x729E83,
    "150 60 30" : 0x61A07B,
    "150 60 40" : 0x48A471,
    "150 60 50" : 0x21A96B,
    "150 60 60" : 0x00AA5C,
    "150 70 10" : 0x9CB2A5,
    "150 70 20" : 0x8DB99E,
    "150 70 30" : 0x7ABF95,
    "150 70 40" : 0x63C18A,
    "150 70 50" : 0x48C37F,
    "150 80 10" : 0xB8D0C1,
    "150 80 20" : 0xA8D5B7,
    "150 80 30" : 0x94D8B0,
    "150 80 40" : 0x7FDCA3,
    "150 90 05" : 0xDCE8DE,
    "150 90 10" : 0xD6EDDA,
    "160 20 15" : 0x234135,
    "160 20 20" : 0x1C3B33,
    "160 30 05" : 0x424E4A,
    "160 30 10" : 0x3E5249,
    "160 30 15" : 0x335044,
    "160 30 20" : 0x275343,
    "160 30 25" : 0x1E543F,
    "160 30 30" : 0x11553D,
    "160 30 35" : 0x035A3E,
    "160 30 40" : 0x02593B,
    "160 40 05" : 0x586460,
    "160 40 10" : 0x526860,
    "160 40 15" : 0x4A6A5D,
    "160 40 20" : 0x3B6A59,
    "160 40 25" : 0x306B54,
    "160 40 30" : 0x1F6E52,
    "160 40 35" : 0x157050,
    "160 40 40" : 0x0C704E,
    "160 40 45" : 0x00714B,
    "160 40 50" : 0x007146,
    "160 40 55" : 0x007545,
    "160 50 05" : 0x6F7C78,
    "160 50 10" : 0x657E76,
    "160 50 15" : 0x5E8274,
    "160 50 20" : 0x538572,
    "160 50 25" : 0x46856C,
    "160 50 30" : 0x3A876A,
    "160 50 35" : 0x298A68,
    "160 50 40" : 0x128C65,
    "160 50 45" : 0x128D62,
    "160 50 50" : 0x038D5F,
    "160 50 55" : 0x008F5C,
    "160 50 60" : 0x008F59,
    "160 60 05" : 0x889691,
    "160 60 10" : 0x81998F,
    "160 60 15" : 0x789C8D,
    "160 60 20" : 0x6D9E89,
    "160 60 25" : 0x63A186,
    "160 60 30" : 0x57A384,
    "160 60 35" : 0x46A581,
    "160 60 40" : 0x35A67D,
    "160 60 45" : 0x20A87B,
    "160 60 50" : 0x05A877,
    "160 60 55" : 0x02A872,
    "160 60 58" : 0x00A96E,
    "160 70 05" : 0xA2B0AC,
    "160 70 10" : 0x99B2A7,
    "160 70 15" : 0x8EB5A4,
    "160 70 20" : 0x85BAA3,
    "160 70 25" : 0x7ABC9F,
    "160 70 30" : 0x6DBD9C,
    "160 70 35" : 0x60BD99,
    "160 70 40" : 0x4EC296,
    "160 70 45" : 0x35C492,
    "160 70 50" : 0x2AC592,
    "160 80 05" : 0xBCCCC5,
    "160 80 10" : 0xB4CFC2,
    "160 80 15" : 0xA9D3BE,
    "160 80 20" : 0x9ED6BC,
    "160 80 25" : 0x96D6BB,
    "160 80 30" : 0x8CDAB8,
    "160 90 05" : 0xD8E8DF,
    "160 90 10" : 0xD0ECDC,
    "170 20 10" : 0x263C39,
    "170 20 20" : 0x133E35,
    "170 20 25" : 0x084134,
    "170 30 15" : 0x30544A,
    "170 30 20" : 0x225146,
    "170 30 25" : 0x115546,
    "170 30 30" : 0x0C5545,
    "170 30 35" : 0x005745,
    "170 30 40" : 0x005944,
    "170 40 10" : 0x4E6761,
    "170 40 15" : 0x43675D,
    "170 40 20" : 0x376C5F,
    "170 40 25" : 0x2B6B5B,
    "170 40 30" : 0x156F5B,
    "170 40 35" : 0x0C6F58,
    "170 40 40" : 0x057058,
    "170 40 45" : 0x006F55,
    "170 40 50" : 0x006F52,
    "170 50 10" : 0x657E77,
    "170 50 15" : 0x588075,
    "170 50 20" : 0x4F8375,
    "170 50 25" : 0x3E8572,
    "170 50 30" : 0x2D8671,
    "170 50 35" : 0x1B876F,
    "170 50 40" : 0x038B6D,
    "170 50 45" : 0x008A6D,
    "170 50 50" : 0x008E6C,
    "170 50 55" : 0x008C69,
    "170 60 10" : 0x7B9890,
    "170 60 15" : 0x759B8F,
    "170 60 20" : 0x649D8C,
    "170 60 25" : 0x5C9F8D,
    "170 60 30" : 0x48A08B,
    "170 60 35" : 0x2FA58A,
    "170 60 40" : 0x1FA488,
    "170 60 45" : 0x0FA486,
    "170 60 50" : 0x00A887,
    "170 70 10" : 0x97B4AC,
    "170 70 15" : 0x8CB6A9,
    "170 70 20" : 0x7FB9A8,
    "170 70 25" : 0x76BBA6,
    "170 70 30" : 0x65BFA6,
    "170 70 35" : 0x55BEA2,
    "170 70 40" : 0x3FBF9F,
    "170 80 10" : 0xB3D0C6,
    "170 80 15" : 0xA8D4C5,
    "170 80 20" : 0x9BD8C3,
    "170 80 25" : 0x8CD6C1,
    "170 90 05" : 0xDAE8E1,
    "170 90 10" : 0xCDECE0,
    "170 92 05" : 0xDDEEE9,
    "180 20 05" : 0x2F3C3B,
    "180 20 15" : 0x183B37,
    "180 20 20" : 0x113D3A,
    "180 30 05" : 0x43504F,
    "180 30 10" : 0x36504E,
    "180 30 15" : 0x2E524E,
    "180 30 20" : 0x20534D,
    "180 30 25" : 0x14564E,
    "180 30 30" : 0x0B554E,
    "180 30 35" : 0x09574F,
    "180 40 05" : 0x576462,
    "180 40 10" : 0x4F6964,
    "180 40 15" : 0x3F6963,
    "180 40 20" : 0x336C64,
    "180 40 25" : 0x226D65,
    "180 40 30" : 0x096D63,
    "180 40 35" : 0x006D62,
    "180 40 40" : 0x006F62,
    "180 40 45" : 0x006F63,
    "180 50 05" : 0x6F7E7D,
    "180 50 10" : 0x617F7B,
    "180 50 15" : 0x56817B,
    "180 50 20" : 0x48837A,
    "180 50 25" : 0x30857C,
    "180 50 30" : 0x21877A,
    "180 50 35" : 0x10877A,
    "180 50 40" : 0x038879,
    "180 50 45" : 0x008979,
    "180 50 50" : 0x008A78,
    "180 60 05" : 0x879695,
    "180 60 10" : 0x7A9894,
    "180 60 15" : 0x6F9B94,
    "180 60 20" : 0x639D94,
    "180 60 25" : 0x529E92,
    "180 60 30" : 0x3CA194,
    "180 60 35" : 0x23A294,
    "180 60 40" : 0x11A696,
    "180 60 45" : 0x08A696,
    "180 60 50" : 0x00A795,
    "180 70 05" : 0xA0B0AF,
    "180 70 10" : 0x94B2AE,
    "180 70 15" : 0x89B6AF,
    "180 70 20" : 0x7BB9AF,
    "180 70 25" : 0x6BBAAD,
    "180 70 30" : 0x5DBDAE,
    "180 70 35" : 0x44BEAE,
    "180 70 40" : 0x35C2B0,
    "180 80 05" : 0xBCCCC7,
    "180 80 10" : 0xB1D0CA,
    "180 80 15" : 0xA5D4CB,
    "180 80 20" : 0x94D5C8,
    "180 80 25" : 0x87D6C9,
    "180 80 30" : 0x7FDBCB,
    "180 90 05" : 0xD7E8E5,
    "180 90 10" : 0xCDEEE5,
    "190 20 20" : 0x134140,
    "190 30 15" : 0x2F5352,
    "190 30 20" : 0x1B5353,
    "190 30 25" : 0x0E5555,
    "190 30 30" : 0x015657,
    "190 30 35" : 0x005658,
    "190 40 10" : 0x4F6866,
    "190 40 15" : 0x416969,
    "190 40 20" : 0x336A6A,
    "190 40 25" : 0x1D6B6C,
    "190 40 30" : 0x116D6C,
    "190 40 35" : 0x026D6E,
    "190 40 40" : 0x006E6F,
    "190 40 45" : 0x007070,
    "190 50 10" : 0x637F7D,
    "190 50 15" : 0x578281,
    "190 50 20" : 0x498281,
    "190 50 25" : 0x388583,
    "190 50 30" : 0x138583,
    "190 50 35" : 0x028785,
    "190 50 40" : 0x018888,
    "190 50 45" : 0x008989,
    "190 60 10" : 0x7C9999,
    "190 60 15" : 0x749C9A,
    "190 60 20" : 0x619C99,
    "190 60 25" : 0x549E9C,
    "190 60 30" : 0x3DA1A0,
    "190 60 35" : 0x2CA3A2,
    "190 60 40" : 0x0BA3A1,
    "190 60 45" : 0x00A2A1,
    "190 70 10" : 0x94B2B2,
    "190 70 15" : 0x8DB6B3,
    "190 70 20" : 0x7DB6B5,
    "190 70 25" : 0x70BAB7,
    "190 70 30" : 0x5FBBBA,
    "190 70 35" : 0x4BBDBA,
    "190 80 10" : 0xB0CFCB,
    "190 80 15" : 0xA7D4D0,
    "190 80 20" : 0x98D4D0,
    "190 80 25" : 0x89D4D1,
    "190 90 05" : 0xDAE9E6,
    "190 90 10" : 0xCDEDE8,
    "200 20 10" : 0x273B3E,
    "200 20 15" : 0x19393E,
    "200 20 20" : 0x0A3B3F,
    "200 20 23" : 0x083D46,
    "200 30 05" : 0x3F4D4E,
    "200 30 10" : 0x3A5154,
    "200 30 15" : 0x2E5357,
    "200 30 20" : 0x225458,
    "200 30 25" : 0x0E5257,
    "200 30 30" : 0x03555C,
    "200 30 33" : 0x005560,
    "200 40 05" : 0x556465,
    "200 40 10" : 0x4C6668,
    "200 40 15" : 0x41686C,
    "200 40 20" : 0x346B70,
    "200 40 25" : 0x1D6B72,
    "200 40 30" : 0x0C6C74,
    "200 40 35" : 0x056B75,
    "200 40 40" : 0x006D7A,
    "200 50 05" : 0x6C7B7C,
    "200 50 10" : 0x637E82,
    "200 50 15" : 0x568184,
    "200 50 20" : 0x498286,
    "200 50 25" : 0x34828A,
    "200 50 30" : 0x1C858E,
    "200 50 35" : 0x098690,
    "200 50 40" : 0x008794,
    "200 50 45" : 0x008696,
    "200 60 05" : 0x869596,
    "200 60 10" : 0x7D989A,
    "200 60 15" : 0x6E9A9E,
    "200 60 20" : 0x639CA0,
    "200 60 25" : 0x519EA3,
    "200 60 30" : 0x379EA5,
    "200 60 35" : 0x27A0AB,
    "200 60 40" : 0x14A2AF,
    "200 70 05" : 0xA1AEB0,
    "200 70 10" : 0x94B3B7,
    "200 70 15" : 0x88B4B7,
    "200 70 20" : 0x7FB7B9,
    "200 70 25" : 0x6FB9C1,
    "200 80 05" : 0xBDCCCB,
    "200 80 10" : 0xAECDCF,
    "200 80 15" : 0xA3D0CF,
    "200 80 20" : 0x98D4D6,
    "200 80 25" : 0x88D4D9,
    "200 90 05" : 0xD9E9E8,
    "200 90 10" : 0xCDEBE9,
    "200 92 05" : 0xDBECEF,
    "210 30 15" : 0x284F56,
    "210 30 20" : 0x1B535D,
    "210 30 25" : 0x0E515F,
    "210 30 30" : 0x075062,
    "210 40 10" : 0x4C6569,
    "210 40 15" : 0x3F6770,
    "210 40 20" : 0x306872,
    "210 40 25" : 0x1C6974,
    "210 40 30" : 0x086879,
    "210 40 35" : 0x00677C,
    "210 40 38" : 0x006780,
    "210 50 10" : 0x637D83,
    "210 50 15" : 0x597F84,
    "210 50 20" : 0x49808A,
    "210 50 25" : 0x33828D,
    "210 50 30" : 0x218192,
    "210 50 35" : 0x158295,
    "210 50 40" : 0x03839B,
    "210 50 45" : 0x0083A0,
    "210 60 10" : 0x7D979D,
    "210 60 15" : 0x6E989F,
    "210 60 20" : 0x639DA7,
    "210 60 25" : 0x539FAC,
    "210 60 30" : 0x42A0B1,
    "210 60 35" : 0x269EB3,
    "210 60 40" : 0x0C9FB8,
    "210 70 10" : 0x95B2B6,
    "210 70 15" : 0x8CB4BC,
    "210 70 20" : 0x7FB6C0,
    "210 70 25" : 0x70B8C6,
    "210 70 30" : 0x60BBCC,
    "210 70 35" : 0x4ABBCE,
    "210 80 10" : 0xB4D0D3,
    "210 80 15" : 0xA7D3D6,
    "210 80 20" : 0x99D3DB,
    "210 80 25" : 0x8DD3DF,
    "210 90 05" : 0xD9EAEB,
    "210 90 10" : 0xCCEBEB,
    "220 20 05" : 0x2E383C,
    "220 20 15" : 0x1D3A46,
    "220 20 20" : 0x163A49,
    "220 30 05" : 0x414B4F,
    "220 30 10" : 0x394F55,
    "220 30 15" : 0x2A515C,
    "220 30 20" : 0x1E505F,
    "220 30 25" : 0x0E5163,
    "220 30 30" : 0x065069,
    "220 40 05" : 0x566467,
    "220 40 10" : 0x50676D,
    "220 40 15" : 0x416673,
    "220 40 20" : 0x356777,
    "220 40 25" : 0x2A697B,
    "220 40 30" : 0x166883,
    "220 40 35" : 0x0A6988,
    "220 40 40" : 0x07698C,
    "220 50 05" : 0x727D81,
    "220 50 10" : 0x687F85,
    "220 50 15" : 0x59808B,
    "220 50 20" : 0x4B818F,
    "220 50 25" : 0x3D8092,
    "220 50 30" : 0x26829A,
    "220 50 35" : 0x11819F,
    "220 50 40" : 0x0082A5,
    "220 60 05" : 0x879598,
    "220 60 10" : 0x7E979F,
    "220 60 15" : 0x7599A5,
    "220 60 20" : 0x6599A9,
    "220 60 25" : 0x569AB0,
    "220 60 30" : 0x469DB7,
    "220 60 35" : 0x369CB9,
    "220 60 40" : 0x199CBF,
    "220 70 05" : 0xA0AFB4,
    "220 70 10" : 0x9AB3BC,
    "220 70 15" : 0x91B5C1,
    "220 70 20" : 0x7EB5C6,
    "220 70 25" : 0x74B5CA,
    "220 70 30" : 0x63B5CD,
    "220 70 35" : 0x55B7D7,
    "220 80 05" : 0xBCCCCD,
    "220 80 10" : 0xB2D0D6,
    "220 80 15" : 0xA8D2DE,
    "220 80 20" : 0xA0D3E3,
    "220 80 25" : 0x93D3E6,
    "220 90 05" : 0xD7E8E9,
    "220 92 05" : 0xDCEBF1,
    "230 20 10" : 0x293A43,
    "230 20 20" : 0x17374C,
    "230 30 15" : 0x304F5C,
    "230 30 20" : 0x284F62,
    "230 30 25" : 0x185069,
    "230 40 10" : 0x4F626D,
    "230 40 15" : 0x476573,
    "230 40 20" : 0x37667A,
    "230 40 25" : 0x1E6480,
    "230 40 30" : 0x1D6686,
    "230 40 35" : 0x07658E,
    "230 40 40" : 0x006591,
    "230 50 10" : 0x657C86,
    "230 50 15" : 0x5B7E8D,
    "230 50 20" : 0x517F94,
    "230 50 25" : 0x437E99,
    "230 50 30" : 0x347D9D,
    "230 50 35" : 0x1E7FA6,
    "230 50 40" : 0x107DAC,
    "230 60 10" : 0x8097A2,
    "230 60 15" : 0x7497A7,
    "230 60 20" : 0x6997AF,
    "230 60 25" : 0x5B96B3,
    "230 60 30" : 0x5098BA,
    "230 60 35" : 0x3C99C1,
    "230 60 40" : 0x2D97C8,
    "230 70 10" : 0x9CB3BE,
    "230 70 15" : 0x8EB1C1,
    "230 70 20" : 0x80B2C9,
    "230 70 25" : 0x79B4D1,
    "230 70 30" : 0x6CB4D6,
    "230 80 10" : 0xB6CED9,
    "230 80 15" : 0xAACDDC,
    "230 80 20" : 0xA2CFE4,
    "230 90 05" : 0xDAE8E9,
    "240 20 15" : 0x223949,
    "240 20 20" : 0x1A374F,
    "240 20 22" : 0x153651,
    "240 30 05" : 0x434C52,
    "240 30 10" : 0x3E505C,
    "240 30 15" : 0x364F61,
    "240 30 20" : 0x2C4F66,
    "240 30 25" : 0x214E6C,
    "240 30 30" : 0x124D73,
    "240 30 35" : 0x024C77,
    "240 40 05" : 0x586169,
    "240 40 10" : 0x526470,
    "240 40 15" : 0x4A6679,
    "240 40 20" : 0x3E647E,
    "240 40 25" : 0x366586,
    "240 40 30" : 0x23638D,
    "240 40 35" : 0x176291,
    "240 40 40" : 0x0D6399,
    "240 50 05" : 0x717A80,
    "240 50 10" : 0x687C8B,
    "240 50 15" : 0x617D91,
    "240 50 20" : 0x547C97,
    "240 50 25" : 0x4A7DA0,
    "240 50 30" : 0x3A7CA5,
    "240 50 35" : 0x267AAC,
    "240 50 40" : 0x1E7BB3,
    "240 60 05" : 0x8A959D,
    "240 60 10" : 0x7E94A3,
    "240 60 15" : 0x7796AB,
    "240 60 20" : 0x6F97B3,
    "240 60 25" : 0x6397BB,
    "240 60 30" : 0x5896C2,
    "240 60 35" : 0x4396CA,
    "240 60 40" : 0x3497CD,
    "240 70 05" : 0xA3AEB6,
    "240 70 10" : 0x9CAFBD,
    "240 70 15" : 0x93B0C5,
    "240 70 20" : 0x88B0CD,
    "240 70 25" : 0x7EB1D4,
    "240 70 30" : 0x74B1DB,
    "240 80 05" : 0xBDCAD0,
    "240 80 10" : 0xB9CEDA,
    "240 80 15" : 0xAECDE1,
    "240 80 20" : 0xA5CFEB,
    "240 90 05" : 0xDCE8EF,
    "250 20 20" : 0x1B3752,
    "250 20 25" : 0x1D375A,
    "250 30 15" : 0x394E62,
    "250 30 20" : 0x2A4C68,
    "250 30 25" : 0x2A4D70,
    "250 30 30" : 0x1E4D7A,
    "250 40 10" : 0x566473,
    "250 40 15" : 0x4E637A,
    "250 40 20" : 0x43627F,
    "250 40 25" : 0x386188,
    "250 40 30" : 0x2F608D,
    "250 40 35" : 0x205F94,
    "250 40 40" : 0x11609B,
    "250 50 10" : 0x6D7B8B,
    "250 50 15" : 0x657B92,
    "250 50 20" : 0x5D7B9A,
    "250 50 25" : 0x527AA0,
    "250 50 30" : 0x4B78A9,
    "250 50 35" : 0x3B79B1,
    "250 50 40" : 0x2A79B9,
    "250 60 10" : 0x8694A5,
    "250 60 15" : 0x8095AE,
    "250 60 20" : 0x7493B5,
    "250 60 25" : 0x6B93BD,
    "250 60 30" : 0x6293C3,
    "250 60 35" : 0x5A92CD,
    "250 60 40" : 0x5194D7,
    "250 70 10" : 0x9DAFBF,
    "250 70 15" : 0x99AFC8,
    "250 70 20" : 0x8FADD0,
    "250 70 25" : 0x89AFD9,
    "250 70 30" : 0x7EAEE0,
    "250 80 10" : 0xBACBDA,
    "250 80 15" : 0xB6CDE2,
    "250 80 20" : 0xA9C9E8,
    "250 90 05" : 0xDDE5EC,
    "250 92 05" : 0xE2EAF3,
    "260 20 05" : 0x32373E,
    "260 20 10" : 0x303845,
    "260 20 15" : 0x2A374B,
    "260 20 20" : 0x253752,
    "260 30 05" : 0x464B53,
    "260 30 10" : 0x424B5A,
    "260 30 15" : 0x3D4A62,
    "260 30 20" : 0x374B6A,
    "260 30 25" : 0x304A71,
    "260 30 30" : 0x2C4B79,
    "260 30 35" : 0x164680,
    "260 40 05" : 0x5B6069,
    "260 40 10" : 0x576272,
    "260 40 15" : 0x55627A,
    "260 40 20" : 0x4D6182,
    "260 40 25" : 0x476088,
    "260 40 30" : 0x3E5F8E,
    "260 40 35" : 0x385F97,
    "260 40 40" : 0x235C9F,
    "260 40 45" : 0x135CA7,
    "260 50 05" : 0x737880,
    "260 50 10" : 0x6F7989,
    "260 50 15" : 0x687891,
    "260 50 20" : 0x66799A,
    "260 50 25" : 0x5F78A3,
    "260 50 30" : 0x5678AD,
    "260 50 35" : 0x4D76B1,
    "260 50 40" : 0x4576BB,
    "260 60 05" : 0x8C919A,
    "260 60 10" : 0x8891A3,
    "260 60 15" : 0x8592AC,
    "260 60 20" : 0x7F91B4,
    "260 60 25" : 0x7991BC,
    "260 60 30" : 0x708FC4,
    "260 60 35" : 0x6A91CE,
    "260 70 05" : 0xA8AEB7,
    "260 70 10" : 0xA4ADC0,
    "260 70 15" : 0x9BACC8,
    "260 70 20" : 0x97ACCF,
    "260 70 25" : 0x90ACD9,
    "260 80 05" : 0xC2C9D0,
    "260 80 10" : 0xBDC9DB,
    "260 80 15" : 0xB6C8E1,
    "260 90 05" : 0xDCE3E9,
    "270 20 20" : 0x2A3454,
    "270 20 25" : 0x28355A,
    "270 20 29" : 0x253462,
    "270 30 15" : 0x464E65,
    "270 30 20" : 0x414B6A,
    "270 30 25" : 0x3E4B72,
    "270 30 30" : 0x39497A,
    "270 30 35" : 0x334680,
    "270 30 40" : 0x2B438A,
    "270 40 15" : 0x5A637C,
    "270 40 20" : 0x556184,
    "270 40 25" : 0x53618B,
    "270 40 30" : 0x4F5E93,
    "270 40 35" : 0x465C9B,
    "270 40 40" : 0x435BA2,
    "270 50 10" : 0x737A8E,
    "270 50 15" : 0x737B96,
    "270 50 20" : 0x6C789D,
    "270 50 25" : 0x6977A5,
    "270 50 30" : 0x6574AD,
    "270 50 35" : 0x5F74B3,
    "270 50 40" : 0x5A73BD,
    "270 60 10" : 0x8B93A7,
    "270 60 15" : 0x8A93B0,
    "270 60 20" : 0x8692B8,
    "270 60 25" : 0x8091BF,
    "270 60 30" : 0x7D8FC9,
    "270 60 35" : 0x778DD0,
    "270 70 10" : 0xA7AEC3,
    "270 70 15" : 0xA3ACCA,
    "270 70 20" : 0xA0ACD5,
    "270 70 25" : 0x9AA9DB,
    "270 80 10" : 0xC3CADD,
    "270 80 15" : 0xBFC8E4,
    "270 90 05" : 0xE2E4ED,
    "280 20 15" : 0x32354C,
    "280 20 20" : 0x313451,
    "280 20 25" : 0x32345A,
    "280 20 30" : 0x2D315F,
    "280 30 05" : 0x484B53,
    "280 30 10" : 0x494A5C,
    "280 30 15" : 0x494A64,
    "280 30 20" : 0x45486A,
    "280 30 25" : 0x444772,
    "280 30 30" : 0x404478,
    "280 30 35" : 0x3E437E,
    "280 30 40" : 0x3C4285,
    "280 40 05" : 0x5F616A,
    "280 40 10" : 0x5D5F71,
    "280 40 15" : 0x5C5D78,
    "280 40 20" : 0x5A5C81,
    "280 40 25" : 0x5B5C8B,
    "280 40 30" : 0x575A8F,
    "280 40 35" : 0x545897,
    "280 40 40" : 0x4F56A0,
    "280 40 45" : 0x4B54A9,
    "280 50 05" : 0x767982,
    "280 50 10" : 0x76778A,
    "280 50 15" : 0x767692,
    "280 50 20" : 0x72769C,
    "280 50 25" : 0x7373A3,
    "280 50 30" : 0x7171AB,
    "280 50 35" : 0x6B6FB2,
    "280 50 40" : 0x686EBD,
    "280 60 05" : 0x90929C,
    "280 60 10" : 0x8C8FA4,
    "280 60 15" : 0x8C8DAC,
    "280 60 20" : 0x8C8DB5,
    "280 60 25" : 0x8C8CBE,
    "280 60 30" : 0x898AC4,
    "280 60 35" : 0x8789CF,
    "280 70 05" : 0xAAAAB4,
    "280 70 10" : 0xAAABBF,
    "280 70 15" : 0xAAAAC8,
    "280 70 20" : 0xA7A7D1,
    "280 70 25" : 0xA7A6DA,
    "280 80 05" : 0xC8CAD3,
    "280 80 10" : 0xC7C8DA,
    "280 80 15" : 0xC2C4E1,
    "280 90 05" : 0xE0E2EB,
    "290 20 10" : 0x343445,
    "290 20 20" : 0x3A3452,
    "290 20 25" : 0x39335A,
    "290 20 30" : 0x35305F,
    "290 20 35" : 0x372C65,
    "290 30 15" : 0x4B4760,
    "290 30 20" : 0x4D4568,
    "290 30 25" : 0x4C426F,
    "290 30 30" : 0x4C4278,
    "290 30 35" : 0x4C407F,
    "290 30 40" : 0x4C3E87,
    "290 40 10" : 0x625F73,
    "290 40 15" : 0x645C78,
    "290 40 20" : 0x635A81,
    "290 40 25" : 0x625888,
    "290 40 30" : 0x62558F,
    "290 40 35" : 0x615295,
    "290 40 40" : 0x61529F,
    "290 40 45" : 0x5F50A4,
    "290 50 10" : 0x7A778B,
    "290 50 15" : 0x78738F,
    "290 50 20" : 0x79709A,
    "290 50 25" : 0x7C6FA1,
    "290 50 30" : 0x7B6DA8,
    "290 50 35" : 0x7B6AB0,
    "290 50 40" : 0x7968B8,
    "290 60 10" : 0x938EA5,
    "290 60 15" : 0x958DAD,
    "290 60 20" : 0x968BB5,
    "290 60 25" : 0x9489BC,
    "290 60 30" : 0x9586C4,
    "290 60 35" : 0x9283CA,
    "290 70 10" : 0xAEAAC0,
    "290 70 15" : 0xAFA7C9,
    "290 70 20" : 0xADA4CF,
    "290 70 25" : 0xADA1D8,
    "290 80 10" : 0xC9C5D9,
    "290 80 15" : 0xCAC3E0,
    "290 90 05" : 0xE5E4EC,
    "290 92 05" : 0xEAE8F4,
    "300 20 05" : 0x38363E,
    "300 20 15" : 0x3D334A,
    "300 20 20" : 0x3E304E,
    "300 20 25" : 0x3D3053,
    "300 20 30" : 0x3C2C5C,
    "300 30 05" : 0x4C4951,
    "300 30 10" : 0x50485A,
    "300 30 15" : 0x51455F,
    "300 30 20" : 0x524264,
    "300 30 25" : 0x55426E,
    "300 30 30" : 0x563F73,
    "300 30 35" : 0x573C79,
    "300 30 40" : 0x56397F,
    "300 40 05" : 0x636069,
    "300 40 10" : 0x655D70,
    "300 40 15" : 0x685B76,
    "300 40 20" : 0x6A587E,
    "300 40 25" : 0x6D5684,
    "300 40 30" : 0x6E528B,
    "300 40 35" : 0x6D518F,
    "300 40 40" : 0x6E4D96,
    "300 40 45" : 0x704CA0,
    "300 50 05" : 0x7A7780,
    "300 50 10" : 0x7D7488,
    "300 50 15" : 0x817390,
    "300 50 20" : 0x826F96,
    "300 50 25" : 0x836C9D,
    "300 50 30" : 0x856AA4,
    "300 50 35" : 0x8B69AD,
    "300 50 40" : 0x8A65B3,
    "300 60 05" : 0x94929D,
    "300 60 10" : 0x988EA3,
    "300 60 15" : 0x9B8BAB,
    "300 60 20" : 0x9D89B1,
    "300 60 25" : 0x9E86B9,
    "300 60 30" : 0xA082C0,
    "300 60 35" : 0xA17FC6,
    "300 70 05" : 0xADABB6,
    "300 70 10" : 0xB4A7BD,
    "300 70 15" : 0xB5A5C5,
    "300 70 20" : 0xB8A3CD,
    "300 70 25" : 0xB89FD4,
    "300 80 05" : 0xCAC7D1,
    "300 80 10" : 0xCDC3D9,
    "300 80 15" : 0xD1C2E1,
    "300 90 05" : 0xE7E3EB,
    "310 20 20" : 0x41304C,
    "310 20 25" : 0x472D52,
    "310 20 30" : 0x442657,
    "310 30 15" : 0x57475F,
    "310 30 20" : 0x594466,
    "310 30 25" : 0x5C3F69,
    "310 30 30" : 0x603B6E,
    "310 30 35" : 0x603A71,
    "310 30 40" : 0x633778,
    "310 40 10" : 0x6A5E70,
    "310 40 15" : 0x6E5C77,
    "310 40 20" : 0x73597C,
    "310 40 25" : 0x765682,
    "310 40 30" : 0x765286,
    "310 40 35" : 0x79508C,
    "310 40 40" : 0x7C4C92,
    "310 50 10" : 0x847589,
    "310 50 15" : 0x85728E,
    "310 50 20" : 0x8A6F93,
    "310 50 25" : 0x8D6C9B,
    "310 50 30" : 0x9068A1,
    "310 50 35" : 0x9165A4,
    "310 50 40" : 0x9464AC,
    "310 60 10" : 0x9C8DA1,
    "310 60 15" : 0xA08AA7,
    "310 60 20" : 0xA587AF,
    "310 60 25" : 0xA984B4,
    "310 60 30" : 0xAB81B8,
    "310 60 35" : 0xAF7DC2,
    "310 70 10" : 0xB6A6B9,
    "310 70 15" : 0xBBA4C3,
    "310 70 20" : 0xBEA1C7,
    "310 70 25" : 0xC29ECE,
    "310 80 10" : 0xD1C3D6,
    "310 80 15" : 0xD7C0DB,
    "310 90 05" : 0xE8E3EA,
    "320 20 10" : 0x403542,
    "320 20 15" : 0x443247,
    "320 20 20" : 0x482D49,
    "320 20 25" : 0x48294D,
    "320 30 05" : 0x4E4851,
    "320 30 10" : 0x544655,
    "320 30 15" : 0x574059,
    "320 30 20" : 0x5E3E5E,
    "320 30 25" : 0x643C65,
    "320 30 30" : 0x653A69,
    "320 30 35" : 0x68376E,
    "320 30 37" : 0x6D3672,
    "320 40 05" : 0x656068,
    "320 40 10" : 0x6C5D6E,
    "320 40 15" : 0x715A73,
    "320 40 20" : 0x755676,
    "320 40 25" : 0x78527C,
    "320 40 30" : 0x7E4C7E,
    "320 40 35" : 0x834983,
    "320 40 40" : 0x85448B,
    "320 50 05" : 0x7E767E,
    "320 50 10" : 0x847385,
    "320 50 15" : 0x89708A,
    "320 50 20" : 0x8F6C8F,
    "320 50 25" : 0x946895,
    "320 50 30" : 0x99659A,
    "320 50 35" : 0x9C619E,
    "320 50 40" : 0x9F5EA4,
    "320 60 05" : 0x978F9A,
    "320 60 10" : 0x9F8E9F,
    "320 60 15" : 0xA689A5,
    "320 60 20" : 0xAB84A9,
    "320 60 25" : 0xAF81B0,
    "320 60 30" : 0xB47EB5,
    "320 60 35" : 0xB77AB9,
    "320 70 05" : 0xB1A8B2,
    "320 70 10" : 0xB9A6B9,
    "320 70 15" : 0xBCA2C0,
    "320 70 20" : 0xC59EC5,
    "320 70 25" : 0xCC9BCB,
    "320 80 05" : 0xCEC7CD,
    "320 80 10" : 0xD5C4D5,
    "320 80 15" : 0xDABDD8,
    "320 90 05" : 0xEAE3EA,
    "330 20 20" : 0x4A2B44,
    "330 20 25" : 0x52294A,
    "330 30 15" : 0x5C4357,
    "330 30 20" : 0x62405A,
    "330 30 25" : 0x673B5F,
    "330 30 30" : 0x6D3661,
    "330 30 35" : 0x713366,
    "330 30 40" : 0x762B67,
    "330 40 10" : 0x6F5C6B,
    "330 40 15" : 0x74586F,
    "330 40 20" : 0x7A5774,
    "330 40 25" : 0x805276,
    "330 40 30" : 0x884E7C,
    "330 40 35" : 0x8D4A7F,
    "330 40 40" : 0x904381,
    "330 40 45" : 0x933D83,
    "330 50 10" : 0x857282,
    "330 50 15" : 0x8E7188,
    "330 50 20" : 0x956D8C,
    "330 50 25" : 0x9A688E,
    "330 50 30" : 0xA26695,
    "330 50 35" : 0xA46098,
    "330 50 40" : 0xAC5A9A,
    "330 60 10" : 0xA28C9C,
    "330 60 15" : 0xAA8AA3,
    "330 60 20" : 0xB186A6,
    "330 60 25" : 0xB581A8,
    "330 60 30" : 0xBB7EAE,
    "330 60 35" : 0xC177B1,
    "330 60 40" : 0xC774B6,
    "330 70 10" : 0xBCA6B9,
    "330 70 15" : 0xC3A2BB,
    "330 70 20" : 0xCB9EBF,
    "330 70 25" : 0xD59BC4,
    "330 70 30" : 0xD896C6,
    "330 80 10" : 0xD8C2D1,
    "330 80 15" : 0xDFBFD7,
    "330 80 20" : 0xE9BADA,
    "330 90 05" : 0xEDE2E8,
    "340 20 05" : 0x3B353B,
    "340 20 15" : 0x49303F,
    "340 20 20" : 0x4F2E43,
    "340 20 25" : 0x552A45,
    "340 30 05" : 0x50484F,
    "340 30 10" : 0x584450,
    "340 30 15" : 0x604455,
    "340 30 20" : 0x664057,
    "340 30 25" : 0x6C3B5A,
    "340 30 30" : 0x70355A,
    "340 30 35" : 0x762F5D,
    "340 30 38" : 0x782B5E,
    "340 40 05" : 0x665E64,
    "340 40 10" : 0x715B67,
    "340 40 15" : 0x77576A,
    "340 40 20" : 0x80546D,
    "340 40 25" : 0x844E70,
    "340 40 30" : 0x8C4B73,
    "340 40 35" : 0x8E4274,
    "340 40 40" : 0x933E75,
    "340 40 45" : 0x9D3679,
    "340 50 05" : 0x7F767D,
    "340 50 10" : 0x8B7280,
    "340 50 15" : 0x926F83,
    "340 50 20" : 0x986B86,
    "340 50 25" : 0x9F6589,
    "340 50 30" : 0xA6618A,
    "340 50 35" : 0xAB5B8F,
    "340 50 40" : 0xB45591,
    "340 50 45" : 0xBA4F92,
    "340 60 05" : 0x9A8F96,
    "340 60 10" : 0xA58C9B,
    "340 60 15" : 0xAF889E,
    "340 60 20" : 0xB483A0,
    "340 60 25" : 0xBB7FA3,
    "340 60 30" : 0xC07BA7,
    "340 60 35" : 0xC975A8,
    "340 60 40" : 0xCE70AB,
    "340 70 05" : 0xB5A9B1,
    "340 70 10" : 0xBFA6B5,
    "340 70 15" : 0xC9A1B9,
    "340 70 20" : 0xCF9CB9,
    "340 70 25" : 0xD798BC,
    "340 70 30" : 0xE094C2,
    "340 70 35" : 0xE78FC3,
    "340 80 05" : 0xD0C5C9,
    "340 80 10" : 0xDCC3D1,
    "340 80 15" : 0xE4BDD1,
    "340 80 20" : 0xEFBCD6,
    "340 90 05" : 0xECE1E7,
    "340 92 05" : 0xF4E6ED,
    "350 20 10" : 0x45353E,
    "350 20 20" : 0x522D3F,
    "350 20 25" : 0x56293E,
    "350 20 30" : 0x602643,
    "350 30 15" : 0x614350,
    "350 30 20" : 0x6A4054,
    "350 30 25" : 0x723D56,
    "350 30 30" : 0x763956,
    "350 30 35" : 0x7B3256,
    "350 30 40" : 0x7F2C57,
    "350 40 10" : 0x745E69,
    "350 40 15" : 0x795866,
    "350 40 20" : 0x825469,
    "350 40 25" : 0x87516A,
    "350 40 30" : 0x8F4B6A,
    "350 40 35" : 0x94456D,
    "350 40 40" : 0x9A416D,
    "350 40 45" : 0x9F3A6E,
    "350 40 50" : 0xA62C6D,
    "350 50 10" : 0x8A737E,
    "350 50 15" : 0x946F7E,
    "350 50 20" : 0x9A6B82,
    "350 50 25" : 0xA46682,
    "350 50 30" : 0xAA6384,
    "350 50 35" : 0xB25B83,
    "350 50 40" : 0xB95985,
    "350 50 45" : 0xC05387,
    "350 50 50" : 0xC84B87,
    "350 60 10" : 0xA68C98,
    "350 60 15" : 0xAF899A,
    "350 60 20" : 0xB9859B,
    "350 60 25" : 0xC0809A,
    "350 60 30" : 0xC87B9E,
    "350 60 35" : 0xD077A0,
    "350 60 40" : 0xD772A1,
    "350 60 45" : 0xDD6EA3,
    "350 70 10" : 0xC0A6B0,
    "350 70 15" : 0xCAA2B2,
    "350 70 20" : 0xD49EB5,
    "350 70 25" : 0xDD9AB7,
    "350 70 30" : 0xE794B7,
    "350 70 35" : 0xED91B9,
    "350 80 10" : 0xDBC1CB,
    "350 80 15" : 0xE4BECE,
    "350 80 20" : 0xEEB9CF,
    "350 90 05" : 0xEEE2E5,
    "360 20 15" : 0x4C2E37,
    "360 30 05" : 0x51484C,
    "360 30 10" : 0x5C4850,
    "360 30 15" : 0x62414C,
    "360 30 20" : 0x693E4D,
    "360 30 25" : 0x6E3A4C,
    "360 30 30" : 0x75334C,
    "360 30 35" : 0x7D2F4C,
    "360 30 40" : 0x802B4C,
    "360 40 05" : 0x685F62,
    "360 40 10" : 0x715D65,
    "360 40 15" : 0x795762,
    "360 40 20" : 0x825564,
    "360 40 25" : 0x894F63,
    "360 40 30" : 0x924A64,
    "360 40 35" : 0x984463,
    "360 40 40" : 0xA03D65,
    "360 40 45" : 0xA33862,
    "360 40 50" : 0xAB2E62,
    "360 50 05" : 0x84777C,
    "360 50 10" : 0x8C737B,
    "360 50 15" : 0x946E7A,
    "360 50 20" : 0x9C6B7B,
    "360 50 25" : 0xA6677C,
    "360 50 30" : 0xAD627C,
    "360 50 35" : 0xB55C7C,
    "360 50 40" : 0xBE587A,
    "360 50 45" : 0xC44F7B,
    "360 50 50" : 0xC94979,
    "360 60 05" : 0x9C9195,
    "360 60 10" : 0xA58C94,
    "360 60 15" : 0xAE8995,
    "360 60 20" : 0xB98696,
    "360 60 25" : 0xC28096,
    "360 70 05" : 0xB9ABB0,
    "360 70 10" : 0xC1A5AE,
    "360 70 15" : 0xCBA2AF,
    "360 80 05" : 0xD4C8CA,
    "360 80 10" : 0xDEC3C9,
    "360 90 05" : 0xF2E3E2,
    "360 92 05" : 0xF5E7EC
}

#EFFECT.Create the dict of data RAL Effect. Contains RAL Effect number and hex-color
effect_dict = {
    "110-1" : 0xE6EBEB,
    "110-2" : 0xE0E1D9,
    "110-3" : 0xCACBC4,
    "110-4" : 0xC7CDCA,
    "110-5" : 0xCAD2CD,
    "110-6" : 0xCACECC,
    "110-M" : 0xA2A7A9,
    "120-1" : 0xEDF0EE,
    "120-2" : 0xF4F6F0,
    "120-3" : 0xF0F1E7,
    "120-4" : 0xE8E8DA,
    "120-5" : 0xE3E0CB,
    "120-6" : 0xE8E8D4,
    "120-M" : 0x969891,
    "130-1" : 0xEDF5BF,
    "130-2" : 0xECF5C7,
    "130-3" : 0xEBF4D1,
    "130-4" : 0xF5F6D3,
    "130-5" : 0xEBECC0,
    "130-6" : 0xF5EEB4,
    "130-M" : 0xADB49B,
    "140-1" : 0xF6DCAE,
    "140-2" : 0xF6E4AB,
    "140-3" : 0xF9EBC4,
    "140-4" : 0xF6E7C3,
    "140-5" : 0xF5EACC,
    "140-6" : 0xE2DABA,
    "140-M" : 0xB6B197,
    "150-1" : 0xF6F4ED,
    "150-2" : 0xF5EFE8,
    "150-3" : 0xF0E6DD,
    "150-4" : 0xF8E8D9,
    "150-5" : 0xF5EEE1,
    "150-6" : 0xF7E3DB,
    "150-M" : 0xB5A79A,
    "160-1" : 0xE9E4F0,
    "160-2" : 0xE9E5EE,
    "160-3" : 0xEFECEC,
    "160-4" : 0xF0E4E6,
    "160-5" : 0xEEE8E4,
    "160-6" : 0xF0E6EE,
    "160-M" : 0xBAB0BD,
    "170-1" : 0xCACCD5,
    "170-2" : 0xACB0C4,
    "170-3" : 0xC0CADF,
    "170-4" : 0xD4DCF2,
    "170-5" : 0xCBC8DC,
    "170-6" : 0xCBC7DB,
    "170-M" : 0xACA9BA,
    "180-1" : 0xB3C0CB,
    "180-2" : 0xBFCEE2,
    "180-3" : 0xCDDDF0,
    "180-4" : 0xCCE3F1,
    "180-5" : 0xCAE0E6,
    "180-6" : 0xDDECF0,
    "180-M" : 0x96A8AC,
    "190-1" : 0xA9DDE6,
    "190-2" : 0xBDE7F7,
    "190-3" : 0xC3E2E8,
    "190-4" : 0xBDDEDE,
    "190-5" : 0xD6E8ED,
    "190-6" : 0xA4C6C5,
    "190-M" : 0x8FB5B4,
    "210-1" : 0xCECEB8,
    "210-2" : 0xEAEDD8,
    "210-3" : 0xE3E9DE,
    "210-4" : 0xD7EAE8,
    "210-5" : 0xD9ECE6,
    "210-6" : 0xD6EEDA,
    "210-M" : 0xB2B9AA,
    "220-1" : 0x51C27A,
    "220-2" : 0x18A45D,
    "220-3" : 0x00774A,
    "220-4" : 0x118D5F,
    "220-5" : 0x15865A,
    "220-6" : 0x087058,
    "220-M" : 0x008752,
    "230-1" : 0xB2E5A0,
    "230-2" : 0x85D375,
    "230-3" : 0x64C04E,
    "230-4" : 0x4AA245,
    "230-5" : 0x307343,
    "230-6" : 0x32663D,
    "230-M" : 0x60B365,
    "240-1" : 0xD2E094,
    "240-2" : 0xA0BC6C,
    "240-3" : 0x8AA25C,
    "240-4" : 0x788A4D,
    "240-5" : 0x567846,
    "240-6" : 0x467840,
    "240-M" : 0x5E7E47,
    "250-1" : 0xE8EFA8,
    "250-2" : 0xDBEB75,
    "250-3" : 0xB2C614,
    "250-4" : 0x96B24A,
    "250-5" : 0x879D40,
    "250-6" : 0x647036,
    "250-M" : 0xAFB95C,
    "260-1" : 0xECF1B8,
    "260-2" : 0xE8F088,
    "260-3" : 0xE8E250,
    "260-4" : 0xDECD2D,
    "260-5" : 0xD6BE36,
    "260-6" : 0xE4C126,
    "260-M" : 0xB7A35C,
    "270-1" : 0xF7E987,
    "270-2" : 0xEFD843,
    "270-3" : 0xEACA25,
    "270-4" : 0xE0BF01,
    "270-5" : 0xEDC500,
    "270-6" : 0xF4D24A,
    "270-M" : 0xC09A3A,
    "280-1" : 0xF4EC99,
    "280-2" : 0xEADE95,
    "280-3" : 0xDCC87C,
    "280-4" : 0xD0BC64,
    "280-5" : 0xD7AE46,
    "280-6" : 0xCAA345,
    "280-M" : 0xB89E59,
    "290-1" : 0xD1A659,
    "290-2" : 0xBD9244,
    "290-3" : 0xD3B666,
    "290-4" : 0xC89F2A,
    "290-5" : 0xE0BE48,
    "290-6" : 0xF6B919,
    "290-M" : 0xB99044,
    "310-1" : 0xF1DEB8,
    "310-2" : 0xE6CC9C,
    "310-3" : 0xDBB779,
    "310-4" : 0xCD9F5E,
    "310-5" : 0xB8864B,
    "310-6" : 0x8F6538,
    "310-M" : 0xB68D60,
    "320-1" : 0xCEB673,
    "320-2" : 0xAD8B58,
    "320-3" : 0xB49053,
    "320-4" : 0x9D703D,
    "320-5" : 0x81583B,
    "320-6" : 0x735036,
    "320-M" : 0xB7832E,
    "330-1" : 0xAA6F61,
    "330-2" : 0x915440,
    "330-3" : 0x7C5648,
    "330-4" : 0x64483B,
    "330-5" : 0x583F38,
    "330-6" : 0x4F3F3C,
    "330-M" : 0x926B55,
    "340-1" : 0xC2AAAF,
    "340-2" : 0xA89299,
    "340-3" : 0x845C5B,
    "340-4" : 0x6F474C,
    "340-5" : 0x57383C,
    "340-6" : 0x58363D,
    "340-M" : 0x5D4048,
    "350-1" : 0xA23A30,
    "350-2" : 0xAB443C,
    "350-3" : 0xA54F3F,
    "350-4" : 0x863C34,
    "350-5" : 0x7E3C32,
    "350-6" : 0x6A3F3A,
    "350-M" : 0x5B3837,
    "360-1" : 0xE08838,
    "360-2" : 0xDB7F2F,
    "360-3" : 0xC86B29,
    "360-4" : 0xBB5E36,
    "360-5" : 0x9C5A38,
    "360-6" : 0x935A3E,
    "360-M" : 0xA76645,
    "370-1" : 0xF9BC50,
    "370-2" : 0xFEA942,
    "370-3" : 0xFB9E2B,
    "370-4" : 0xE68E2B,
    "370-5" : 0xD4832E,
    "370-6" : 0xCD7722,
    "370-M" : 0xB48146,
    "380-1" : 0xFFA92F,
    "380-2" : 0xFB9F18,
    "380-3" : 0xF8902B,
    "380-4" : 0xE37B2E,
    "380-5" : 0xF5843B,
    "380-6" : 0xED7432,
    "380-M" : 0xB0653E,
    "390-1" : 0xED7F48,
    "390-2" : 0xE76A35,
    "390-3" : 0xE45E28,
    "390-4" : 0xDE582C,
    "390-5" : 0xE05027,
    "390-6" : 0xD26636,
    "390-M" : 0xC07048,
    "410-1" : 0xF0896C,
    "410-2" : 0xEE7A57,
    "410-3" : 0xE86B48,
    "410-4" : 0xE06442,
    "410-5" : 0xD65A40,
    "410-6" : 0xD4644C,
    "410-M" : 0xB15136,
    "420-1" : 0xEEB4A0,
    "420-2" : 0xF4A48C,
    "420-3" : 0xEC9374,
    "420-4" : 0xE86C4D,
    "420-5" : 0xCF5E42,
    "420-6" : 0xC2583C,
    "420-M" : 0xA8604D,
    "430-1" : 0xF4C8BB,
    "430-2" : 0xEFA092,
    "430-3" : 0xE9877A,
    "430-4" : 0xE46056,
    "430-5" : 0xDD4846,
    "430-6" : 0xC44134,
    "430-M" : 0xAE6460,
    "440-1" : 0xD13D46,
    "440-2" : 0xD95052,
    "440-3" : 0xC04249,
    "440-4" : 0xA33138,
    "440-5" : 0xAC3938,
    "440-6" : 0xBE3C34,
    "440-M" : 0xA12D3A,
    "450-1" : 0xF7CAD0,
    "450-2" : 0xF3A8B0,
    "450-3" : 0xE67E88,
    "450-4" : 0xCE5B69,
    "450-5" : 0xB7363A,
    "450-6" : 0xC3272F,
    "450-M" : 0xAD2536,
    "460-1" : 0xF5A7AC,
    "460-2" : 0xEA838F,
    "460-3" : 0xE7666F,
    "460-4" : 0xDA555C,
    "460-5" : 0xAE3E46,
    "460-6" : 0x932535,
    "460-M" : 0xB44A56,
    "470-1" : 0xF5B5C8,
    "470-2" : 0xEF8EA3,
    "470-3" : 0xE67689,
    "470-4" : 0xD24E6D,
    "470-5" : 0xB62F55,
    "470-6" : 0xA62849,
    "470-M" : 0xB45365,
    "480-1" : 0xF8CDCE,
    "480-2" : 0xF5C4C3,
    "480-3" : 0xF2BEC2,
    "480-4" : 0xF4A8B7,
    "480-5" : 0xF093A4,
    "480-6" : 0xE26F88,
    "480-M" : 0xB78388,
    "490-1" : 0xF4D3D4,
    "490-2" : 0xF9CEC8,
    "490-3" : 0xECA098,
    "490-4" : 0xC88280,
    "490-5" : 0xC48493,
    "490-6" : 0xD8A2AF,
    "490-M" : 0xAF8892,
    "510-1" : 0xF1C9E1,
    "510-2" : 0xEAA4D0,
    "510-3" : 0xE083B5,
    "510-4" : 0xCE6292,
    "510-5" : 0xC4467E,
    "510-6" : 0xA43C71,
    "510-M" : 0xA0427E,
    "520-1" : 0xF4D4E4,
    "520-2" : 0xF0BCDA,
    "520-3" : 0xE4A6C7,
    "520-4" : 0xC4739A,
    "520-5" : 0xA84F75,
    "520-6" : 0x9A5676,
    "520-M" : 0xB76BA0,
    "530-1" : 0x9E4B56,
    "530-2" : 0x964657,
    "530-3" : 0x803F50,
    "530-4" : 0x853754,
    "530-5" : 0x6E2E48,
    "530-6" : 0x6C3454,
    "530-M" : 0x6F3D4F,
    "540-1" : 0xDBC1DB,
    "540-2" : 0xC8A2C7,
    "540-3" : 0x8A6189,
    "540-4" : 0xA36B9E,
    "540-5" : 0x8E5884,
    "540-6" : 0x613459,
    "540-M" : 0x754568,
    "550-1" : 0xE5D4DF,
    "550-2" : 0xD5BECF,
    "550-3" : 0xBB94AE,
    "550-4" : 0xA3788F,
    "550-5" : 0x92657E,
    "550-6" : 0x805369,
    "550-M" : 0xB8A0A8,
    "560-1" : 0xD2BFCD,
    "560-2" : 0xB89FB2,
    "560-3" : 0x947388,
    "560-4" : 0x7E5A69,
    "560-5" : 0x8D7888,
    "560-6" : 0x847387,
    "560-M" : 0xB29CAE,
    "570-1" : 0xD9CFEC,
    "570-2" : 0xCDBFE8,
    "570-3" : 0xBAABE1,
    "570-4" : 0xAC98D4,
    "570-5" : 0x9275B8,
    "570-6" : 0x8867A1,
    "570-M" : 0x9070AC,
    "580-1" : 0xC8D0EB,
    "580-2" : 0xC5C8E6,
    "580-3" : 0xB0B3D7,
    "580-4" : 0x7774A0,
    "580-5" : 0x4F5475,
    "580-6" : 0x3A3A5D,
    "580-M" : 0x7F819C,
    "590-1" : 0x786EA2,
    "590-2" : 0x58467E,
    "590-3" : 0x453A73,
    "590-4" : 0x3B3764,
    "590-5" : 0x333562,
    "590-6" : 0x3A3C82,
    "590-M" : 0x44426E,
    "610-1" : 0x7890B2,
    "610-2" : 0x6D7E9C,
    "610-3" : 0x7B96C0,
    "610-4" : 0x96B1DD,
    "610-5" : 0x6176B6,
    "610-6" : 0x5868A0,
    "610-M" : 0x8CA0C1,
    "620-1" : 0x476990,
    "620-2" : 0x6C94B2,
    "620-3" : 0x6B8697,
    "620-4" : 0x465F71,
    "620-5" : 0x283D56,
    "620-6" : 0x31394C,
    "620-M" : 0x243E54,
    "630-1" : 0x6AA0D8,
    "630-2" : 0x566C94,
    "630-3" : 0x415277,
    "630-4" : 0x424E74,
    "630-5" : 0x343C5E,
    "630-6" : 0x323E5E,
    "630-M" : 0x384764,
    "640-1" : 0x5F9FCC,
    "640-2" : 0x3884BC,
    "640-3" : 0x2C76B3,
    "640-4" : 0x1A5A94,
    "640-5" : 0x275291,
    "640-6" : 0x224E84,
    "640-M" : 0x0C4B8C,
    "650-1" : 0x75B4DE,
    "650-2" : 0x0E74A7,
    "650-3" : 0x15699E,
    "650-4" : 0x115480,
    "650-5" : 0x385E80,
    "650-6" : 0x2C4F6B,
    "650-M" : 0x0072A3,
    "660-1" : 0x0C93B8,
    "660-2" : 0x358EAF,
    "660-3" : 0x5BA6C0,
    "660-4" : 0x58B8D6,
    "660-5" : 0x74C3DA,
    "660-6" : 0x92CADD,
    "660-M" : 0x6CA1B4,
    "670-1" : 0x98D4F0,
    "670-2" : 0xA0DAF5,
    "670-3" : 0x96C6DD,
    "670-4" : 0x77BCDA,
    "670-5" : 0x6AB9DC,
    "670-6" : 0x68C0EE,
    "670-M" : 0x81ACBF,
    "680-1" : 0x7AACBF,
    "680-2" : 0x4992AB,
    "680-3" : 0x32748C,
    "680-4" : 0x397793,
    "680-5" : 0x216B8D,
    "680-6" : 0x105C7C,
    "680-M" : 0x285270,
    "690-1" : 0x4FBFD2,
    "690-2" : 0x26A3B6,
    "690-3" : 0x168396,
    "690-4" : 0x016D84,
    "690-5" : 0x14586A,
    "690-6" : 0x16576D,
    "690-M" : 0x00687C,
    "710-1" : 0x7BD4D6,
    "710-2" : 0x0DACB2,
    "710-3" : 0x1D8E94,
    "710-4" : 0x107780,
    "710-5" : 0x025F6A,
    "710-6" : 0x235050,
    "710-M" : 0x006E7A,
    "720-1" : 0xC0E7E4,
    "720-2" : 0xA6E6E1,
    "720-3" : 0x8AD6DB,
    "720-4" : 0x5FC0C8,
    "720-5" : 0x4294A6,
    "720-6" : 0x2C808E,
    "720-M" : 0x4EA0AA,
    "730-1" : 0xCAEBE8,
    "730-2" : 0x9AD7DB,
    "730-3" : 0x7DBCC1,
    "730-4" : 0x7EBEBB,
    "730-5" : 0x7AB0B3,
    "730-6" : 0x468B86,
    "730-M" : 0x6CAA9E,
    "740-1" : 0xC2E2D5,
    "740-2" : 0xB0DCD0,
    "740-3" : 0x93C9BA,
    "740-4" : 0x498A7C,
    "740-5" : 0x037466,
    "740-6" : 0x03645A,
    "740-M" : 0x427A6C,
    "750-1" : 0xBEDCCE,
    "750-2" : 0x8EBAA8,
    "750-3" : 0x3E7C69,
    "750-4" : 0x214D42,
    "750-5" : 0x395C54,
    "750-6" : 0x38494A,
    "750-M" : 0x21483E,
    "760-1" : 0xD0EAD0,
    "760-2" : 0xB3D4B0,
    "760-3" : 0xACC7A3,
    "760-4" : 0x86A380,
    "760-5" : 0x688664,
    "760-6" : 0x4A6D52,
    "760-M" : 0x406246,
    "770-1" : 0x96A68B,
    "770-2" : 0xA8B198,
    "770-3" : 0x7A7F62,
    "770-4" : 0x82816E,
    "770-5" : 0xB4B5A6,
    "770-6" : 0x818A7B,
    "770-M" : 0x868C69,
    "780-1" : 0xE7E4D1,
    "780-2" : 0xE4DDBD,
    "780-3" : 0xDACDA0,
    "780-4" : 0xCCBA8C,
    "780-5" : 0xA3967F,
    "780-6" : 0x767165,
    "780-M" : 0xAEA984,
    "790-1" : 0x475256,
    "790-2" : 0x444B51,
    "790-3" : 0x3E4346,
    "790-4" : 0x3C3E42,
    "790-5" : 0x2F3235,
    "790-6" : 0x30313B,
    "790-M" : 0x393A37,
    "810-1" : 0x9CA3AA,
    "810-2" : 0x8E9AA0,
    "810-3" : 0x7E8E94,
    "810-4" : 0x63717B,
    "810-5" : 0x566065,
    "810-6" : 0x424A50,
    "810-M" : 0x545A5D,
    "820-1" : 0xC7CCCE,
    "820-2" : 0xAEB4BA,
    "820-3" : 0x91999C,
    "820-4" : 0x828B91,
    "820-5" : 0x585D66,
    "820-6" : 0x4D525A,
    "820-M" : 0x9D9E9C,
    "830-1" : 0xBAC1C0,
    "830-2" : 0xA7ADAA,
    "830-3" : 0x919897,
    "830-4" : 0x707676,
    "830-5" : 0x575E5D,
    "830-6" : 0x5D666A,
    "830-M" : 0x868683,
    "840-1" : 0xE4E8DE,
    "840-2" : 0xD6DAD2,
    "840-3" : 0xB7BAAE,
    "840-4" : 0x83887E,
    "840-5" : 0x5D665D,
    "840-6" : 0x4C4C41,
    "840-M" : 0x5B5B56,
    "850-1" : 0xC3C7BF,
    "850-2" : 0xB3B8B1,
    "850-3" : 0xA7ACA6,
    "850-4" : 0x92948D,
    "850-5" : 0x6E7069,
    "850-6" : 0x525552,
    "850-M" : 0x7A7A75,
    "860-1" : 0xD9DEE0,
    "860-2" : 0xD1D5D9,
    "860-3" : 0xC4C7CB,
    "860-4" : 0x9EA0A2,
    "860-5" : 0x7D8181,
    "860-6" : 0x5F6667,
    "860-M" : 0xB0AEAC,
    "870-1" : 0xD5D4D5,
    "870-2" : 0x9A9A9A,
    "870-3" : 0x68696D,
    "870-4" : 0x575558,
    "870-5" : 0x535254,
    "870-6" : 0x484546,
    "870-M" : 0x635D5E
    }

#PANTONE.Create a dict with data of color in Pantone
pantone_dict = {100: 0xFCEA76, 101: 0xFCE85F, 102: 0xFEE500, 103: 0xD0BC00, 104: 0xBBA30D, 105: 0x998730, 106: 0xFCE85D, 107: 0xFDE724, 108: 0xF9DA00, 109: 0xF8D500, 110: 0xDBB216, 111: 0xB69920, 112: 0xA48C1A, 113: 0xFAE34E, 114: 0xF9DE45, 115: 0xF8DB46, 116: 0xF5CB08, 117: 0xCDA31F, 118: 0xB48F1F, 119: 0x937F20, 120: 0xF7DD76, 121: 0xF6D86F, 122: 0xF5D258, 123: 0xF2C541, 124: 0xEDB220, 125: 0xBB9121, 126: 0xA7861D, 127: 0xFAE17B, 128: 0xF8D962, 129: 0xF6D15A, 130: 0xEDAC1A, 131: 0xD0941F, 132: 0xAB7F20, 133: 0x775F1F, 134: 0xF5D27A, 135: 0xF1C15C, 136: 0xEFB646, 137: 0xEAA124, 138: 0xE68C28, 139: 0xB27827, 140: 0x7D5A25, 141: 0xF5CD66, 142: 0xF2BF4C, 143: 0xF0B336, 144: 0xEA961C, 145: 0xD08921, 146: 0xA97620, 147: 0x786428, 148: 0xF4D199, 149: 0xF2C688, 150: 0xEDAA50, 151: 0xE88D21, 152: 0xE68523, 153: 0xC17723, 154: 0x9D6120, 155: 0xF5D7A5, 156: 0xF1C382, 157: 0xEBA344, 158: 0xE47E1A, 159: 0xD0651E, 160: 0xAB5A20, 161: 0x66401D, 162: 0xF0C4A0, 163: 0xEBA677, 164: 0xE68A48, 165: 0xE37828, 166: 0xE06C2A, 167: 0xBB5D29, 168: 0x6F3B20, 169: 0xEEBCA8, 170: 0xE89C77, 171: 0xE4834E, 172: 0xE06E37, 173: 0xD7572B, 174: 0x9C4124, 175: 0x77402E, 176: 0xEDB9B4, 177: 0xE7948A, 178: 0xE27865, 179: 0xDD5143, 180: 0xC1433C, 181: 0x80352F, 182: 0xECBEC5, 183: 0xE79CA6, 184: 0xDF6B7C, 185: 0xD93740, 186: 0xC92A39, 187: 0xAC2B37, 188: 0x7D2935, 189: 0xEBB3BC, 190: 0xE58F9E, 191: 0xDE6276, 192: 0xDB3B50, 193: 0xC32E4C, 194: 0x9D2945, 195: 0x7E3545, 196: 0xEFCAD0, 197: 0xE8A1B0, 198: 0xDC5672, 199: 0xD82949, 200: 0xBF2B45, 201: 0xA12A3D, 202: 0x8D2838, 203: 0xEAB3C9, 204: 0xE387AA, 205: 0xDD5484, 206: 0xD82455, 207: 0xB0244A, 208: 0x8C2345, 209: 0x77253C, 210: 0xE9ABC2, 211: 0xE58BAD, 212: 0xDF6797, 213: 0xDB3E79, 214: 0xCF2366, 215: 0xAA2157, 216: 0x802447, 217: 0xE8BAD2, 218: 0xDD81AF, 219: 0xD73786, 220: 0xAE2359, 221: 0x9C2452, 222: 0x732444, 223: 0xE39EC1, 224: 0xD977A9, 225: 0xD3468F, 226: 0xD70C7A, 227: 0xAF1C63, 228: 0x8F2054, 229: 0x6D2244, 230: 0xE6AECB, 231: 0xDC8AB6, 232: 0xD576AA, 233: 0xC3167C, 234: 0xA41A67, 235: 0x8B1E56, 236: 0xE4B6D2, 237: 0xDA93BD, 238: 0xCC6CA6, 239: 0xC55A9D, 240: 0xBF4994, 241: 0xAC2B81, 242: 0x81255C, 243: 0xE3BBD4, 244: 0xD7A2C6, 245: 0xC987B5, 246: 0xB04590, 247: 0xAB3388, 248: 0xA12D86, 249: 0x85326B, 250: 0xE0C2D9, 251: 0xCCA5C9, 252: 0xB876AC, 253: 0x9E3A8A, 254: 0x942D83, 255: 0x762D6A, 256: 0xDCC8DD, 257: 0xC9ACCD, 258: 0x92579B, 259: 0x7A327E, 260: 0x6B2F6B, 261: 0x62295C, 262: 0x5C2D54, 263: 0xDBCEE3, 264: 0xBBA5CC, 265: 0x8D6CAB, 266: 0x6A4593, 267: 0x61398B, 268: 0x59317C, 269: 0x522D6A, 270: 0xB5B7D7, 271: 0x9093C4, 272: 0x7A79B3, 273: 0x343175, 274: 0x302D63, 275: 0x2C2855, 276: 0x28223C, 277: 0xA9C7E5, 278: 0x91B7DE, 279: 0x5C8DC6, 280: 0x223A76, 281: 0x23356B, 282: 0x252849, 283: 0x98C3E5, 284: 0x75ACDA, 285: 0x2B74B7, 286: 0x24509A, 287: 0x1A4784, 288: 0x223D72, 289: 0x21304E, 290: 0xC0E1ED, 291: 0xA1CDEB, 292: 0x6EB1DE, 293: 0x1B5196, 294: 0x1B4677, 295: 0x1F3A60, 296: 0x242935, 297: 0x7CCBEA, 298: 0x51BAE8, 299: 0x00A0DC, 300: 0x006CB4, 301: 0x005B95, 302: 0x00496A, 303: 0x0E3747, 304: 0xA6D6DE, 305: 0x73C6DC, 306: 0x00B3DB, 307: 0x0076AE, 308: 0x006287, 309: 0x004252, 310: 0x89CCDA, 311: 0x4FBBD1, 312: 0x00A8D0, 313: 0x0098C7, 314: 0x0084AC, 315: 0x006A85, 316: 0x004D58, 317: 0xC4E1DE, 318: 0xA1D3D3, 319: 0x6FC1C2, 320: 0x00A1AA, 321: 0x009296, 322: 0x007A7B, 323: 0x006160, 324: 0xB1D8D5, 325: 0x88C9C4, 326: 0x2FB2AB, 327: 0x00907D, 328: 0x007568, 329: 0x006A5F, 330: 0x265C50, 331: 0xBDDDD2, 332: 0xB1D8CC, 333: 0x8AC9B9, 334: 0x009A6E, 335: 0x00805E, 336: 0x00694E, 337: 0xA8D3C6, 338: 0x8FC9B8, 339: 0x1DAC8A, 340: 0x009E69, 341: 0x00845B, 342: 0x007055, 343: 0x285E48, 344: 0xB4D8BA, 345: 0xA0CFA8, 346: 0x87C597, 347: 0x00A351, 348: 0x008F4C, 349: 0x1E7040, 350: 0x32553B, 351: 0xBEDBBF, 352: 0xACD3B1, 353: 0xA3CFAB, 354: 0x3DAA4B, 355: 0x00A144, 356: 0x008139, 357: 0x1C5630, 358: 0xB4D4A2, 359: 0xAAD095, 360: 0x7CBB5A, 361: 0x56AF40, 362: 0x4EA93F, 363: 0x4F9237, 364: 0x4C782D, 365: 0xCADC9D, 366: 0xBDD68D, 367: 0xABCC6D, 368: 0x7CB82F, 369: 0x72B431, 370: 0x6A9529, 371: 0x586520, 372: 0xD9E29D, 373: 0xD1DD8D, 374: 0xC3D468, 375: 0xA9C833, 376: 0x98C11D, 377: 0x88A620, 378: 0x5D6821, 379: 0xE0E17A, 380: 0xD7DB54, 381: 0xCBD421, 382: 0xC6D219, 383: 0xA7B019, 384: 0x979916, 385: 0x7E7721, 386: 0xE7E36D, 387: 0xE1DE50, 388: 0xDBDC4F, 389: 0xCFD641, 390: 0xBCC600, 391: 0x9B9912, 392: 0x868118, 393: 0xECE683, 394: 0xEDE461, 395: 0xE8DF2F, 396: 0xE6DD01, 397: 0xC0B900, 398: 0xB3A700, 399: 0xA09407, 400: 0xC6C0B6, 401: 0xADA89F, 402: 0x9C958C, 403: 0x888178, 404: 0x746D65, 405: 0x625B54, 406: 0xCBC4BD, 407: 0xB3AAA4, 408: 0x9F938C, 409: 0x8B807A, 410: 0x7A6D68, 411: 0x5E534E, 412: 0x3A3431, 413: 0xC7C6BB, 414: 0xAFAFA3, 415: 0x929388, 416: 0x7B7D72, 417: 0x63655A, 418: 0x55574C, 419: 0x242721, 420: 0xD5D4D0, 421: 0xB8B9B7, 422: 0xA5A7A8, 423: 0x939694, 424: 0x787B7E, 425: 0x4F575C, 426: 0x25282B, 427: 0xD8DAD9, 428: 0xC9CED1, 429: 0xA9B0B7, 430: 0x858F98, 431: 0x5D6A76, 432: 0x3C4652, 433: 0x282E36, 434: 0xD2C9C8, 435: 0xC1B7BB, 436: 0xB0A2AA, 437: 0x7E6E76, 438: 0x554848, 439: 0x474041, 440: 0x3D3836, 441: 0xBFCDC8, 442: 0xACB7B2, 443: 0x98A3A5, 444: 0x768687, 445: 0x555F60, 446: 0x4C5351, 447: 0x444642, 448: 0x4E4328, 449: 0x594D30, 450: 0x5C4E28, 451: 0xA59D6D, 452: 0xB3AB7F, 453: 0xC8C09A, 454: 0xD1CDAA, 455: 0x6D5D2B, 456: 0xA48D1C, 457: 0xB4981D, 458: 0xE0D160, 459: 0xE4D777, 460: 0xEDDF8C, 461: 0xEFE49E, 462: 0x644F33, 463: 0x7F5621, 464: 0x916224, 465: 0xBB9959, 466: 0xC9AC7A, 467: 0xD4BF93, 468: 0xDECB99, 469: 0x653E25, 470: 0xA7632C, 471: 0xBA6A2F, 472: 0xE6A673, 473: 0xF0BF9B, 474: 0xF2C9A7, 475: 0xF3D0B2, 476: 0x543C2E, 477: 0x694434, 478: 0x774733, 479: 0xAD856D, 480: 0xC8AB99, 481: 0xD1B8A6, 482: 0xDBC6B7, 483: 0x653B2E, 484: 0xA33E2E, 485: 0xDC4234, 486: 0xE8957C, 487: 0xECAA90, 488: 0xF0C0AC, 489: 0xF3D0BA, 490: 0x603228, 491: 0x7E3D3C, 492: 0x8E4344, 493: 0xDA8EA0, 494: 0xE9A5B7, 495: 0xEDBFCB, 496: 0xEFC6D0, 497: 0x54342C, 498: 0x6A3932, 499: 0x7B4744, 500: 0xC58B93, 501: 0xDCA8B2, 502: 0xEBC3C6, 503: 0xEDCDD1, 504: 0x5D353B, 505: 0x6F3B42, 506: 0x7D404E, 507: 0xD497B0, 508: 0xE3AFC4, 509: 0xEABBCE, 510: 0xEFC6D3, 511: 0x622A52, 512: 0x85367B, 513: 0x983B90, 514: 0xCD95C0, 515: 0xDCADCD, 516: 0xE5C0D7, 517: 0xEAC9DC, 518: 0x4F2F44, 519: 0x5E2D5D, 520: 0x6A3274, 521: 0xAB84B6, 522: 0xBEA0C7, 523: 0xCEB6D4, 524: 0xDBC7DD, 525: 0x572A5D, 526: 0x743A8D, 527: 0x7B3F92, 528: 0xAE8CBD, 529: 0xC0A2CA, 530: 0xD1B8D5, 531: 0xDDC7DD, 532: 0x282932, 533: 0x263147, 534: 0x2C4068, 535: 0x90A2BF, 536: 0xA3B3CB, 537: 0xC1CFDD, 538: 0xCFD9E3, 539: 0x1D2E43, 540: 0x163D5C, 541: 0x154B75, 542: 0x70A7D0, 543: 0xA7C6E4, 544: 0xBDD6E7, 545: 0xC9DFEE, 546: 0x112E3A, 547: 0x053745, 548: 0x004455, 549: 0x619EB7, 550: 0x8CB6CA, 551: 0x9CC3D1, 552: 0xBFD5DD, 553: 0x325040, 554: 0x336447, 555: 0x3A7050, 556: 0x79A78D, 557: 0x8CB4A1, 558: 0xA3C4B6, 559: 0xB2CEC0, 560: 0x2A4538, 561: 0x236151, 562: 0x167565, 563: 0x79BBAB, 564: 0x96C9BC, 565: 0xB4D6CB, 566: 0xD2E3D7, 567: 0x214C3D, 568: 0x06715C, 569: 0x008F75, 570: 0x82C6B0, 571: 0xA6D3C1, 572: 0xBEDDCE, 573: 0xCAE2D6, 574: 0x4C5828, 575: 0x658237, 576: 0x779B3D, 577: 0xB3CC84, 578: 0xC2D89A, 579: 0xC7DAA0, 580: 0xCDDEAD, 581: 0x655F1C, 582: 0x93921B, 583: 0xB7BE16, 584: 0xD0D741, 585: 0xDDDF73, 586: 0xE3E385, 587: 0xE4E597, 600: 0xF3EDAA, 601: 0xEFEA9B, 602: 0xEDE88A, 603: 0xEDE457, 604: 0xEFE32A, 605: 0xE6CF00, 606: 0xD9BE00, 607: 0xF1ECAB, 608: 0xEEE895, 609: 0xE9E37B, 610: 0xE4D955, 611: 0xD8CC2D, 612: 0xCAB900, 613: 0xBCA705, 614: 0xE7E2B1, 615: 0xDFD99F, 616: 0xD7CE8C, 617: 0xCDC26C, 618: 0xB5A742, 619: 0xA2942C, 620: 0x948521, 621: 0xD8E2D4, 622: 0xBBD1C2, 623: 0xA2BFAF, 624: 0x87A796, 625: 0x678B7A, 626: 0x3A6A58, 627: 0x203E35, 628: 0xC8E3E2, 629: 0xA5D5DC, 630: 0x87CBD8, 631: 0x29B5CF, 632: 0x009ABB, 633: 0x007FA3, 634: 0x006D90, 635: 0xB6DCE4, 636: 0xA3D5E3, 637: 0x65C1DE, 638: 0x00ADD7, 639: 0x0098D0, 640: 0x0085BE, 641: 0x0077B5, 642: 0xD6E2EB, 643: 0xC7D9E7, 644: 0x97B8D4, 645: 0x79A0C6, 646: 0x5588B5, 647: 0x0D5B90, 648: 0x1D3D66, 649: 0xDEE5ED, 650: 0xCAD5E4, 651: 0xA3BAD8, 652: 0x759AC4, 653: 0x235E96, 654: 0x20426C, 655: 0x25355A, 656: 0xDFE8F2, 657: 0xC6D6EB, 658: 0xA9C4E3, 659: 0x7BA0D0, 660: 0x3975B7, 661: 0x275197, 662: 0x303F82, 663: 0xE4DEE7, 664: 0xDED7E3, 665: 0xC8BFD8, 666: 0x9F94B8, 667: 0x746796, 668: 0x5C487A, 669: 0x3D2B5A, 670: 0xEDD5E4, 671: 0xE5C3D9, 672: 0xDBA5C7, 673: 0xD492BB, 674: 0xC35899, 675: 0xB11F79, 676: 0x9F1E54, 677: 0xE7D2DF, 678: 0xE2C7D9, 679: 0xE3C1D7, 680: 0xCB96B9, 681: 0xB973A0, 682: 0x994879, 683: 0x7F2952, 684: 0xE4CAD6, 685: 0xE4BED2, 686: 0xD9AAC6, 687: 0xC489AB, 688: 0xB56F97, 689: 0x923C6C, 690: 0x642541, 691: 0xF0D8D7, 692: 0xE5C1C7, 693: 0xD8A7B4, 694: 0xC98F9C, 695: 0xB77783, 696: 0x964B57, 697: 0x8C434C, 698: 0xF2D7DB, 699: 0xEEC4CE, 700: 0xEBB1BF, 701: 0xE591A6, 702: 0xD3697F, 703: 0xBA4458, 704: 0xA4303C, 705: 0xF3E0E3, 706: 0xF0CCD0, 707: 0xECB8C4, 708: 0xE798A6, 709: 0xE27A89, 710: 0xDE5A6C, 711: 0xDA3248, 712: 0xF2CEB0, 713: 0xF1C39F, 714: 0xEEAF7A, 715: 0xE9954B, 716: 0xE68835, 717: 0xE37A33, 718: 0xD1692E, 719: 0xEED0AD, 720: 0xE9BA90, 721: 0xE2A770, 722: 0xCB8644, 723: 0xB9701D, 724: 0x98561F, 725: 0x81461D, 726: 0xE6C9A5, 727: 0xDCB894, 728: 0xCA9F75, 729: 0xBB854D, 730: 0xA06932, 731: 0x79491D, 732: 0x6B431C, 1205: 0xF9E49D, 1215: 0xF7DC86, 1225: 0xF2C150, 1235: 0xEEAD1A, 1245: 0xC08F23, 1255: 0xAC8325, 1265: 0x907127, 1345: 0xF2CB8E, 1355: 0xF1C27A, 1365: 0xEDAE5A, 1375: 0xE99C34, 1385: 0xD9852D, 1395: 0xA06928, 1405: 0x745125, 1485: 0xEFB670, 1495: 0xEBA149, 1505: 0xE78E2E, 1525: 0xCB6423, 1535: 0x975222, 1545: 0x643B1E, 1555: 0xF0C199, 1565: 0xECAB77, 1575: 0xE89449, 1585: 0xE58426, 1595: 0xDA7028, 1605: 0xA35A24, 1615: 0x8C4E20, 1625: 0xEBAB8B, 1635: 0xE8986D, 1645: 0xE4824A, 1655: 0xE17025, 1665: 0xDF6426, 1675: 0xA94B26, 1685: 0x874122, 1765: 0xEAACAE, 1767: 0xEDBDC2, 1775: 0xE89FA2, 1777: 0xE27E8A, 1785: 0xE06966, 1787: 0xDD5B61, 1788: 0xDE5346, 1795: 0xD63D36, 1797: 0xCA3639, 1805: 0xB4373C, 1807: 0xA4383D, 1815: 0x7F2F2D, 1817: 0x683737, 1895: 0xEDC0D2, 1905: 0xE8A4B8, 1915: 0xE16F8F, 1925: 0xDB3762, 1935: 0xCC3057, 1945: 0xAC2C4A, 1955: 0x922841, 2001: 0xF7E586, 2002: 0xF8E26E, 2003: 0xFAE448, 2004: 0xF6DB67, 2005: 0xF4D168, 2006: 0xF2C031, 2007: 0xE9A800, 2008: 0xF0BC3A, 2009: 0xEDAC20, 2010: 0xEEAA00, 2011: 0xEA9A00, 2012: 0xEB9D00, 2013: 0xEB9C00, 2014: 0xB97A07, 2015: 0xF2D4A8, 2016: 0xEDB46A, 2017: 0xEDB46E, 2018: 0xE88D19, 2019: 0xE17C0F, 2020: 0xBB6C17, 2021: 0xA3541B, 2022: 0xECB086, 2023: 0xE9A374, 2024: 0xE68E5E, 2025: 0xE99D57, 2026: 0xE37B44, 2027: 0xE06C42, 2028: 0xDE5722, 2029: 0xE17662, 2030: 0xDF6B5C, 2031: 0xD56357, 2032: 0xCE5148, 2033: 0xC0433B, 2034: 0xDA472F, 2035: 0xD12E28, 2036: 0xEBBFD2, 2037: 0xE09BBE, 2038: 0xDF78A8, 2039: 0xDB558F, 2040: 0xD82F4F, 2041: 0x972941, 2042: 0x6F3639, 2043: 0xE7C9D2, 2044: 0xE391B1, 2045: 0xDD6D98, 2046: 0xD2497F, 2047: 0xA03A63, 2048: 0x923756, 2049: 0x7A3343, 2050: 0xE7D6DC, 2051: 0xDCC4CE, 2052: 0xC7A1B2, 2053: 0xAF8099, 2054: 0x957381, 2055: 0x7F5E6C, 2056: 0x6F4F5E, 2057: 0xD391B7, 2058: 0xB783A7, 2059: 0xB7779A, 2060: 0xC16198, 2061: 0xB04982, 2062: 0xAE337E, 2063: 0xA5277A, 2064: 0xCF9ABF, 2065: 0xCEA5C5, 2066: 0xBF91BA, 2067: 0xAD6FA4, 2068: 0xA55E98, 2069: 0x9A498B, 2070: 0x8B3A83, 2071: 0xC4B1CF, 2072: 0xB097C1, 2073: 0xA993BF, 2074: 0x9473AB, 2075: 0x8A74AD, 2076: 0x8263A1, 2077: 0x694991, 2078: 0xB49BC0, 2079: 0x9B83A6, 2080: 0x9B7DB1, 2081: 0x7F599A, 2082: 0x6D4189, 2083: 0x956FA7, 2084: 0x714088, 2085: 0xDECEDF, 2086: 0x9989B9, 2087: 0x9385B6, 2088: 0x7A6AA5, 2089: 0x675293, 2090: 0x61468B, 2091: 0x513881, 2092: 0xB2A6CA, 2093: 0xA198C1, 2094: 0x847CAE, 2095: 0x7065A3, 2096: 0x5E5194, 2097: 0x5E5195, 2098: 0x483E87, 2099: 0xA89AC2, 2100: 0x9B91BE, 2101: 0x847FB4, 2102: 0x5E5C9F, 2103: 0x564C93, 2104: 0x444089, 2105: 0x382C75, 2106: 0xB7C0D3, 2107: 0x9EA3B7, 2108: 0x7A85A0, 2109: 0x5C6D8B, 2110: 0x515D82, 2111: 0x3F5173, 2112: 0x2A3065, 2113: 0xA0ADD3, 2114: 0x838FC0, 2115: 0x657FB8, 2116: 0x566EAC, 2117: 0x3A4C93, 2118: 0x31397F, 2119: 0x2F366A, 2120: 0xC1D1E7, 2121: 0x8CADD6, 2122: 0x96ABD2, 2123: 0x6F8CC2, 2124: 0x637DB7, 2125: 0x5670AF, 2126: 0x2D519A, 2127: 0xB8CFE7, 2128: 0x92B2D9, 2129: 0x6593C8, 2130: 0x5A7FBC, 2131: 0x466AAD, 2132: 0x3064A9, 2133: 0x155EA4, 2134: 0x96A9D0, 2135: 0x6788BE, 2136: 0x7B92AD, 2137: 0x637D9C, 2138: 0x637682, 2139: 0x55718F, 2140: 0x2F4E74, 2141: 0x85B8DF, 2142: 0x79A5D2, 2143: 0x4384BF, 2144: 0x0069AD, 2145: 0x115391, 2146: 0x1D4481, 2147: 0x2A3B80, 2148: 0x6690AB, 2149: 0x5085A4, 2150: 0x407797, 2151: 0x1C6EA5, 2152: 0x13658B, 2153: 0x015379, 2154: 0x014779, 2155: 0xA8BDCE, 2156: 0x8CA8BF, 2157: 0x7196B1, 2158: 0x5784A2, 2159: 0x4E7A99, 2160: 0x3C6F8E, 2161: 0x17597E, 2162: 0x9BABB5, 2163: 0x82979F, 2164: 0x728E9C, 2165: 0x597A8B, 2166: 0x496B7E, 2167: 0x3F6578, 2168: 0x134153, 2169: 0x81B1D1, 2170: 0x4699C5, 2171: 0x3FA0D6, 2172: 0x2880BF, 2173: 0x0089C8, 2174: 0x0076BB, 2175: 0x006CB4, 2176: 0xADBFC1, 2177: 0x769FAB, 2178: 0x508697, 2179: 0x407685, 2180: 0x2F6979, 2181: 0x1C5668, 2182: 0x154F5F, 2183: 0x0094BA, 2184: 0x008BCB, 2185: 0x007CA8, 2186: 0x005483, 2187: 0x00527F, 2188: 0x00476C, 2189: 0x0D394E, 2190: 0x3FB1E2, 2191: 0x05A0D9, 2192: 0x0094D2, 2193: 0x008CCC, 2194: 0x0087C9, 2195: 0x0074BC, 2196: 0x006BAD, 2197: 0x8AC8D4, 2198: 0x65BCCD, 2199: 0x28B1CA, 2200: 0x00A8C3, 2201: 0x00A9C8, 2202: 0x009FD5, 2203: 0x008AB0, 2204: 0xB0CCD8, 2205: 0x78AEBD, 2206: 0x6F9FB6, 2207: 0x4B95AB, 2208: 0x5889A1, 2209: 0x43859A, 2210: 0x124C64, 2211: 0x75A0A3, 2212: 0x51848A, 2213: 0x3C7176, 2214: 0x327179, 2215: 0x215A67, 2216: 0x294F5A, 2217: 0x113B40, 2218: 0x6BADB6, 2219: 0x5BA6B1, 2220: 0x4395A2, 2221: 0x348796, 2222: 0x178290, 2223: 0x007080, 2224: 0x006275, 2225: 0x97CACA, 2226: 0x69BABE, 2227: 0x69BBBC, 2228: 0x009FAC, 2229: 0x009BA7, 2230: 0x008A90, 2231: 0x007E8A, 2232: 0x6CB1B3, 2233: 0x4BA2A6, 2234: 0x3C9A9F, 2235: 0x248E91, 2236: 0x318D90, 2237: 0x0F7F83, 2238: 0x00666C, 2239: 0x73BCAC, 2240: 0x45AF99, 2241: 0x4FA08D, 2242: 0x009B71, 2243: 0x009376, 2244: 0x227E65, 2245: 0x007E51, 2246: 0xAED0B4, 2247: 0x7CBA96, 2248: 0x69B48D, 2249: 0x39A578, 2250: 0x21A16D, 2251: 0x00975D, 2252: 0x009349, 2253: 0xC9DDC3, 2254: 0xB7D2AA, 2255: 0x97C28E, 2256: 0x72B370, 2257: 0x009739, 2258: 0x008B2F, 2259: 0x187329, 2260: 0xB8D2A3, 2261: 0x99BE8A, 2262: 0x84AD74, 2263: 0x659256, 2264: 0x6A9860, 2265: 0x44763C, 2266: 0x2D5628, 2267: 0xB5D1A2, 2268: 0xA1C894, 2269: 0x90BF73, 2270: 0x75B66D, 2271: 0x55A94C, 2272: 0x19993B, 2273: 0x25732D, 2274: 0xD9E2B4, 2275: 0xC6D79B, 2276: 0x8EA851, 2277: 0x59943C, 2278: 0x588631, 2279: 0x587528, 2280: 0x486A24, 2281: 0xD9E1A9, 2282: 0xCCDDAF, 2283: 0xB3CF8E, 2284: 0xB9D18E, 2285: 0xA5C776, 2286: 0x9DC04C, 2287: 0x79B33F, 2288: 0xCBD98E, 2289: 0xCBD98A, 2290: 0xB9CF69, 2291: 0xB3CB60, 2292: 0x9DC149, 2293: 0x99BE48, 2294: 0x84A837, 2295: 0xDEE29F, 2296: 0xD6DF98, 2297: 0xBFD275, 2298: 0xB9CE6C, 2299: 0xA9C343, 2300: 0xABC230, 2301: 0x8CA71D, 2302: 0xADB85D, 2303: 0x9EB164, 2304: 0x9FAB53, 2305: 0x9AA126, 2306: 0x7D8D2A, 2307: 0x5F6B21, 2308: 0x5A561A, 2309: 0xEACEB1, 2310: 0xDAC1AB, 2311: 0xCEA88A, 2312: 0xB89980, 2313: 0xC29669, 2314: 0xA77440, 2315: 0x8C4A1D, 2316: 0xBC9C7D, 2317: 0xB79265, 2318: 0xA57E4D, 2319: 0x855923, 2320: 0x724B25, 2321: 0x6B4F2D, 2322: 0x48331C, 2323: 0xBFBA9B, 2324: 0xAFA17C, 2325: 0xA59675, 2326: 0x8C7E5B, 2327: 0x837B59, 2328: 0x756645, 2329: 0x675A39, 2330: 0xD9D7D0, 2331: 0xB0ACA5, 2332: 0x8F8A83, 2333: 0x686E68, 2334: 0x6C6962, 2335: 0x555142, 2336: 0x494842, 2337: 0xEABAAF, 2338: 0xE1A59C, 2339: 0xE59A93, 2340: 0xD36D77, 2341: 0xBB6C6B, 2342: 0xBC5B66, 2343: 0xAD5263, 2344: 0xE18979, 2345: 0xE07E77, 2346: 0xDD6D72, 2347: 0xD73929, 2348: 0xDA575A, 2349: 0xC7442A, 2350: 0xB12629, 2351: 0xBF80AE, 2352: 0xB5649B, 2353: 0xBA5390, 2354: 0x944F85, 2355: 0x8B1E75, 2356: 0x762162, 2357: 0x651641, 2358: 0xB0A8AE, 2359: 0x847A85, 2360: 0x84808F, 2361: 0x72778F, 2362: 0x767286, 2363: 0x696074, 2364: 0x715F6F, 2365: 0xE8C1D7, 2366: 0x747DB4, 2367: 0x5F599B, 2368: 0x5B60A0, 2369: 0x53599C, 2370: 0x47418D, 2371: 0x4D3C8B, 2372: 0x3E387E, 2373: 0x7D8EA6, 2374: 0x596A85, 2375: 0xCA85B4, 2376: 0x596676, 2377: 0x426176, 2378: 0x464F68, 2379: 0x484B58, 2380: 0x313546, 2381: 0x719BC9, 2382: 0x3F8DC4, 2383: 0x377CB0, 2384: 0x00679F, 2385: 0xBB5398, 2386: 0x456FAB, 2387: 0x3569A7, 2388: 0x175296, 2389: 0x519EC5, 2390: 0x1A7FAB, 2391: 0x1183A3, 2392: 0x296880, 2393: 0x0096CD, 2394: 0x008DCE, 2395: 0xB7418F, 2396: 0x009DB2, 2397: 0x00A9B3, 2398: 0x22ACA6, 2399: 0x009C96, 2400: 0x00A490, 2401: 0x2AA694, 2402: 0x00957E, 2403: 0x00857A, 2404: 0xADBD9E, 2405: 0xA92581, 2406: 0x89A086, 2407: 0x6E8B73, 2408: 0x4B7851, 2409: 0x4D6240, 2410: 0x425A3C, 2411: 0x223D1E, 2412: 0x9BC7A5, 2413: 0x58B39A, 2414: 0x55B07C, 2415: 0x9E247B, 2416: 0x3CAB79, 2417: 0x3DA170, 2418: 0x008845, 2419: 0x007B53, 2420: 0x60B066, 2421: 0x65AC3B, 2422: 0x2F9E31, 2423: 0x329E31, 2424: 0x4B9A2B, 2425: 0x8A2666, 2426: 0x00862B, 2427: 0x07571E, 2562: 0xC9AFCF, 2563: 0xC3A8CB, 2567: 0xB69BC4, 2572: 0xB688B7, 2573: 0xAD8CBB, 2577: 0xA487BA, 2582: 0x98579B, 2583: 0x9968A4, 2587: 0x845FA1, 2592: 0x8B438F, 2593: 0x813F8E, 2597: 0x643385, 2602: 0x802D82, 2603: 0x743182, 2607: 0x5B2E7E, 2612: 0x762C7C, 2613: 0x6B2F75, 2617: 0x552B75, 2622: 0x632862, 2623: 0x612C69, 2627: 0x482960, 2635: 0xC0B5D5, 2645: 0xA498C6, 2655: 0x8677B1, 2665: 0x6E5CA1, 2685: 0x42337E, 2695: 0x312852, 2705: 0xA1A1CC, 2706: 0xC6D3E9, 2707: 0xC6D8EC, 2708: 0xB6C8E4, 2715: 0x8381BA, 2716: 0x9CABD4, 2717: 0xABC1E1, 2718: 0x7489C1, 2725: 0x63599E, 2726: 0x5166AB, 2727: 0x6582BE, 2728: 0x4061A6, 2735: 0x3B3380, 2736: 0x374393, 2738: 0x353D8A, 2745: 0x362D72, 2746: 0x2F3F90, 2747: 0x2B3E85, 2748: 0x33367C, 2755: 0x322B6A, 2756: 0x2D3881, 2757: 0x29366C, 2758: 0x2E3066, 2765: 0x2A2853, 2766: 0x282A55, 2767: 0x262C4A, 2768: 0x292A4A, 2905: 0x92CCEA, 2915: 0x72B7E2, 2925: 0x1596D1, 2935: 0x0068AF, 2945: 0x005E98, 2955: 0x164469, 2965: 0x20344B, 2975: 0xA5D7E3, 2985: 0x60C2E0, 2995: 0x00ADE6, 3005: 0x0081C8, 3015: 0x006DA3, 3025: 0x00597A, 3035: 0x004357, 3105: 0x95CFD8, 3115: 0x6BC1CF, 3125: 0x00AAC3, 3135: 0x009BBB, 3145: 0x007D91, 3155: 0x006C7C, 3165: 0x005760, 3242: 0x9FD2CB, 3245: 0x96CDBF, 3248: 0x96D0C8, 3252: 0x95CEC7, 3255: 0x8CC9BF, 3258: 0x81C7B9, 3262: 0x4AB7AE, 3265: 0x5DBAA9, 3268: 0x1CAF94, 3272: 0x00A79F, 3275: 0x00A890, 3278: 0x00A17E, 3282: 0x009185, 3285: 0x00A389, 3288: 0x008E74, 3292: 0x006759, 3295: 0x00836B, 3298: 0x00755F, 3302: 0x1F584B, 3305: 0x1A5243, 3308: 0x17493C, 3375: 0xB1D7C4, 3385: 0xA2D1BE, 3395: 0x72BF9D, 3405: 0x21AD7E, 3415: 0x00845A, 3425: 0x1C704D, 3435: 0x24543D, 3935: 0xF5E97B, 3945: 0xF4E42C, 3955: 0xF3E200, 3965: 0xECDF00, 3975: 0xBAA905, 3985: 0x988815, 3995: 0x62571D, 4485: 0x645426, 4495: 0x8A742E, 4505: 0x9F893C, 4515: 0xB4A365, 4525: 0xC5B784, 4535: 0xD3C79D, 4545: 0xE1D7AE, 4625: 0x553B30, 4635: 0x9E6D44, 4645: 0xAF8661, 4655: 0xC09579, 4665: 0xD0AD94, 4675: 0xDBC2AC, 4685: 0xE3CDB8, 4695: 0x5A3624, 4705: 0x775142, 4715: 0x916A57, 4725: 0xA98977, 4735: 0xC5AA9C, 4745: 0xCCB5A6, 4755: 0xD9C6B6, 4975: 0x452B29, 4985: 0x874F58, 4995: 0x9A656C, 5005: 0xAD7A7F, 5015: 0xCFA6A9, 5025: 0xD8B1B2, 5035: 0xE6CACB, 5115: 0x552D41, 5125: 0x744364, 5135: 0x8C607E, 5145: 0xA4809D, 5155: 0xC7AEC3, 5165: 0xDBC9D5, 5175: 0xDFCFD8, 5185: 0x493140, 5195: 0x664559, 5205: 0x89687E, 5215: 0xB398A9, 5225: 0xCAB5C1, 5235: 0xD8C7CE, 5245: 0xE1D7D8, 5255: 0x2B2338, 5265: 0x3D3A61, 5275: 0x51527B, 5285: 0x8A8AA8, 5295: 0xAEAFC5, 5305: 0xC2C2D2, 5315: 0xD5D7E0, 5395: 0x202B34, 5405: 0x486D87, 5415: 0x5F849C, 5425: 0x7B9CB1, 5435: 0xA2BACA, 5445: 0xBBCAD6, 5455: 0xC9D5DA, 5463: 0x1B2F34, 5467: 0x233B37, 5473: 0x16666F, 5477: 0x43625C, 5483: 0x508E96, 5487: 0x607D77, 5493: 0x7BADB6, 5497: 0x859E9B, 5503: 0x92BDC1, 5507: 0xA6BAB7, 5513: 0xACCDD1, 5517: 0xBBC9C4, 5523: 0xC3DADB, 5527: 0xCBD5CF, 5535: 0x273B33, 5545: 0x4E6E60, 5555: 0x6C8A78, 5565: 0x849E8C, 5575: 0x9BB2A2, 5585: 0xBDCCBF, 5595: 0xC9D5C8, 5605: 0x26392D, 5615: 0x5F7763, 5625: 0x788A7A, 5635: 0x97A798, 5645: 0xABBBAE, 5655: 0xB8C5B7, 5665: 0xC6D1C5, 5743: 0x45522E, 5747: 0x414823, 5753: 0x67703F, 5757: 0x6E742F, 5763: 0x77804F, 5767: 0x8B904B, 5773: 0x959C72, 5777: 0xA3A76D, 5783: 0xAAB08D, 5787: 0xBDC293, 5793: 0xBBBE9E, 5797: 0xC5C79A, 5803: 0xCBD0B3, 5807: 0xD6D7B5, 5815: 0x575122, 5825: 0x8C8539, 5835: 0xA59F5A, 5845: 0xAFAA6B, 5855: 0xC4C18E, 5865: 0xD0CE9E, 5875: 0xD7D3AA, 7401: 0xF8E9BE, 7402: 0xF1E19B, 7403: 0xEDD27C, 7404: 0xFADA46, 7405: 0xF3D01C, 7406: 0xEFC111, 7407: 0xCD9E4A, 7408: 0xF3BA16, 7409: 0xF2B715, 7410: 0xEDAC71, 7411: 0xE8A552, 7412: 0xCF7E24, 7413: 0xDA8020, 7414: 0xBA6A23, 7415: 0xECC1AD, 7416: 0xE17152, 7417: 0xDA573C, 7418: 0xC55058, 7419: 0xAD5463, 7420: 0xA12746, 7421: 0x6D2439, 7422: 0xF2D9DE, 7423: 0xE17494, 7424: 0xDC4B89, 7425: 0xBD3362, 7426: 0xB12B50, 7427: 0xA12C36, 7428: 0x6D273C, 7429: 0xE5BFCF, 7430: 0xDEA8C1, 7431: 0xCE80A2, 7432: 0xBC5C84, 7433: 0xAF396A, 7434: 0xA02E5A, 7435: 0x8B2451, 7436: 0xEBD8E4, 7437: 0xD0AFCE, 7438: 0xC899C1, 7439: 0xB98DBC, 7440: 0xAA7EB3, 7441: 0x9C6BA8, 7442: 0x854893, 7443: 0xDADAE7, 7444: 0xB8BBDA, 7445: 0xA3A1C8, 7446: 0x918FC2, 7447: 0x5E4B84, 7448: 0x503E55, 7449: 0x3F2537, 7450: 0xC0CBE3, 7451: 0x9AB1D7, 7452: 0x8A9BCA, 7453: 0x8BAAD4, 7454: 0x6C95B5, 7455: 0x4967AB, 7456: 0x6D79B6, 7457: 0xD0E6E8, 7458: 0x77B6C9, 7459: 0x499FBC, 7460: 0x0092C9, 7461: 0x0089C7, 7462: 0x005F90, 7463: 0x1C3A56, 7464: 0xADD6CF, 7465: 0x76C2B1, 7466: 0x00AEB3, 7467: 0x00A6B5, 7468: 0x007A9F, 7469: 0x006187, 7470: 0x005D6F, 7471: 0xA9D3CF, 7472: 0x79C2BE, 7473: 0x3FA294, 7474: 0x007B8C, 7475: 0x4B8388, 7476: 0x12525B, 7477: 0x214E5F, 7478: 0xBEDAC5, 7479: 0x82BF8C, 7480: 0x51B17C, 7481: 0x33AA66, 7482: 0x00A25A, 7483: 0x295F42, 7484: 0x135B42, 7485: 0xE6EBCE, 7486: 0xC4D899, 7487: 0xA9CB77, 7488: 0x92BF55, 7489: 0x7FAF5C, 7490: 0x769B3D, 7491: 0x7A8933, 7492: 0xD2D692, 7493: 0xC2CA95, 7494: 0xA3B48D, 7495: 0x8D9B20, 7496: 0x788920, 7497: 0x7F7457, 7498: 0x585A28, 7499: 0xF5E9BD, 7500: 0xE9DBB3, 7501: 0xE1CDA6, 7502: 0xD6BC8D, 7503: 0xB29E69, 7504: 0x977653, 7505: 0x87623E, 7506: 0xF2DBB3, 7507: 0xF4D1A1, 7508: 0xE2BC83, 7509: 0xDAAB68, 7510: 0xCA8F44, 7511: 0xB5701E, 7512: 0xA9641E, 7513: 0xEBBFA6, 7514: 0xD6A58B, 7515: 0xC79171, 7516: 0x9A5430, 7517: 0x884728, 7518: 0x6E5049, 7519: 0x5E5145, 7520: 0xEAC2B1, 7521: 0xC7A38E, 7522: 0xB8705B, 7523: 0xAD655F, 7524: 0xA6514A, 7525: 0xA16A4D, 7526: 0x8F3B21, 7527: 0xDCD6C1, 7528: 0xCABFAD, 7529: 0xBFB19F, 7530: 0xAD9F8A, 7531: 0x897863, 7532: 0x6C5E4B, 7533: 0x493B29, 7534: 0xD8D3BF, 7535: 0xBEB7A0, 7536: 0xADA589, 7537: 0xABB1A1, 7538: 0x989F8F, 7539: 0x929790, 7540: 0x525657, 7541: 0xDCE5E4, 7542: 0xA5BBC0, 7543: 0x98A5AE, 7544: 0x788995, 7545: 0x3D5265, 7546: 0x2C3C4C, 7547: 0x1D232E, 7548: 0xF6D03A, 7549: 0xECBB33, 7550: 0xD69D2A, 7551: 0xB88322, 7552: 0x755C21, 7553: 0x5A4A2E, 7554: 0x473B2D, 7555: 0xDBA810, 7556: 0xBE921F, 7557: 0xA28221, 7558: 0x997826, 7559: 0x916F25, 7560: 0x7E6523, 7561: 0x6A5625, 7562: 0xBE9A54, 7563: 0xDEA531, 7564: 0xE09517, 7565: 0xD28122, 7566: 0xB4652A, 7567: 0x855026, 7568: 0x744724, 7569: 0xDD9224, 7570: 0xD68A28, 7571: 0xC88127, 7572: 0xBA772C, 7573: 0xA86932, 7574: 0xA1672B, 7575: 0x865A23, 7576: 0xDB8D4C, 7577: 0xDF844F, 7578: 0xE06E1E, 7579: 0xDE6225, 7580: 0xC45729, 7581: 0x7F4A35, 7582: 0x664630, 7583: 0xC86426, 7584: 0xC05D26, 7585: 0xB75C2F, 7586: 0xA0512A, 7587: 0x974C28, 7588: 0x7A4C30, 7589: 0x51392C, 7590: 0xD2B69E, 7591: 0xC18055, 7592: 0xB65A30, 7593: 0x9C3E25, 7594: 0x793B2B, 7595: 0x71402A, 7596: 0x4E2B1F, 7597: 0xD14825, 7598: 0xC74928, 7599: 0xBB4628, 7600: 0x8B422F, 7601: 0x84412A, 7602: 0x77472B, 7603: 0x643F28, 7604: 0xEBDBD8, 7605: 0xE5C0B8, 7606: 0xDA9B8F, 7607: 0xC56C5F, 7608: 0xAB4938, 7609: 0x88382F, 7610: 0x68322D, 7611: 0xE4C4B8, 7612: 0xD0A392, 7613: 0xC18F7E, 7614: 0xAC877A, 7615: 0x83635C, 7616: 0x755753, 7617: 0x5B3F3C, 7618: 0xCB734F, 7619: 0xC85534, 7620: 0xB1302A, 7621: 0xAF2F2C, 7622: 0x9D302B, 7623: 0x912D29, 7624: 0x832926, 7625: 0xDD583D, 7626: 0xD53C2B, 7627: 0xB23730, 7628: 0xA33736, 7629: 0x6F3631, 7630: 0x63342A, 7631: 0x5E3638, 7632: 0xE1D2D2, 7633: 0xCBA9AD, 7634: 0xC7738A, 7635: 0xC93E6B, 7636: 0xC02250, 7637: 0x932C46, 7638: 0x892E45, 7639: 0x997378, 7640: 0x9C495D, 7641: 0x95274D, 7642: 0x722F4B, 7643: 0x6C2E4A, 7644: 0x5B2B42, 7645: 0x542B3F, 7646: 0xAD768A, 7647: 0xAC4679, 7648: 0x9F1A6E, 7649: 0x921E6C, 7650: 0x79215E, 7651: 0x6D2B5F, 7652: 0x69295A, 7653: 0xA092A1, 7654: 0xAC82A2, 7655: 0xAC669F, 7656: 0x943C84, 7657: 0x742966, 7658: 0x6F3463, 7659: 0x603857, 7660: 0xA39AAC, 7661: 0x90729B, 7662: 0x7D488D, 7663: 0x6C2F7D, 7664: 0x632E79, 7665: 0x5D396F, 7666: 0x605062, 7667: 0x6B80A2, 7668: 0x6C73A5, 7669: 0x6262A2, 7670: 0x59599E, 7671: 0x534B90, 7672: 0x4D468C, 7673: 0x555887, 7674: 0x8891BB, 7675: 0x8085B1, 7676: 0x776AA3, 7677: 0x72569B, 7678: 0x6C4B94, 7679: 0x5A3586, 7680: 0x532E79, 7681: 0x9AADD0, 7682: 0x6E8EC0, 7683: 0x456DB0, 7684: 0x3B61A6, 7685: 0x2E59A0, 7686: 0x224D8F, 7687: 0x264583, 7688: 0x5DA6D0, 7689: 0x489AC5, 7690: 0x007FAF, 7691: 0x00679E, 7692: 0x005B8D, 7693: 0x165077, 7694: 0x124A70, 7695: 0x94B6C5, 7696: 0x6E9EB0, 7697: 0x5B8A9E, 7698: 0x477691, 7699: 0x366884, 7700: 0x1A6080, 7701: 0x005F82, 7702: 0x4EADC7, 7703: 0x1AA1BD, 7704: 0x008AAF, 7705: 0x007199, 7706: 0x006D8E, 7707: 0x006481, 7708: 0x005A76, 7709: 0x62B5BB, 7710: 0x00AFBA, 7711: 0x0099A9, 7712: 0x00889B, 7713: 0x008293, 7714: 0x007481, 7715: 0x00666F, 7716: 0x009F97, 7717: 0x008E85, 7718: 0x007B75, 7719: 0x00726B, 7720: 0x006761, 7721: 0x005F5B, 7722: 0x00534F, 7723: 0x58AA83, 7724: 0x279B6F, 7725: 0x008C55, 7726: 0x007F47, 7727: 0x00703E, 7728: 0x006848, 7729: 0x00583F, 7730: 0x589C63, 7731: 0x39904A, 7732: 0x02833F, 7733: 0x007540, 7734: 0x275D3A, 7735: 0x36553A, 7736: 0x35513E, 7737: 0x74AA35, 7738: 0x53A63A, 7739: 0x3D9E3E, 7740: 0x46973A, 7741: 0x438A34, 7742: 0x48782D, 7743: 0x46712B, 7744: 0xC4C626, 7745: 0xAFB038, 7746: 0x9DA03C, 7747: 0x8A8F3B, 7748: 0x82863C, 7749: 0x747429, 7750: 0x686629, 7751: 0xD0BC5A, 7752: 0xD4B640, 7753: 0xC4A229, 7754: 0xA18838, 7755: 0x867337, 7756: 0x786734, 7757: 0x6A603D, 7758: 0xDECC08, 7759: 0xCABB15, 7760: 0x918329, 7761: 0x807A39, 7762: 0x676A3E, 7763: 0x5A5C36, 7764: 0x585834, 7765: 0xC3B91F, 7766: 0xB8AE22, 7767: 0xA99A25, 7768: 0x998944, 7769: 0x7A6C37, 7770: 0x63583A, 7771: 0x524B2B}

#non-numeric pantone dict
nnpantone_dict={'Black 2': 0x383624, 'Black 3': 0x262D26, 'Black 4': 0x383127, 'Black 5': 0x423238, 'Black 6': 0x20272C, 'Black 7': 0x363432, 'Black': 0x2F2C27, 'Blue 072': 0x2F408E, 'Cool Gray 1': 0xDDDDDA, 'Cool Gray 2': 0xD6D6D2, 'Cool Gray 3': 0xCACAC7, 'Cool Gray 4': 0xB9B9B7, 'Cool Gray 5': 0xB3B3B0, 'Cool Gray 6': 0xAEAEAE, 'Cool Gray 7': 0x99999B, 'Cool Gray 8': 0x8F9092, 'Cool Gray 9': 0x7A7B7E, 'Cool Gray 10': 0x66676C, 'Cool Gray 11': 0x55565B, 'Green': 0x00A079, 'Orange 021': 0xE5801C, 'Process Blue': 0x008BCC, 'Purple': 0xA3428F, 'Red 032': 0xDD5354, 'Reflex Blue': 0x263F8C, 'Rhodamine Red': 0xCB4891, 'Rubine Red': 0xD12368, 'Violet': 0x4A3687, 'Warm Gray 1': 0xDBD8D1, 'Warm Gray 2': 0xCEC7BF, 'Warm Gray 3': 0xBCB4AC, 'Warm Gray 4': 0xB1AAA2, 'Warm Gray 5': 0xACA59C, 'Warm Gray 6': 0xA2988F, 'Warm Gray 7': 0x998C85, 'Warm Gray 8': 0x90857B, 'Warm Gray 9': 0x877A6E, 'Warm Gray 10': 0x776A60, 'Warm Gray 11': 0x6C6054, 'Warm Red': 0xDE5A4A, 'Yellow': 0xFDE100}

#NCS Dictionary
ncs_dict={'S 0300-N': 0xFFFFFF, 'S 0500-N': 0xFCFCFB, 'S 1000-N': 0xF2F2F0, 'S 1500-N': 0xE0DFDE, 'S 2000-N': 0xD8D8D7, 'S 2500-N': 0xCECDCC, 'S 3000-N': 0xC0BFBE, 'S 3500-N': 0xB0B0AF, 'S 4000-N': 0xA5A5A4, 'S 4500-N': 0x979796, 'S 5000-N': 0x8E8E8D, 'S 5500-N': 0x858583, 'S 6000-N': 0x7A7977, 'S 6500-N': 0x6D6D6B, 'S 7000-N': 0x60605E, 'S 7500-N': 0x545452, 'S 8000-N': 0x434241, 'S 8500-N': 0x262824, 'S 9000-N': 0x111410, 'S 0502-Y': 0xFFFDF2, 'S 1002-Y': 0xEAE8DB, 'S 1502-Y': 0xD5D3C7, 'S 2002-Y': 0xC9C8BD, 'S 2502-Y': 0xB8B7AD, 'S 3502-Y': 0x9A9B92, 'S 4502-Y': 0x86867E, 'S 5502-Y': 0x6D6D66, 'S 6502-Y': 0x55554F, 'S 7502-Y': 0x353430, 'S 8502-Y': 0x151311, 'S 0502-Y50R': 0xFFFAED, 'S 1002-Y50R': 0xF0E9DD, 'S 1502-Y50R': 0xDAD4CA, 'S 2002-Y50R': 0xC8C1B9, 'S 0502-R': 0xFFFBF8, 'S 1002-R': 0xE9E4DF, 'S 1502-R': 0xD4CFCC, 'S 2002-R': 0xC3BEBC, 'S 2502-R': 0xB9B4B2, 'S 3502-R': 0x918D8D, 'S 4502-R': 0x7A7776, 'S 5502-R': 0x6C6965, 'S 6502-R': 0x54504D, 'S 7502-R': 0x2F2C2A, 'S 8502-R': 0x161212, 'S 0502-R50B': 0xFCFBFD, 'S 1002-R50B': 0xE1E2E5, 'S 1502-R50B': 0xD1D1D6, 'S 2002-R50B': 0xBCBDC2, 'S 0502-B': 0xFAFDFF, 'S 1002-B': 0xE3E8EA, 'S 1502-B': 0xD2D7DA, 'S 2002-B': 0xBFC4C7, 'S 2502-B': 0xAEB3B6, 'S 3502-B': 0x8D9194, 'S 4502-B': 0x767A7C, 'S 5502-B': 0x5B5F61, 'S 6502-B': 0x434749, 'S 7502-B': 0x292D2F, 'S 8502-B': 0x091115, 'S 0502-B50G': 0xFAFDF8, 'S 1002-B50G': 0xE7EBE6, 'S 1502-B50G': 0xCBD3D0, 'S 2002-B50G': 0xB6BFBD, 'S 0502-G': 0xFAFDF7, 'S 1002-G': 0xEBF0E7, 'S 1502-G': 0xD6DBD3, 'S 2002-G': 0xC1C6BF, 'S 2502-G': 0xB0B5B0, 'S 3502-G': 0x919692, 'S 4502-G': 0x808481, 'S 5502-G': 0x5C5F5C, 'S 6502-G': 0x464845, 'S 7502-G': 0x2B2E2C, 'S 8502-G': 0x131411, 'S 0502-G50Y': 0xFCFDF7, 'S 1002-G50Y': 0xF0F2EB, 'S 1502-G50Y': 0xDADCD0, 'S 2002-G50Y': 0xC4C7BD, 'S 0505-Y': 0xFFFBE7, 'S 0507-Y': 0xFFF9D6, 'S 0510-Y': 0xFFF8CA, 'S 0515-Y': 0xFFF6BE, 'S 0520-Y': 0xFFEEA7, 'S 0530-Y': 0xFFEB92, 'S 0540-Y': 0xFEE66B, 'S 0550-Y': 0xFDDD4E, 'S 0560-Y': 0xFDD72C, 'S 0570-Y': 0xFAD500, 'S 0580-Y': 0xF9CF00, 'S 1005-Y': 0xF5F0D3, 'S 1010-Y': 0xF4EAB5, 'S 1015-Y': 0xF6E9B0, 'S 1020-Y': 0xF4E5A3, 'S 1030-Y': 0xF6DE8A, 'S 1040-Y': 0xF9DD80, 'S 1050-Y': 0xFED74C, 'S 1060-Y': 0xFCD32B, 'S 1070-Y': 0xF7CA27, 'S 1080-Y': 0xECBC00, 'S 1505-Y': 0xE5DFC4, 'S 1510-Y': 0xDED5A5, 'S 1515-Y': 0xDDD19A, 'S 2005-Y': 0xC8C4AD, 'S 2010-Y': 0xC6BE9E, 'S 2020-Y': 0xC8BB86, 'S 2030-Y': 0xCDB867, 'S 2040-Y': 0xD0B353, 'S 2050-Y': 0xCEA926, 'S 2060-Y': 0xC7A300, 'S 2070-Y': 0xC19F00, 'S 3010-Y': 0xAFA580, 'S 3020-Y': 0xB1A16D, 'S 3030-Y': 0xAF9B58, 'S 3040-Y': 0xA88A36, 'S 3050-Y': 0x9C7A19, 'S 3060-Y': 0x9C7900, 'S 3560-Y': 0x987400, 'S 4020-Y': 0x907E47, 'S 4030-Y': 0x93792E, 'S 4040-Y': 0x8B6E13, 'S 4050-Y': 0x866800, 'S 4550-Y': 0x816300, 'S 5020-Y': 0x746438, 'S 5030-Y': 0x765B14, 'S 5040-Y': 0x6A4F00, 'S 6020-Y': 0x624F2C, 'S 6030-Y': 0x3E3000, 'S 7020-Y': 0x433212, 'S 0505-Y10R': 0xFFF9E5, 'S 0510-Y10R': 0xFFF4C8, 'S 0515-Y10R': 0xFFEFB3, 'S 0520-Y10R': 0xFFEBA5, 'S 0530-Y10R': 0xFFE292, 'S 0540-Y10R': 0xFFDC7A, 'S 0550-Y10R': 0xFFD562, 'S 0560-Y10R': 0xFDC336, 'S 0570-Y10R': 0xFBBB22, 'S 0580-Y10R': 0xF8AF00, 'S 0804-Y10R': 0xFDF9EF, 'S 0907-Y10R': 0xF9EECB, 'S 1005-Y10R': 0xF3EACE, 'S 1010-Y10R': 0xF3E5B4, 'S 1015-Y10R': 0xF2E0A8, 'S 1020-Y10R': 0xF5E09F, 'S 1030-Y10R': 0xFADB8A, 'S 1040-Y10R': 0xFFD566, 'S 1050-Y10R': 0xFFCD4E, 'S 1060-Y10R': 0xFBC028, 'S 1070-Y10R': 0xF9BC00, 'S 1080-Y10R': 0xF8B500, 'S 1505-Y10R': 0xDED4B4, 'S 1510-Y10R': 0xE8DBAB, 'S 1515-Y10R': 0xE7D59F, 'S 2005-Y10R': 0xCBC1A5, 'S 2010-Y10R': 0xC8BD97, 'S 2020-Y10R': 0xD2BB7D, 'S 2030-Y10R': 0xD8B364, 'S 2040-Y10R': 0xE1AF55, 'S 2050-Y10R': 0xDEA73D, 'S 2060-Y10R': 0xD19518, 'S 2070-Y10R': 0xE19D00, 'S 3010-Y10R': 0xA79973, 'S 3020-Y10R': 0xB69F6B, 'S 3030-Y10R': 0xB49653, 'S 3040-Y10R': 0xB08538, 'S 3050-Y10R': 0xAF7812, 'S 3060-Y10R': 0xB57E00, 'S 4010-Y10R': 0x968560, 'S 4020-Y10R': 0x927645, 'S 4030-Y10R': 0x9C7736, 'S 4040-Y10R': 0x916623, 'S 4050-Y10R': 0x915C00, 'S 4055-Y10R': 0x955F00, 'S 5010-Y10R': 0x75684A, 'S 5020-Y10R': 0x7F623A, 'S 5030-Y10R': 0x825F2B, 'S 5040-Y10R': 0x714702, 'S 6010-Y10R': 0x6A5A41, 'S 6020-Y10R': 0x725330, 'S 6030-Y10R': 0x53330B, 'S 7010-Y10R': 0x5A4833, 'S 7020-Y10R': 0x442900, 'S 8010-Y10R': 0x2E2112, 'S 0505-Y20R': 0xFFF8E1, 'S 0507-Y20R': 0xFFF5D3, 'S 0510-Y20R': 0xFFF0BD, 'S 0515-Y20R': 0xFFEAB1, 'S 0520-Y20R': 0xFFE4A3, 'S 0530-Y20R': 0xFFD17A, 'S 0540-Y20R': 0xFFC05F, 'S 0550-Y20R': 0xFBB343, 'S 0560-Y20R': 0xF8A622, 'S 0570-Y20R': 0xF49A0A, 'S 0580-Y20R': 0xF49A00, 'S 0585-Y20R': 0xF49900, 'S 0603-Y20R': 0xFFFAEA, 'S 1005-Y20R': 0xF4EACC, 'S 1010-Y20R': 0xF4E7BD, 'S 1015-Y20R': 0xFFE7AF, 'S 1020-Y20R': 0xFFDE9F, 'S 1030-Y20R': 0xFFCB78, 'S 1040-Y20R': 0xFFC05E, 'S 1050-Y20R': 0xFAAC42, 'S 1060-Y20R': 0xF8A722, 'S 1070-Y20R': 0xF5A300, 'S 1080-Y20R': 0xF49900, 'S 1505-Y20R': 0xE4D9B9, 'S 1510-Y20R': 0xE7D4A8, 'S 1515-Y20R': 0xE7CF9C, 'S 2005-Y20R': 0xD4C9AD, 'S 2010-Y20R': 0xC9B892, 'S 2020-Y20R': 0xD6B47A, 'S 2030-Y20R': 0xD6A965, 'S 2040-Y20R': 0xEBAB57, 'S 2050-Y20R': 0xDB993D, 'S 2060-Y20R': 0xD78921, 'S 2070-Y20R': 0xDD8300, 'S 3005-Y20R': 0xA49B81, 'S 3010-Y20R': 0xA69371, 'S 3020-Y20R': 0xB59668, 'S 3030-Y20R': 0xB0884F, 'S 3040-Y20R': 0xAD7730, 'S 3050-Y20R': 0xB27014, 'S 3060-Y20R': 0xAF6600, 'S 3065-Y20R': 0xB36500, 'S 3560-Y20R': 0xA45D00, 'S 4005-Y20R': 0x8E846F, 'S 4020-Y20R': 0x957345, 'S 4030-Y20R': 0x9A6D37, 'S 4040-Y20R': 0x8F5E22, 'S 4050-Y20R': 0x8F4B00, 'S 5005-Y20R': 0x776D5C, 'S 5020-Y20R': 0x7D5C38, 'S 5030-Y20R': 0x8B602E, 'S 5040-Y20R': 0x7B4710, 'S 6005-Y20R': 0x5F5648, 'S 6020-Y20R': 0x714824, 'S 6030-Y20R': 0x592F0F, 'S 7005-Y20R': 0x3C352B, 'S 7020-Y20R': 0x4E3013, 'S 8005-Y20R': 0x30281D, 'S 8505-Y20R': 0x2F2317, 'S 0505-Y30R': 0xFFF5DC, 'S 0510-Y30R': 0xFFEFC6, 'S 0515-Y30R': 0xFFE1AA, 'S 0520-Y30R': 0xFFD89E, 'S 0530-Y30R': 0xFFCE90, 'S 0540-Y30R': 0xFEB25F, 'S 0550-Y30R': 0xF7993B, 'S 0560-Y30R': 0xF4941E, 'S 0570-Y30R': 0xF38F1B, 'S 0580-Y30R': 0xF08400, 'S 0585-Y30R': 0xF07E00, 'S 0804-Y30R': 0xFFF6E2, 'S 0907-Y30R': 0xF9ECD2, 'S 1005-Y30R': 0xF5EBD6, 'S 1010-Y30R': 0xFBE4B6, 'S 1015-Y30R': 0xFFE0AE, 'S 1020-Y30R': 0xFFD69F, 'S 1030-Y30R': 0xFFCB8A, 'S 1040-Y30R': 0xFEBA6F, 'S 1050-Y30R': 0xFDA951, 'S 1060-Y30R': 0xF7953A, 'S 1070-Y30R': 0xF3871C, 'S 1080-Y30R': 0xEF7900, 'S 1505-Y30R': 0xE9DEC4, 'S 1510-Y30R': 0xE7D3A7, 'S 1515-Y30R': 0xF1CB93, 'S 2005-Y30R': 0xD6CBB5, 'S 2010-Y30R': 0xCAB38D, 'S 2020-Y30R': 0xDDB27E, 'S 2030-Y30R': 0xDFA463, 'S 2040-Y30R': 0xE99E53, 'S 2050-Y30R': 0xE1873C, 'S 2060-Y30R': 0xE07D20, 'S 2070-Y30R': 0xDE7100, 'S 2570-Y30R': 0xCE6800, 'S 3010-Y30R': 0xB3A081, 'S 3020-Y30R': 0xB99368, 'S 3030-Y30R': 0xB88047, 'S 3040-Y30R': 0xB46D30, 'S 3050-Y30R': 0xBC6923, 'S 3060-Y30R': 0xC06000, 'S 3560-Y30R': 0xA65200, 'S 4010-Y30R': 0x947C5C, 'S 4020-Y30R': 0x966D44, 'S 4030-Y30R': 0xA26837, 'S 4040-Y30R': 0x97551E, 'S 4050-Y30R': 0x9B4800, 'S 4550-Y30R': 0x883F00, 'S 5010-Y30R': 0x7E6245, 'S 5020-Y30R': 0x7F5937, 'S 5030-Y30R': 0x885229, 'S 5040-Y30R': 0x7A3801, 'S 6010-Y30R': 0x6F533C, 'S 6020-Y30R': 0x704325, 'S 6030-Y30R': 0x592904, 'S 7010-Y30R': 0x584025, 'S 7020-Y30R': 0x4C2C15, 'S 8010-Y30R': 0x2D1B03, 'S 0505-Y40R': 0xFFF3D7, 'S 0507-Y40R': 0xFFF2D3, 'S 0510-Y40R': 0xFFEBC7, 'S 0515-Y40R': 0xFFE6B8, 'S 0520-Y40R': 0xFFD7A5, 'S 0530-Y40R': 0xFFC388, 'S 0540-Y40R': 0xFEAF6D, 'S 0550-Y40R': 0xFB974D, 'S 0560-Y40R': 0xF48032, 'S 0570-Y40R': 0xF27A1A, 'S 0580-Y40R': 0xEC6D00, 'S 0585-Y40R': 0xEC6D00, 'S 0603-Y40R': 0xFFF9E9, 'S 1005-Y40R': 0xF4E9D6, 'S 1010-Y40R': 0xF8DFC2, 'S 1015-Y40R': 0xFFDBAB, 'S 1020-Y40R': 0xFFCD9C, 'S 1030-Y40R': 0xFFBF84, 'S 1040-Y40R': 0xFEAF6D, 'S 1050-Y40R': 0xFC9E50, 'S 1060-Y40R': 0xF4802A, 'S 1070-Y40R': 0xF07800, 'S 1080-Y40R': 0xEC6200, 'S 1505-Y40R': 0xE6DAC2, 'S 1510-Y40R': 0xE7CDAC, 'S 1515-Y40R': 0xF1CC9D, 'S 2005-Y40R': 0xD2C4B0, 'S 2010-Y40R': 0xCDB089, 'S 2020-Y40R': 0xD5A576, 'S 2030-Y40R': 0xDC985F, 'S 2040-Y40R': 0xE68D4D, 'S 2050-Y40R': 0xE28037, 'S 2060-Y40R': 0xD1641A, 'S 2070-Y40R': 0xD65800, 'S 2570-Y40R': 0xC65100, 'S 3010-Y40R': 0xB8A183, 'S 3020-Y40R': 0xB88F66, 'S 3030-Y40R': 0xB57747, 'S 3040-Y40R': 0xBA6A37, 'S 3050-Y40R': 0xB9602C, 'S 3060-Y40R': 0xBD4C00, 'S 3560-Y40R': 0xA34000, 'S 4020-Y40R': 0x996B44, 'S 4030-Y40R': 0x9F5D34, 'S 4040-Y40R': 0x944B1F, 'S 4050-Y40R': 0x943804, 'S 4550-Y40R': 0x853000, 'S 5020-Y40R': 0x85573B, 'S 5030-Y40R': 0x834D28, 'S 5040-Y40R': 0x7A2B00, 'S 6020-Y40R': 0x703D21, 'S 6030-Y40R': 0x5E280E, 'S 7020-Y40R': 0x441E06, 'S 0505-Y50R': 0xFFF3DB, 'S 0510-Y50R': 0xFFECD4, 'S 0515-Y50R': 0xFFE2BA, 'S 0520-Y50R': 0xFFD0A5, 'S 0530-Y50R': 0xFFBB86, 'S 0540-Y50R': 0xFEA66A, 'S 0550-Y50R': 0xFA8D4C, 'S 0560-Y50R': 0xF67E3D, 'S 0570-Y50R': 0xF17024, 'S 0580-Y50R': 0xEC6202, 'S 0585-Y50R': 0xEC6100, 'S 0804-Y50R': 0xF8EFDB, 'S 0907-Y50R': 0xF9E9D3, 'S 1005-Y50R': 0xF4E9D7, 'S 1010-Y50R': 0xFFE4C7, 'S 1015-Y50R': 0xFFD8AF, 'S 1020-Y50R': 0xFFCEA1, 'S 1030-Y50R': 0xFFB780, 'S 1040-Y50R': 0xFEA163, 'S 1050-Y50R': 0xF88847, 'S 1060-Y50R': 0xF47D32, 'S 1070-Y50R': 0xEE6316, 'S 1080-Y50R': 0xEB6100, 'S 1505-Y50R': 0xE9DBCB, 'S 1510-Y50R': 0xEBD1B3, 'S 1515-Y50R': 0xEFC39E, 'S 2005-Y50R': 0xD1C3B7, 'S 2010-Y50R': 0xCDB191, 'S 2020-Y50R': 0xDAA47D, 'S 2030-Y50R': 0xE99561, 'S 2040-Y50R': 0xE48249, 'S 2050-Y50R': 0xDF7133, 'S 2060-Y50R': 0xCB5017, 'S 2070-Y50R': 0xCB4900, 'S 2570-Y50R': 0xC53C00, 'S 3005-Y50R': 0xA59B8D, 'S 3010-Y50R': 0xB69A7E, 'S 3020-Y50R': 0xBB886B, 'S 3030-Y50R': 0xB4704C, 'S 3040-Y50R': 0xBA663D, 'S 3050-Y50R': 0xAE5227, 'S 3060-Y50R': 0xAB4000, 'S 3560-Y50R': 0x9C2D00, 'S 4005-Y50R': 0x887D73, 'S 4010-Y50R': 0x947B66, 'S 4020-Y50R': 0x976042, 'S 4030-Y50R': 0x9E5638, 'S 4040-Y50R': 0x93431E, 'S 4050-Y50R': 0x973400, 'S 4550-Y50R': 0x842500, 'S 5005-Y50R': 0x776D65, 'S 5010-Y50R': 0x745E4B, 'S 5020-Y50R': 0x85583F, 'S 5030-Y50R': 0x814428, 'S 5040-Y50R': 0x7C2B0A, 'S 6005-Y50R': 0x645953, 'S 6010-Y50R': 0x624A3D, 'S 6020-Y50R': 0x6C3E28, 'S 6030-Y50R': 0x622100, 'S 7005-Y50R': 0x2F2925, 'S 7010-Y50R': 0x513522, 'S 7020-Y50R': 0x431B00, 'S 8005-Y50R': 0x2F2620, 'S 8010-Y50R': 0x30251E, 'S 0505-Y60R': 0xFFF3E0, 'S 0507-Y60R': 0xFFF0D6, 'S 0510-Y60R': 0xFFEAD0, 'S 0515-Y60R': 0xFFE3C4, 'S 0520-Y60R': 0xFFD7B6, 'S 0530-Y60R': 0xFFBA92, 'S 0540-Y60R': 0xFDA276, 'S 0550-Y60R': 0xFB8C5B, 'S 0560-Y60R': 0xF77F44, 'S 0570-Y60R': 0xF0642C, 'S 0580-Y60R': 0xEB5716, 'S 0585-Y60R': 0xE74800, 'S 0603-Y60R': 0xFFF8EC, 'S 1005-Y60R': 0xF4E7D5, 'S 1010-Y60R': 0xFFE2C6, 'S 1015-Y60R': 0xFFD5B1, 'S 1020-Y60R': 0xFFC49D, 'S 1030-Y60R': 0xFDAE86, 'S 1040-Y60R': 0xFC9562, 'S 1050-Y60R': 0xF87F46, 'S 1060-Y60R': 0xF0642C, 'S 1070-Y60R': 0xEE6119, 'S 1080-Y60R': 0xE74800, 'S 1505-Y60R': 0xE8D8C9, 'S 1510-Y60R': 0xE5C4A7, 'S 1515-Y60R': 0xF0C4A3, 'S 2005-Y60R': 0xCDBEB2, 'S 2010-Y60R': 0xD1B094, 'S 2020-Y60R': 0xD49F81, 'S 2030-Y60R': 0xEA9571, 'S 2040-Y60R': 0xE47C56, 'S 2050-Y60R': 0xDF6B3A, 'S 2060-Y60R': 0xCD4D18, 'S 2070-Y60R': 0xC33706, 'S 2075-Y60R': 0xD03200, 'S 2570-Y60R': 0xBF3A00, 'S 3010-Y60R': 0xB59684, 'S 3020-Y60R': 0xB78A6E, 'S 3030-Y60R': 0xB46D4F, 'S 3040-Y60R': 0xB35D3C, 'S 3050-Y60R': 0xAF400B, 'S 3060-Y60R': 0xB33200, 'S 3560-Y60R': 0x962300, 'S 4020-Y60R': 0x95644D, 'S 4030-Y60R': 0x934D33, 'S 4040-Y60R': 0x923C1C, 'S 4050-Y60R': 0x922705, 'S 4550-Y60R': 0x7D1D03, 'S 5020-Y60R': 0x845341, 'S 5030-Y60R': 0x803C24, 'S 5040-Y60R': 0x6E1B00, 'S 6020-Y60R': 0x6F381F, 'S 6030-Y60R': 0x5F1800, 'S 7020-Y60R': 0x441904, 'S 0505-Y70R': 0xFFF2E2, 'S 0510-Y70R': 0xFFF0DB, 'S 0515-Y70R': 0xFFE4CA, 'S 0520-Y70R': 0xFFD0B8, 'S 0530-Y70R': 0xFEAE91, 'S 0540-Y70R': 0xFE9978, 'S 0550-Y70R': 0xFB835C, 'S 0560-Y70R': 0xF56A44, 'S 0570-Y70R': 0xED4E29, 'S 0580-Y70R': 0xE94815, 'S 0585-Y70R': 0xE02F07, 'S 0804-Y70R': 0xFFF5EC, 'S 0907-Y70R': 0xF7E4D1, 'S 1005-Y70R': 0xF4E7D5, 'S 1010-Y70R': 0xFFDDCA, 'S 1015-Y70R': 0xFFD2BB, 'S 1020-Y70R': 0xFFC1A6, 'S 1030-Y70R': 0xFFA88B, 'S 1040-Y70R': 0xFF977C, 'S 1050-Y70R': 0xF98050, 'S 1060-Y70R': 0xF4653F, 'S 1070-Y70R': 0xEC4B30, 'S 1080-Y70R': 0xE23403, 'S 1505-Y70R': 0xE7D4C7, 'S 1510-Y70R': 0xE5C5B0, 'S 1515-Y70R': 0xF0C4AA, 'S 2005-Y70R': 0xC6B6AC, 'S 2010-Y70R': 0xD1AF9E, 'S 2020-Y70R': 0xDEA187, 'S 2030-Y70R': 0xE98C6F, 'S 2040-Y70R': 0xDE7758, 'S 2050-Y70R': 0xDF6241, 'S 2060-Y70R': 0xCB401E, 'S 2070-Y70R': 0xCD2A03, 'S 2075-Y70R': 0xC22308, 'S 2570-Y70R': 0xB12304, 'S 3010-Y70R': 0xAC9385, 'S 3020-Y70R': 0xB7836F, 'S 3030-Y70R': 0xB46E56, 'S 3040-Y70R': 0xB75E45, 'S 3050-Y70R': 0xB74030, 'S 3060-Y70R': 0xA0270B, 'S 3560-Y70R': 0x921A0E, 'S 4010-Y70R': 0x90776E, 'S 4020-Y70R': 0x925F4A, 'S 4030-Y70R': 0x98503B, 'S 4040-Y70R': 0x963E29, 'S 4050-Y70R': 0x8A1F07, 'S 4550-Y70R': 0x81220F, 'S 5010-Y70R': 0x745B53, 'S 5020-Y70R': 0x834E3F, 'S 5030-Y70R': 0x81402F, 'S 5040-Y70R': 0x721C0B, 'S 6010-Y70R': 0x634E43, 'S 6020-Y70R': 0x6B3728, 'S 6030-Y70R': 0x682519, 'S 7010-Y70R': 0x4F342A, 'S 7020-Y70R': 0x441C13, 'S 8010-Y70R': 0x2E1410, 'S 0505-Y80R': 0xFFF2E7, 'S 0507-Y80R': 0xFFF1E3, 'S 0510-Y80R': 0xFFEEE1, 'S 0515-Y80R': 0xFFE2D2, 'S 0520-Y80R': 0xFFD3C0, 'S 0530-Y80R': 0xFFB9A2, 'S 0540-Y80R': 0xFFA499, 'S 0550-Y80R': 0xFA7871, 'S 0560-Y80R': 0xF25A59, 'S 0570-Y80R': 0xE9473C, 'S 0580-Y80R': 0xE23420, 'S 0585-Y80R': 0xE33832, 'S 0603-Y80R': 0xFFFAF4, 'S 1005-Y80R': 0xF3E7DD, 'S 1010-Y80R': 0xFBDFD3, 'S 1015-Y80R': 0xFFD4C6, 'S 1020-Y80R': 0xFFC8B3, 'S 1030-Y80R': 0xFFAB97, 'S 1040-Y80R': 0xFF9689, 'S 1050-Y80R': 0xFB806B, 'S 1060-Y80R': 0xF4665B, 'S 1070-Y80R': 0xEB4B44, 'S 1080-Y80R': 0xDE2A19, 'S 1085-Y80R': 0xDA1D16, 'S 1505-Y80R': 0xDED3CB, 'S 1510-Y80R': 0xE6CBBB, 'S 1515-Y80R': 0xF0C5B3, 'S 1580-Y80R': 0xC6121A, 'S 2005-Y80R': 0xC6B6AC, 'S 2010-Y80R': 0xCEAFA5, 'S 2020-Y80R': 0xD5A190, 'S 2030-Y80R': 0xDE8875, 'S 2040-Y80R': 0xEA7E6D, 'S 2050-Y80R': 0xE46757, 'S 2060-Y80R': 0xCE463D, 'S 2070-Y80R': 0xBF302B, 'S 2570-Y80R': 0x9E170B, 'S 3005-Y80R': 0xA5968F, 'S 3010-Y80R': 0xAD958C, 'S 3020-Y80R': 0xB17F72, 'S 3030-Y80R': 0xB16C60, 'S 3040-Y80R': 0xB05343, 'S 3050-Y80R': 0xA44130, 'S 3060-Y80R': 0x9B1D10, 'S 3560-Y80R': 0x7E0E0F, 'S 4005-Y80R': 0x8D817C, 'S 4020-Y80R': 0x8E5A50, 'S 4030-Y80R': 0x965146, 'S 4040-Y80R': 0x953C36, 'S 4050-Y80R': 0x892725, 'S 4550-Y80R': 0x6B0B0A, 'S 5005-Y80R': 0x776C64, 'S 5020-Y80R': 0x7B473F, 'S 5030-Y80R': 0x82392F, 'S 5040-Y80R': 0x6C1311, 'S 6005-Y80R': 0x645952, 'S 6020-Y80R': 0x6D3A32, 'S 6030-Y80R': 0x5E1E1B, 'S 7005-Y80R': 0x493E3A, 'S 7020-Y80R': 0x431813, 'S 8005-Y80R': 0x231616, 'S 8505-Y80R': 0x231715, 'S 0505-Y90R': 0xFFF5EC, 'S 0510-Y90R': 0xFFE9E2, 'S 0515-Y90R': 0xFFE0D5, 'S 0520-Y90R': 0xFFCFC5, 'S 0530-Y90R': 0xFFBEB2, 'S 0540-Y90R': 0xFFA19D, 'S 0550-Y90R': 0xFA7870, 'S 0560-Y90R': 0xF05554, 'S 0570-Y90R': 0xE6373F, 'S 0580-Y90R': 0xD91023, 'S 0804-Y90R': 0xFBF1E5, 'S 0907-Y90R': 0xFCEDE3, 'S 1005-Y90R': 0xF3E5DC, 'S 1010-Y90R': 0xFCE0D3, 'S 1015-Y90R': 0xFFD1C4, 'S 1020-Y90R': 0xFFC7B9, 'S 1030-Y90R': 0xFFABA4, 'S 1040-Y90R': 0xFF9B95, 'S 1050-Y90R': 0xFC7F73, 'S 1060-Y90R': 0xF36359, 'S 1070-Y90R': 0xE83F41, 'S 1080-Y90R': 0xCF1021, 'S 1085-Y90R': 0xD00B25, 'S 1505-Y90R': 0xDDCFC8, 'S 1510-Y90R': 0xE5C5B7, 'S 1515-Y90R': 0xEFC0B0, 'S 1580-Y90R': 0xBD0721, 'S 2005-Y90R': 0xC5B3AB, 'S 2010-Y90R': 0xCEB0A8, 'S 2020-Y90R': 0xD69990, 'S 2030-Y90R': 0xD38277, 'S 2040-Y90R': 0xD1736A, 'S 2050-Y90R': 0xC9584E, 'S 2060-Y90R': 0xBE453F, 'S 2070-Y90R': 0xB51F27, 'S 2570-Y90R': 0x960A18, 'S 3010-Y90R': 0xA68D86, 'S 3020-Y90R': 0xA6766C, 'S 3030-Y90R': 0xAD6360, 'S 3040-Y90R': 0xB3514F, 'S 3050-Y90R': 0xB03F3E, 'S 3060-Y90R': 0x9B2428, 'S 3560-Y90R': 0x7E1118, 'S 4010-Y90R': 0x8B746B, 'S 4020-Y90R': 0x8B5954, 'S 4030-Y90R': 0x904741, 'S 4040-Y90R': 0x8C3431, 'S 4050-Y90R': 0x841D22, 'S 4550-Y90R': 0x6B0E12, 'S 5010-Y90R': 0x755D58, 'S 5020-Y90R': 0x764944, 'S 5030-Y90R': 0x743331, 'S 5040-Y90R': 0x530C07, 'S 5540-Y90R': 0x460304, 'S 6010-Y90R': 0x5D4644, 'S 6020-Y90R': 0x5C3233, 'S 6030-Y90R': 0x450B00, 'S 7010-Y90R': 0x4C3230, 'S 7020-Y90R': 0x39100C, 'S 8010-Y90R': 0x291214, 'S 0505-R': 0xFFF4EF, 'S 0507-R': 0xFFEEE8, 'S 0510-R': 0xFFE7E2, 'S 0515-R': 0xFFDCD5, 'S 0520-R': 0xFFD3CF, 'S 0530-R': 0xFFC1B9, 'S 0540-R': 0xFFA7A2, 'S 0550-R': 0xFE8784, 'S 0560-R': 0xF15268, 'S 0565-R': 0xF15361, 'S 1005-R': 0xF4E3DE, 'S 1010-R': 0xF1D9D5, 'S 1015-R': 0xFFD5D1, 'S 1020-R': 0xFCC8C9, 'S 1030-R': 0xFFB2B8, 'S 1040-R': 0xFF9FA7, 'S 1050-R': 0xFD7D86, 'S 1060-R': 0xF15267, 'S 1070-R': 0xE7344A, 'S 1080-R': 0xBF002A, 'S 1510-R': 0xE4BDB3, 'S 1515-R': 0xF0BCAE, 'S 1580-R': 0x9B0025, 'S 2005-R': 0xC6B7B0, 'S 2010-R': 0xC5B2AA, 'S 2020-R': 0xD99C99, 'S 2030-R': 0xD68486, 'S 2040-R': 0xD27070, 'S 2050-R': 0xC94C59, 'S 2060-R': 0xBC2D3E, 'S 2070-R': 0xA30024, 'S 2570-R': 0x920022, 'S 3010-R': 0xA18586, 'S 3020-R': 0xA6736D, 'S 3030-R': 0xA36563, 'S 3040-R': 0xA54E54, 'S 3050-R': 0xA43942, 'S 3060-R': 0x890023, 'S 3560-R': 0x6D001A, 'S 4020-R': 0x8B5A58, 'S 4030-R': 0x874747, 'S 4040-R': 0x8C3138, 'S 4050-R': 0x811C27, 'S 5020-R': 0x754A47, 'S 5030-R': 0x6F2F35, 'S 5040-R': 0x6D001C, 'S 6020-R': 0x5D2C31, 'S 6030-R': 0x3B030A, 'S 7020-R': 0x3B030A, 'S 0505-R10B': 0xFFF3EF, 'S 0510-R10B': 0xFFEAEA, 'S 0515-R10B': 0xFFE4E9, 'S 0520-R10B': 0xFFD7DC, 'S 0530-R10B': 0xFFC7CF, 'S 0540-R10B': 0xFFACB7, 'S 0550-R10B': 0xFF96A4, 'S 0804-R10B': 0xFFF5F1, 'S 0907-R10B': 0xF4E4E0, 'S 1005-R10B': 0xEFE4DE, 'S 1010-R10B': 0xF4DBD7, 'S 1015-R10B': 0xF4D3D3, 'S 1020-R10B': 0xF4C5C6, 'S 1030-R10B': 0xFFB4C2, 'S 1040-R10B': 0xFF97AC, 'S 1050-R10B': 0xFC758C, 'S 1060-R10B': 0xF25072, 'S 1070-R10B': 0xD9315A, 'S 1510-R10B': 0xE8CECC, 'S 1515-R10B': 0xDBB6B7, 'S 1575-R10B': 0xB0003E, 'S 2005-R10B': 0xC6B8B4, 'S 2010-R10B': 0xC4ABA9, 'S 2020-R10B': 0xCDA0A7, 'S 2030-R10B': 0xD78996, 'S 2040-R10B': 0xD26F7F, 'S 2050-R10B': 0xCC586A, 'S 2060-R10B': 0xB82750, 'S 2070-R10B': 0x950036, 'S 3010-R10B': 0xA69093, 'S 3020-R10B': 0xA77A81, 'S 3030-R10B': 0xA46674, 'S 3040-R10B': 0xA04852, 'S 3050-R10B': 0x952941, 'S 3060-R10B': 0x8B0029, 'S 4010-R10B': 0x8B7374, 'S 4020-R10B': 0x876169, 'S 4030-R10B': 0x884754, 'S 4040-R10B': 0x84303F, 'S 4050-R10B': 0x6F0022, 'S 5010-R10B': 0x756161, 'S 5020-R10B': 0x724B51, 'S 5030-R10B': 0x6F3139, 'S 5040-R10B': 0x52071C, 'S 6010-R10B': 0x624D4F, 'S 6020-R10B': 0x5C2F3B, 'S 6030-R10B': 0x3B0A13, 'S 7010-R10B': 0x42282C, 'S 7020-R10B': 0x2D060E, 'S 8010-R10B': 0x1D0106, 'S 0505-R20B': 0xFFF5F3, 'S 0507-R20B': 0xFFF3F2, 'S 0510-R20B': 0xFFEFF1, 'S 0515-R20B': 0xFFE3EB, 'S 0520-R20B': 0xFFDBE3, 'S 0530-R20B': 0xFDC1D4, 'S 0540-R20B': 0xF8A8C4, 'S 0603-R20B': 0xFFF9F8, 'S 1005-R20B': 0xEDE3E0, 'S 1010-R20B': 0xF4DCDC, 'S 1015-R20B': 0xF4D3D8, 'S 1020-R20B': 0xF3C9D1, 'S 1030-R20B': 0xFBAEC7, 'S 1040-R20B': 0xF893B6, 'S 1050-R20B': 0xF26C9F, 'S 1060-R20B': 0xEF538E, 'S 1070-R20B': 0xD82E71, 'S 1510-R20B': 0xDDCCCD, 'S 1515-R20B': 0xDAB6BA, 'S 2005-R20B': 0xC6BBB9, 'S 2010-R20B': 0xC4ABAC, 'S 2020-R20B': 0xC598A6, 'S 2030-R20B': 0xCC859C, 'S 2040-R20B': 0xC66E88, 'S 2050-R20B': 0xC64475, 'S 2060-R20B': 0xB82360, 'S 2065-R20B': 0x9C004B, 'S 3005-R20B': 0xA69D9B, 'S 3010-R20B': 0x9B8A8F, 'S 3020-R20B': 0x9B737F, 'S 3030-R20B': 0x9A5D73, 'S 3040-R20B': 0x96435F, 'S 3050-R20B': 0x8B1C44, 'S 3060-R20B': 0x81023D, 'S 4005-R20B': 0x847D7E, 'S 4020-R20B': 0x8A6671, 'S 4030-R20B': 0x84475A, 'S 4040-R20B': 0x7F2444, 'S 4050-R20B': 0x720038, 'S 5005-R20B': 0x786F75, 'S 5020-R20B': 0x724853, 'S 5030-R20B': 0x6D2841, 'S 5040-R20B': 0x5F002F, 'S 6005-R20B': 0x5F575C, 'S 6020-R20B': 0x5C253A, 'S 6030-R20B': 0x3E001C, 'S 7005-R20B': 0x483F44, 'S 7020-R20B': 0x2C0214, 'S 8005-R20B': 0x2A1F24, 'S 8505-R20B': 0x15010A, 'S 0505-R30B': 0xFFF6F7, 'S 0510-R30B': 0xFFF2F4, 'S 0520-R30B': 0xFEDCE9, 'S 0530-R30B': 0xFAC0D9, 'S 0540-R30B': 0xF6AECD, 'S 0804-R30B': 0xF6F0F0, 'S 0907-R30B': 0xF3E8E5, 'S 1005-R30B': 0xF1E8E8, 'S 1010-R30B': 0xF3DFE0, 'S 1020-R30B': 0xF0C8D5, 'S 1030-R30B': 0xE8AAC4, 'S 1040-R30B': 0xE997C5, 'S 1050-R30B': 0xDD64A4, 'S 1060-R30B': 0xD94997, 'S 2005-R30B': 0xC7BBBC, 'S 2010-R30B': 0xC3ABB2, 'S 2020-R30B': 0xC699AA, 'S 2030-R30B': 0xCA85A3, 'S 2040-R30B': 0xBD6F95, 'S 2050-R30B': 0xB94F82, 'S 2060-R30B': 0xA9206E, 'S 3010-R30B': 0xA1909A, 'S 3020-R30B': 0x9C7589, 'S 3030-R30B': 0x9F6280, 'S 3040-R30B': 0x95446B, 'S 3050-R30B': 0x912761, 'S 3055-R30B': 0x87005A, 'S 4010-R30B': 0x8C7884, 'S 4020-R30B': 0x886577, 'S 4030-R30B': 0x844966, 'S 4040-R30B': 0x7C2B58, 'S 4050-R30B': 0x74004B, 'S 5010-R30B': 0x75606C, 'S 5020-R30B': 0x71495D, 'S 5030-R30B': 0x6D3150, 'S 5040-R30B': 0x510035, 'S 6010-R30B': 0x5D4852, 'S 6020-R30B': 0x58233B, 'S 6030-R30B': 0x3A0023, 'S 7010-R30B': 0x48333C, 'S 7020-R30B': 0x260117, 'S 8010-R30B': 0x15010A, 'S 0505-R40B': 0xFFF6FA, 'S 0507-R40B': 0xFFF6FA, 'S 0510-R40B': 0xFFF2F8, 'S 0515-R40B': 0xFFEDF5, 'S 0520-R40B': 0xFDDCEC, 'S 0530-R40B': 0xF5C4E3, 'S 0603-R40B': 0xFBF6F9, 'S 1005-R40B': 0xE8E2E6, 'S 1010-R40B': 0xE7DBE1, 'S 1015-R40B': 0xE5D2DC, 'S 1020-R40B': 0xEACFE2, 'S 1030-R40B': 0xEFB9E1, 'S 1040-R40B': 0xE6A0D3, 'S 1050-R40B': 0xD777B9, 'S 1510-R40B': 0xD6CBD1, 'S 1515-R40B': 0xD5BECD, 'S 2005-R40B': 0xC2BEC2, 'S 2010-R40B': 0xC5B7BF, 'S 2020-R40B': 0xC4A4B9, 'S 2030-R40B': 0xC78BB8, 'S 2040-R40B': 0xCA77C8, 'S 2050-R40B': 0xB853B7, 'S 2060-R40B': 0xAC30A3, 'S 3010-R40B': 0xA3929C, 'S 3020-R40B': 0x997C8F, 'S 3030-R40B': 0x9E7298, 'S 3040-R40B': 0x984E86, 'S 3050-R40B': 0x8D2C7D, 'S 3055-R40B': 0x8B057F, 'S 4020-R40B': 0x7F6377, 'S 4030-R40B': 0x7B496D, 'S 4040-R40B': 0x7A2F6E, 'S 4050-R40B': 0x6D0168, 'S 5020-R40B': 0x6C4E61, 'S 5030-R40B': 0x623258, 'S 5040-R40B': 0x540053, 'S 6020-R40B': 0x53324B, 'S 6030-R40B': 0x3B0041, 'S 7020-R40B': 0x25021D, 'S 0505-R50B': 0xFFFAFD, 'S 0510-R50B': 0xFCF5FA, 'S 0520-R50B': 0xF8E3F7, 'S 0530-R50B': 0xEEC7EF, 'S 0804-R50B': 0xF6F6F9, 'S 0907-R50B': 0xEFEBEF, 'S 1005-R50B': 0xE7E2E6, 'S 1010-R50B': 0xE8DFE9, 'S 1020-R50B': 0xECD1F5, 'S 1030-R50B': 0xEAC1ED, 'S 1040-R50B': 0xDDAAE7, 'S 2005-R50B': 0xBDB9BD, 'S 2010-R50B': 0xBFB4BF, 'S 2020-R50B': 0xC4A5CD, 'S 2030-R50B': 0xC89ED7, 'S 2040-R50B': 0xC180D5, 'S 2050-R50B': 0xA957C1, 'S 3005-R50B': 0xA09CA4, 'S 3010-R50B': 0xA196A1, 'S 3020-R50B': 0x9F8AA6, 'S 3030-R50B': 0xA075AF, 'S 3040-R50B': 0x9B54A9, 'S 3050-R50B': 0x943BA9, 'S 3055-R50B': 0x8126A3, 'S 4005-R50B': 0x7E7F8A, 'S 4010-R50B': 0x817C8D, 'S 4020-R50B': 0x7E6A85, 'S 4030-R50B': 0x704D79, 'S 4040-R50B': 0x773982, 'S 4050-R50B': 0x56007C, 'S 5005-R50B': 0x757479, 'S 5010-R50B': 0x6E6671, 'S 5020-R50B': 0x684F6E, 'S 5030-R50B': 0x5E3664, 'S 5040-R50B': 0x4D1063, 'S 6005-R50B': 0x5D595E, 'S 6010-R50B': 0x584C56, 'S 6020-R50B': 0x4D374F, 'S 6030-R50B': 0x3A004B, 'S 7005-R50B': 0x3E3A3F, 'S 7010-R50B': 0x3D3640, 'S 7020-R50B': 0x27002D, 'S 8005-R50B': 0x121820, 'S 8010-R50B': 0x1D0724, 'S 0505-R60B': 0xFCFAFD, 'S 0507-R60B': 0xF9F6FB, 'S 0510-R60B': 0xF4F1FB, 'S 0515-R60B': 0xEEEAFA, 'S 0520-R60B': 0xE9E6F9, 'S 0525-R60B': 0xDFDCF5, 'S 0603-R60B': 0xF7F6F9, 'S 1005-R60B': 0xECEBF0, 'S 1010-R60B': 0xE5E3EE, 'S 1015-R60B': 0xDDD9EA, 'S 1020-R60B': 0xDDD5F4, 'S 1030-R60B': 0xCBBFEC, 'S 1040-R60B': 0xC6AFE8, 'S 1510-R60B': 0xD1CFD9, 'S 1515-R60B': 0xCAC5DA, 'S 2005-R60B': 0xC1C0C7, 'S 2010-R60B': 0xC0BFC9, 'S 2020-R60B': 0xABA2C6, 'S 2030-R60B': 0xBAADE5, 'S 2040-R60B': 0xB294DD, 'S 2050-R60B': 0x925FC2, 'S 3010-R60B': 0x9D9BA9, 'S 3020-R60B': 0x9993AF, 'S 3030-R60B': 0x8573AA, 'S 3040-R60B': 0x8065B6, 'S 3050-R60B': 0x6F44AF, 'S 3555-R60B': 0x462193, 'S 4020-R60B': 0x716D8A, 'S 4030-R60B': 0x5F5180, 'S 4040-R60B': 0x593B7B, 'S 4050-R60B': 0x49277F, 'S 5020-R60B': 0x564E6F, 'S 5030-R60B': 0x4B3E67, 'S 5040-R60B': 0x381067, 'S 6020-R60B': 0x453A5B, 'S 6030-R60B': 0x2C1153, 'S 7020-R60B': 0x14042D, 'S 0505-R70B': 0xF8F9FD, 'S 0510-R70B': 0xF2F4FC, 'S 0520-R70B': 0xE3E6F8, 'S 0525-R70B': 0xD7E0F5, 'S 0804-R70B': 0xEEEFF3, 'S 0907-R70B': 0xEBECF1, 'S 1005-R70B': 0xE5E8ED, 'S 1010-R70B': 0xDBDFE9, 'S 1020-R70B': 0xD0DDF3, 'S 1030-R70B': 0xC1D1EE, 'S 1040-R70B': 0xB1BEE5, 'S 1550-R70B': 0x949CD4, 'S 1555-R70B': 0x7D83C5, 'S 2005-R70B': 0xBDBFC6, 'S 2010-R70B': 0xAFB8C7, 'S 2020-R70B': 0xA3AAC8, 'S 2030-R70B': 0x989EC7, 'S 2040-R70B': 0x8795CE, 'S 2050-R70B': 0x7D83C5, 'S 2060-R70B': 0x5757A9, 'S 3010-R70B': 0x969AA5, 'S 3020-R70B': 0x8691A9, 'S 3030-R70B': 0x8287AF, 'S 3040-R70B': 0x6E71B4, 'S 3050-R70B': 0x5158A7, 'S 3060-R70B': 0x403F9A, 'S 4010-R70B': 0x787D89, 'S 4020-R70B': 0x6A6D8B, 'S 4030-R70B': 0x64618E, 'S 4040-R70B': 0x51518B, 'S 4050-R70B': 0x343589, 'S 4055-R70B': 0x2D2E8C, 'S 4550-R70B': 0x27277C, 'S 5010-R70B': 0x646B75, 'S 5020-R70B': 0x545671, 'S 5030-R70B': 0x42416F, 'S 5040-R70B': 0x2C2A69, 'S 5540-R70B': 0x192263, 'S 6010-R70B': 0x636571, 'S 6020-R70B': 0x3C3A5B, 'S 6030-R70B': 0x0F1E53, 'S 7010-R70B': 0x31323F, 'S 7020-R70B': 0x0C0A28, 'S 8010-R70B': 0x131620, 'S 0505-R80B': 0xF6F9FD, 'S 0507-R80B': 0xF4F9FD, 'S 0510-R80B': 0xEEF7FC, 'S 0515-R80B': 0xE4F2FA, 'S 0520-R80B': 0xDAEDF9, 'S 0530-R80B': 0xC2DFF2, 'S 0603-R80B': 0xF7F9FA, 'S 1005-R80B': 0xE1E5E9, 'S 1010-R80B': 0xD9E2E9, 'S 1015-R80B': 0xD8E9F7, 'S 1020-R80B': 0xCDE2F5, 'S 1030-R80B': 0xB6D4ED, 'S 1040-R80B': 0x9CC4E4, 'S 1510-R80B': 0xC5D1DB, 'S 1515-R80B': 0xBBCCD9, 'S 1550-R80B': 0x74A5D3, 'S 1555-R80B': 0x5597C9, 'S 2005-R80B': 0xBBC1C4, 'S 2010-R80B': 0xB7C2CD, 'S 2020-R80B': 0x99B1CA, 'S 2030-R80B': 0x80ABD1, 'S 2040-R80B': 0x709FCD, 'S 2050-R80B': 0x5990C6, 'S 2060-R80B': 0x3F7CB9, 'S 2565-R80B': 0x00569E, 'S 3005-R80B': 0x969C9F, 'S 3010-R80B': 0x8D989F, 'S 3020-R80B': 0x7A8DA8, 'S 3030-R80B': 0x6A85A6, 'S 3040-R80B': 0x5173AD, 'S 3050-R80B': 0x2564A6, 'S 3060-R80B': 0x134A98, 'S 3560-R80B': 0x103D82, 'S 4005-R80B': 0x80848A, 'S 4020-R80B': 0x5A7088, 'S 4030-R80B': 0x4E688E, 'S 4040-R80B': 0x385B94, 'S 4050-R80B': 0x113D83, 'S 4550-R80B': 0x0B2F6B, 'S 5005-R80B': 0x6B6E74, 'S 5020-R80B': 0x475A72, 'S 5030-R80B': 0x2D4A6D, 'S 5040-R80B': 0x053665, 'S 6005-R80B': 0x50585E, 'S 6020-R80B': 0x274161, 'S 6030-R80B': 0x032352, 'S 7005-R80B': 0x383E45, 'S 7020-R80B': 0x031531, 'S 8005-R80B': 0x1A2127, 'S 8505-R80B': 0x000C15, 'S 0505-R90B': 0xF6FBFD, 'S 0510-R90B': 0xECF7FC, 'S 0515-R90B': 0xE2F2FB, 'S 0520-R90B': 0xD4EDF9, 'S 0530-R90B': 0xBAE2F3, 'S 0540-R90B': 0x9ED4EB, 'S 0804-R90B': 0xEBF1F4, 'S 0907-R90B': 0xE5EBEE, 'S 1005-R90B': 0xE1E7EB, 'S 1010-R90B': 0xD5E2E9, 'S 1015-R90B': 0xCDDEE8, 'S 1020-R90B': 0xBCD8E5, 'S 1030-R90B': 0xA7CBDF, 'S 1040-R90B': 0x88C3E2, 'S 1050-R90B': 0x6DB7DB, 'S 1510-R90B': 0xBEC8CE, 'S 1515-R90B': 0xB6CCD6, 'S 1560-R90B': 0x2B95C7, 'S 2005-R90B': 0xBEC6CA, 'S 2010-R90B': 0xAFBFC6, 'S 2020-R90B': 0x99B4C5, 'S 2030-R90B': 0x7DA9BF, 'S 2040-R90B': 0x639BC0, 'S 2050-R90B': 0x2F8CBB, 'S 2060-R90B': 0x0083BC, 'S 2065-R90B': 0x0075B3, 'S 3010-R90B': 0x8696A2, 'S 3020-R90B': 0x6C8D9E, 'S 3030-R90B': 0x618AA7, 'S 3040-R90B': 0x3C80A6, 'S 3050-R90B': 0x156E9C, 'S 3060-R90B': 0x005998, 'S 3065-R90B': 0x005592, 'S 3560-R90B': 0x004C85, 'S 4010-R90B': 0x6D7C87, 'S 4020-R90B': 0x5C7384, 'S 4030-R90B': 0x406C87, 'S 4040-R90B': 0x1C5882, 'S 4050-R90B': 0x004378, 'S 4550-R90B': 0x003C69, 'S 5010-R90B': 0x606D76, 'S 5020-R90B': 0x466070, 'S 5030-R90B': 0x24526E, 'S 5040-R90B': 0x003A69, 'S 5540-R90B': 0x00305A, 'S 6010-R90B': 0x47555D, 'S 6020-R90B': 0x294C5E, 'S 6030-R90B': 0x003351, 'S 7010-R90B': 0x2D3B45, 'S 7020-R90B': 0x001829, 'S 8010-R90B': 0x00070D, 'S 0505-B': 0xF7FCFB, 'S 0507-B': 0xF4FBFB, 'S 0510-B': 0xEBF8FB, 'S 0515-B': 0xE2F5FB, 'S 0520-B': 0xD8F1F9, 'S 0530-B': 0xC2E8F4, 'S 0540-B': 0xA2DDEE, 'S 1005-B': 0xE1E7E9, 'S 1010-B': 0xD4E2E7, 'S 1015-B': 0xCADFE7, 'S 1020-B': 0xBDDAE5, 'S 1030-B': 0x9DCEDF, 'S 1040-B': 0x7FC3D8, 'S 1050-B': 0x47B0CF, 'S 1060-B': 0x07A6CB, 'S 1510-B': 0xD7E4E8, 'S 1515-B': 0xD0E1E8, 'S 1565-B': 0x0087B2, 'S 2005-B': 0xBAC4C8, 'S 2010-B': 0xABC0C8, 'S 2020-B': 0x97B8C4, 'S 2030-B': 0x74A9BC, 'S 2040-B': 0x579EB8, 'S 2050-B': 0x008BAE, 'S 2060-B': 0x0082AA, 'S 2065-B': 0x0074A2, 'S 3010-B': 0x889AA2, 'S 3020-B': 0x6C90A0, 'S 3030-B': 0x54859A, 'S 3040-B': 0x257A96, 'S 3050-B': 0x007192, 'S 3060-B': 0x005D84, 'S 4020-B': 0x547687, 'S 4030-B': 0x366573, 'S 4040-B': 0x00607C, 'S 4050-B': 0x005676, 'S 4055-B': 0x005271, 'S 4550-B': 0x00465F, 'S 5020-B': 0x466774, 'S 5030-B': 0x1C546A, 'S 5040-B': 0x00475F, 'S 5540-B': 0x002D40, 'S 6020-B': 0x1D3F4B, 'S 6030-B': 0x002E42, 'S 7020-B': 0x001A28, 'S 0510-B10G': 0xE9F9F9, 'S 0520-B10G': 0xD3F2F7, 'S 0530-B10G': 0xB4E6F0, 'S 0540-B10G': 0x97DCE8, 'S 1010-B10G': 0xD4E7E8, 'S 1020-B10G': 0xBCEBF0, 'S 1030-B10G': 0x9DDFE9, 'S 1040-B10G': 0x80D6DF, 'S 1050-B10G': 0x45C3D4, 'S 1555-B10G': 0x00A6BA, 'S 2010-B10G': 0xAAC0C4, 'S 2020-B10G': 0x90C1C8, 'S 2030-B10G': 0x78BAC6, 'S 2040-B10G': 0x53A7B5, 'S 2050-B10G': 0x0098AC, 'S 2055-B10G': 0x0091A4, 'S 3010-B10G': 0x869799, 'S 3020-B10G': 0x6E9CA4, 'S 3030-B10G': 0x508E99, 'S 3040-B10G': 0x248291, 'S 3050-B10G': 0x007288, 'S 3060-B10G': 0x00677F, 'S 4010-B10G': 0x717F82, 'S 4020-B10G': 0x587B82, 'S 4030-B10G': 0x3B727E, 'S 4040-B10G': 0x006372, 'S 4050-B10G': 0x00556A, 'S 5010-B10G': 0x5A6E70, 'S 5020-B10G': 0x436971, 'S 5030-B10G': 0x1C5E6D, 'S 5040-B10G': 0x004655, 'S 5045-B10G': 0x004452, 'S 5540-B10G': 0x003A46, 'S 6010-B10G': 0x485D60, 'S 6020-B10G': 0x234A53, 'S 6030-B10G': 0x003140, 'S 7010-B10G': 0x27393B, 'S 7020-B10G': 0x002832, 'S 8010-B10G': 0x001318, 'S 0505-B20G': 0xF3FCF6, 'S 0507-B20G': 0xF2FBF6, 'S 0515-B20G': 0xDFF7F7, 'S 0907-B20G': 0xE8FAF9, 'S 1005-B20G': 0xDFEBE8, 'S 1015-B20G': 0xCEF2F2, 'S 1040-B20G': 0x7AD5DB, 'S 1050-B20G': 0x4EC8CC, 'S 1510-B20G': 0xBDDCDD, 'S 1515-B20G': 0xB4D9DB, 'S 2005-B20G': 0xB9C4C3, 'S 2040-B20G': 0x4AB6BA, 'S 2050-B20G': 0x00A8AD, 'S 2555-B20G': 0x008993, 'S 3005-B20G': 0x97A4A1, 'S 3040-B20G': 0x008690, 'S 3050-B20G': 0x00828B, 'S 3060-B20G': 0x007278, 'S 4005-B20G': 0x808B88, 'S 4040-B20G': 0x006B70, 'S 4050-B20G': 0x006165, 'S 4550-B20G': 0x00575D, 'S 5005-B20G': 0x6F7977, 'S 5040-B20G': 0x00575C, 'S 5540-B20G': 0x004447, 'S 6005-B20G': 0x55605F, 'S 7005-B20G': 0x313D3E, 'S 8005-B20G': 0x192426, 'S 8505-B20G': 0x011014, 'S 0510-B30G': 0xE7FAF6, 'S 0520-B30G': 0xD9F6F3, 'S 0530-B30G': 0xBEEEEC, 'S 0540-B30G': 0xA2E5E2, 'S 1010-B30G': 0xDAF5F4, 'S 1020-B30G': 0xBEEEEC, 'S 1030-B30G': 0x9BE2E0, 'S 1040-B30G': 0x88DDD7, 'S 1050-B30G': 0x43C6C6, 'S 2010-B30G': 0xA8C5C5, 'S 2020-B30G': 0x9FD3D0, 'S 2030-B30G': 0x7BD9D3, 'S 2040-B30G': 0x4FC5BE, 'S 2050-B30G': 0x00B8B4, 'S 2555-B30G': 0x00908E, 'S 3010-B30G': 0x86A2A3, 'S 3020-B30G': 0x72A1A4, 'S 3030-B30G': 0x549B97, 'S 3040-B30G': 0x00908E, 'S 3050-B30G': 0x008383, 'S 3060-B30G': 0x00787B, 'S 4010-B30G': 0x708481, 'S 4020-B30G': 0x54807C, 'S 4030-B30G': 0x357875, 'S 4040-B30G': 0x007371, 'S 4050-B30G': 0x006465, 'S 4550-B30G': 0x005658, 'S 5010-B30G': 0x5A6D6C, 'S 5020-B30G': 0x436865, 'S 5030-B30G': 0x1F6262, 'S 5040-B30G': 0x005658, 'S 5540-B30G': 0x004345, 'S 6010-B30G': 0x475B5B, 'S 6020-B30G': 0x264F4F, 'S 6030-B30G': 0x004645, 'S 6530-B30G': 0x003032, 'S 7010-B30G': 0x2A3B3C, 'S 7020-B30G': 0x002627, 'S 8010-B30G': 0x0F1E1A, 'S 0520-B40G': 0xCAF2ED, 'S 0530-B40G': 0xA7E7E4, 'S 1020-B40G': 0xC1EFEC, 'S 1030-B40G': 0xA8E8E1, 'S 1040-B40G': 0x7BD9D0, 'S 1050-B40G': 0x3BC7BF, 'S 2020-B40G': 0xA3D5CD, 'S 2030-B40G': 0x6DCBC1, 'S 2040-B40G': 0x43BFB6, 'S 2050-B40G': 0x00BAAF, 'S 2555-B40G': 0x00907E, 'S 3020-B40G': 0x79A39E, 'S 3030-B40G': 0x43A398, 'S 3040-B40G': 0x00978F, 'S 3050-B40G': 0x008D7F, 'S 3060-B40G': 0x007D77, 'S 4040-B40G': 0x006F6C, 'S 4050-B40G': 0x006A63, 'S 4055-B40G': 0x00635A, 'S 4550-B40G': 0x005953, 'S 5040-B40G': 0x00554F, 'S 5540-B40G': 0x004D47, 'S 0505-B50G': 0xF3FCF5, 'S 0510-B50G': 0xE7FAF2, 'S 0515-B50G': 0xD2F5EF, 'S 0520-B50G': 0xC5F1EA, 'S 0530-B50G': 0xB8EEE3, 'S 0804-B50G': 0xF0FCF5, 'S 1005-B50G': 0xE3EFEB, 'S 1010-B50G': 0xDFF8F1, 'S 1015-B50G': 0xCDF3EE, 'S 1020-B50G': 0xC1F1E8, 'S 1030-B50G': 0xA7E8DE, 'S 1040-B50G': 0x7AD9CE, 'S 1050-B50G': 0x17C1B6, 'S 1510-B50G': 0xBEDDD7, 'S 1515-B50G': 0xB9E4E0, 'S 2005-B50G': 0xBACBC7, 'S 2010-B50G': 0xA8C5C0, 'S 2020-B50G': 0x96D1C5, 'S 2030-B50G': 0x70CDBD, 'S 2040-B50G': 0x40BEAE, 'S 2050-B50G': 0x00B1A0, 'S 2060-B50G': 0x00A28F, 'S 3010-B50G': 0x8AA4A0, 'S 3020-B50G': 0x72A29A, 'S 3030-B50G': 0x40A598, 'S 3040-B50G': 0x009284, 'S 3050-B50G': 0x008E7F, 'S 3055-B50G': 0x00826E, 'S 4010-B50G': 0x728581, 'S 4020-B50G': 0x547F76, 'S 4030-B50G': 0x00796F, 'S 4040-B50G': 0x007468, 'S 4050-B50G': 0x006858, 'S 4550-B50G': 0x005C4D, 'S 5010-B50G': 0x5A6D68, 'S 5020-B50G': 0x386C5E, 'S 5030-B50G': 0x005D53, 'S 5040-B50G': 0x005849, 'S 5540-B50G': 0x004237, 'S 6010-B50G': 0x465E58, 'S 6020-B50G': 0x165850, 'S 6030-B50G': 0x00443E, 'S 6530-B50G': 0x004039, 'S 7010-B50G': 0x253E39, 'S 7020-B50G': 0x00322C, 'S 8010-B50G': 0x0C2622, 'S 0520-B60G': 0xD1F5EC, 'S 0530-B60G': 0xBEF0E0, 'S 1020-B60G': 0xCBF3EB, 'S 1030-B60G': 0xB7EEDE, 'S 1040-B60G': 0x95E4D0, 'S 1050-B60G': 0x48CBB6, 'S 2020-B60G': 0x9EDAC7, 'S 2030-B60G': 0x7BDBC8, 'S 2040-B60G': 0x52CEB9, 'S 2050-B60G': 0x00BCA9, 'S 2555-B60G': 0x00A38B, 'S 3020-B60G': 0x72AA9C, 'S 3030-B60G': 0x419F90, 'S 3040-B60G': 0x009E89, 'S 3050-B60G': 0x00876D, 'S 3555-B60G': 0x007764, 'S 4040-B60G': 0x007361, 'S 4050-B60G': 0x006855, 'S 5040-B60G': 0x005546, 'S 6035-B60G': 0x002F27, 'S 0510-B70G': 0xDFF9EB, 'S 0520-B70G': 0xCCF4E1, 'S 0530-B70G': 0xC3F2DF, 'S 1010-B70G': 0xD2ECE1, 'S 1020-B70G': 0xC6F3E6, 'S 1030-B70G': 0xAFEBD6, 'S 1040-B70G': 0x81DCC3, 'S 1050-B70G': 0x54CEB2, 'S 2010-B70G': 0xA9C5BF, 'S 2020-B70G': 0x94D8BC, 'S 2030-B70G': 0x73CEB4, 'S 2040-B70G': 0x4ACCB2, 'S 2050-B70G': 0x00BEA3, 'S 2060-B70G': 0x00A287, 'S 3010-B70G': 0x8EA5A0, 'S 3020-B70G': 0x75A591, 'S 3030-B70G': 0x3AA08D, 'S 3040-B70G': 0x00A085, 'S 3050-B70G': 0x008C6F, 'S 3060-B70G': 0x007860, 'S 4010-B70G': 0x6C877D, 'S 4020-B70G': 0x507C6C, 'S 4030-B70G': 0x2C806D, 'S 4040-B70G': 0x00725A, 'S 4050-B70G': 0x00674F, 'S 5010-B70G': 0x63766C, 'S 5020-B70G': 0x367062, 'S 5030-B70G': 0x006856, 'S 5040-B70G': 0x005341, 'S 6010-B70G': 0x475A4F, 'S 6020-B70G': 0x195A48, 'S 6030-B70G': 0x004031, 'S 7010-B70G': 0x263F34, 'S 7020-B70G': 0x002F22, 'S 8010-B70G': 0x022216, 'S 0505-B80G': 0xF3FDF3, 'S 0507-B80G': 0xF0FBF0, 'S 0515-B80G': 0xDFF9EB, 'S 0907-B80G': 0xE9FBF2, 'S 1005-B80G': 0xE4EFE5, 'S 1015-B80G': 0xD3F5E6, 'S 1040-B80G': 0x91E1C2, 'S 1050-B80G': 0x82DBB8, 'S 1510-B80G': 0xC6E7DE, 'S 1515-B80G': 0xC2F2E3, 'S 2005-B80G': 0xB9CABE, 'S 2040-B80G': 0x59CEAB, 'S 2050-B80G': 0x1EC097, 'S 2555-B80G': 0x009B77, 'S 3005-B80G': 0x93A097, 'S 3040-B80G': 0x009D7C, 'S 3050-B80G': 0x008E6E, 'S 3555-B80G': 0x007558, 'S 4005-B80G': 0x7F8A83, 'S 4040-B80G': 0x007356, 'S 4050-B80G': 0x00674D, 'S 4550-B80G': 0x005740, 'S 5005-B80G': 0x69736E, 'S 5040-B80G': 0x00523E, 'S 5540-B80G': 0x004633, 'S 6005-B80G': 0x556058, 'S 7005-B80G': 0x35423E, 'S 8005-B80G': 0x15281E, 'S 8505-B80G': 0x001209, 'S 0510-B90G': 0xE7FAE7, 'S 0520-B90G': 0xDDF9DD, 'S 0530-B90G': 0xCCF4D0, 'S 1010-B90G': 0xDFF9E8, 'S 1020-B90G': 0xC2F1D0, 'S 1030-B90G': 0xAAEAC6, 'S 1040-B90G': 0x9FE5C1, 'S 1050-B90G': 0x90E0B8, 'S 1055-B90G': 0x83DBB2, 'S 2010-B90G': 0xB7D9C4, 'S 2020-B90G': 0x94CDAC, 'S 2030-B90G': 0x85DDBA, 'S 2040-B90G': 0x5DCEA6, 'S 2050-B90G': 0x29C091, 'S 2060-B90G': 0x00AB79, 'S 3010-B90G': 0x92A99E, 'S 3020-B90G': 0x73A58A, 'S 3030-B90G': 0x3F9D77, 'S 3040-B90G': 0x1A9F77, 'S 3050-B90G': 0x009268, 'S 3060-B90G': 0x00875C, 'S 4010-B90G': 0x6F8473, 'S 4020-B90G': 0x547D67, 'S 4030-B90G': 0x2B7D5C, 'S 4040-B90G': 0x00764F, 'S 4050-B90G': 0x006C48, 'S 4550-B90G': 0x005839, 'S 5010-B90G': 0x567161, 'S 5020-B90G': 0x396C53, 'S 5030-B90G': 0x216645, 'S 5040-B90G': 0x005134, 'S 5540-B90G': 0x003E27, 'S 6010-B90G': 0x435F4E, 'S 6020-B90G': 0x124A35, 'S 6030-B90G': 0x00462E, 'S 7010-B90G': 0x31483A, 'S 7020-B90G': 0x002E1D, 'S 8010-B90G': 0x0C2517, 'S 0505-G': 0xF4FCEF, 'S 0507-G': 0xF5FCEC, 'S 0510-G': 0xF0FBEB, 'S 0515-G': 0xEDFBE7, 'S 0520-G': 0xE8FAE8, 'S 0530-G': 0xD6F7D6, 'S 0540-G': 0xB4EEB6, 'S 1005-G': 0xEAF2E7, 'S 1010-G': 0xDBF8E0, 'S 1015-G': 0xD6F7DB, 'S 1020-G': 0xCCF4D3, 'S 1030-G': 0xA9E9B9, 'S 1040-G': 0x9DE5B7, 'S 1050-G': 0x89DEA0, 'S 1060-G': 0x46C37C, 'S 1510-G': 0xCCDEC8, 'S 1515-G': 0xB6E2C4, 'S 1565-G': 0x00AF72, 'S 2005-G': 0xB4C2B6, 'S 2010-G': 0xB3CDB6, 'S 2020-G': 0x9FD5AA, 'S 2030-G': 0x82DA99, 'S 2040-G': 0x67CF93, 'S 2050-G': 0x32BD7E, 'S 2060-G': 0x00B270, 'S 2565-G': 0x009250, 'S 3010-G': 0x8EA595, 'S 3020-G': 0x789E80, 'S 3030-G': 0x5B9E6D, 'S 3040-G': 0x2AA06E, 'S 3050-G': 0x00935E, 'S 3060-G': 0x007D44, 'S 3560-G': 0x00723E, 'S 4020-G': 0x487D64, 'S 4030-G': 0x388257, 'S 4040-G': 0x007144, 'S 4050-G': 0x005D30, 'S 4550-G': 0x00552E, 'S 5020-G': 0x436E53, 'S 5030-G': 0x00623E, 'S 5040-G': 0x005026, 'S 5540-G': 0x003C1C, 'S 6020-G': 0x124933, 'S 6030-G': 0x003B16, 'S 7020-G': 0x002C0F, 'S 0505-G10Y': 0xF6FDEF, 'S 0510-G10Y': 0xF1FBEA, 'S 0520-G10Y': 0xE7F9D7, 'S 0530-G10Y': 0xD5F4C3, 'S 0540-G10Y': 0xB6EDAC, 'S 0550-G10Y': 0xA9EAA0, 'S 0560-G10Y': 0x8ADE97, 'S 0565-G10Y': 0x78D588, 'S 1005-G10Y': 0xE6EFE0, 'S 1010-G10Y': 0xE5F9DD, 'S 1020-G10Y': 0xD2F5CB, 'S 1030-G10Y': 0xBDF0B6, 'S 1040-G10Y': 0xB7EDA9, 'S 1050-G10Y': 0x9CE492, 'S 1060-G10Y': 0x67CE7D, 'S 1070-G10Y': 0x41C06C, 'S 2005-G10Y': 0xB9C5B8, 'S 2010-G10Y': 0xB3CBB4, 'S 2020-G10Y': 0x9FCD9D, 'S 2030-G10Y': 0x88CF92, 'S 2040-G10Y': 0x73D384, 'S 2050-G10Y': 0x4DC471, 'S 2060-G10Y': 0x00B15D, 'S 2070-G10Y': 0x00984A, 'S 3010-G10Y': 0x92A78F, 'S 3020-G10Y': 0x79A580, 'S 3030-G10Y': 0x5F9E6C, 'S 3040-G10Y': 0x439F64, 'S 3050-G10Y': 0x0E9155, 'S 3060-G10Y': 0x008240, 'S 3065-G10Y': 0x007C3F, 'S 3560-G10Y': 0x006331, 'S 4010-G10Y': 0x71856F, 'S 4020-G10Y': 0x58805C, 'S 4030-G10Y': 0x40794D, 'S 4040-G10Y': 0x00743B, 'S 4050-G10Y': 0x006E35, 'S 4550-G10Y': 0x005529, 'S 5010-G10Y': 0x5E6F58, 'S 5020-G10Y': 0x3D6E48, 'S 5030-G10Y': 0x22663C, 'S 5040-G10Y': 0x00541E, 'S 5540-G10Y': 0x00441C, 'S 6010-G10Y': 0x4C5F4C, 'S 6020-G10Y': 0x2E4F32, 'S 6030-G10Y': 0x004414, 'S 6530-G10Y': 0x00300D, 'S 7010-G10Y': 0x39513A, 'S 7020-G10Y': 0x00341A, 'S 8010-G10Y': 0x13280F, 'S 0505-G20Y': 0xF8FCEE, 'S 0510-G20Y': 0xF4FCE5, 'S 0515-G20Y': 0xEBFADD, 'S 0520-G20Y': 0xE6F8CF, 'S 0530-G20Y': 0xD3F2B6, 'S 0540-G20Y': 0xBEED9E, 'S 0550-G20Y': 0xB0E891, 'S 0560-G20Y': 0x9FDE75, 'S 0570-G20Y': 0x7AD366, 'S 0575-G20Y': 0x34B733, 'S 0804-G20Y': 0xF4F8EB, 'S 0907-G20Y': 0xE7F1DE, 'S 1005-G20Y': 0xE8EFDF, 'S 1010-G20Y': 0xE3F0CD, 'S 1015-G20Y': 0xDEF6CA, 'S 1020-G20Y': 0xD2F3B9, 'S 1030-G20Y': 0xC8F0AE, 'S 1040-G20Y': 0xBBEC9B, 'S 1050-G20Y': 0xA0DD70, 'S 1060-G20Y': 0x7DCD4B, 'S 1070-G20Y': 0x4FBD2D, 'S 1075-G20Y': 0x00AD10, 'S 1510-G20Y': 0xC8DABA, 'S 1515-G20Y': 0xC4E3B6, 'S 2005-G20Y': 0xBAC2B5, 'S 2010-G20Y': 0xB1C6AA, 'S 2020-G20Y': 0xA6D29B, 'S 2030-G20Y': 0x90CF7C, 'S 2040-G20Y': 0x75C268, 'S 2050-G20Y': 0x58C053, 'S 2060-G20Y': 0x20AF3D, 'S 2070-G20Y': 0x00A51D, 'S 2075-G20Y': 0x00A134, 'S 2570-G20Y': 0x008C32, 'S 3005-G20Y': 0x99A191, 'S 3010-G20Y': 0x9BAA8F, 'S 3020-G20Y': 0x85A77D, 'S 3030-G20Y': 0x6B9761, 'S 3040-G20Y': 0x599651, 'S 3050-G20Y': 0x38934B, 'S 3060-G20Y': 0x008730, 'S 3560-G20Y': 0x007529, 'S 4005-G20Y': 0x7B8479, 'S 4040-G20Y': 0x2A7833, 'S 4050-G20Y': 0x006A20, 'S 4550-G20Y': 0x00591E, 'S 5005-G20Y': 0x68715F, 'S 5040-G20Y': 0x005916, 'S 5540-G20Y': 0x00480A, 'S 6005-G20Y': 0x535C4E, 'S 7005-G20Y': 0x3A4436, 'S 8005-G20Y': 0x222C20, 'S 8505-G20Y': 0x172016, 'S 0505-G30Y': 0xF9FCEA, 'S 0510-G30Y': 0xF6FBE1, 'S 0520-G30Y': 0xEDF9CF, 'S 0530-G30Y': 0xDDF4B7, 'S 0540-G30Y': 0xD0EF9F, 'S 0550-G30Y': 0xBDE785, 'S 0560-G30Y': 0xB0DE6A, 'S 0570-G30Y': 0xA1D54E, 'S 0580-G30Y': 0x7CC72A, 'S 1005-G30Y': 0xECF0E4, 'S 1010-G30Y': 0xE6EFD0, 'S 1020-G30Y': 0xDBF4BA, 'S 1030-G30Y': 0xC9EE9F, 'S 1040-G30Y': 0xBDE785, 'S 1050-G30Y': 0xAFDE6A, 'S 1060-G30Y': 0xA1D54E, 'S 1070-G30Y': 0x7CC729, 'S 1080-G30Y': 0x4FB800, 'S 2005-G30Y': 0xB9C2B4, 'S 2010-G30Y': 0xBCC8AD, 'S 2020-G30Y': 0xA7C18E, 'S 2030-G30Y': 0x9ABC73, 'S 2040-G30Y': 0x88BD65, 'S 2050-G30Y': 0x6DB32D, 'S 2060-G30Y': 0x50B100, 'S 2070-G30Y': 0x3EA400, 'S 2075-G30Y': 0x009F11, 'S 2570-G30Y': 0x308C00, 'S 3010-G30Y': 0xA3AD91, 'S 3020-G30Y': 0x8EA47A, 'S 3030-G30Y': 0x78985C, 'S 3040-G30Y': 0x6A913F, 'S 3050-G30Y': 0x4A8617, 'S 3060-G30Y': 0x2C8500, 'S 3560-G30Y': 0x016C00, 'S 4010-G30Y': 0x768265, 'S 4020-G30Y': 0x70845A, 'S 4030-G30Y': 0x55793F, 'S 4040-G30Y': 0x2A7916, 'S 4050-G30Y': 0x026C00, 'S 4550-G30Y': 0x075D00, 'S 5010-G30Y': 0x5E6C4F, 'S 5020-G30Y': 0x4F6C43, 'S 5030-G30Y': 0x416224, 'S 5040-G30Y': 0x295E02, 'S 5540-G30Y': 0x184800, 'S 6010-G30Y': 0x56624C, 'S 6020-G30Y': 0x3C5528, 'S 6030-G30Y': 0x2B4912, 'S 7010-G30Y': 0x45553E, 'S 7020-G30Y': 0x1D3909, 'S 8010-G30Y': 0x1A290C, 'S 0505-G40Y': 0xFAFCE7, 'S 0507-G40Y': 0xF9FCE5, 'S 0510-G40Y': 0xF6FBE1, 'S 0515-G40Y': 0xF0FAD5, 'S 0520-G40Y': 0xF1F8CB, 'S 0530-G40Y': 0xE7F5B6, 'S 0540-G40Y': 0xE0F2A1, 'S 0550-G40Y': 0xD6EC87, 'S 0560-G40Y': 0xCDE66F, 'S 0570-G40Y': 0xBEDD50, 'S 0575-G40Y': 0xA0D02D, 'S 0603-G40Y': 0xF6F8EE, 'S 1005-G40Y': 0xEDEFDB, 'S 1010-G40Y': 0xE7ECCA, 'S 1015-G40Y': 0xEAF6C1, 'S 1020-G40Y': 0xE2F3AC, 'S 1030-G40Y': 0xDAEE93, 'S 1040-G40Y': 0xCBE77A, 'S 1050-G40Y': 0xC0E268, 'S 1060-G40Y': 0xAAD32F, 'S 1070-G40Y': 0x9FCE12, 'S 1075-G40Y': 0x8EC800, 'S 1510-G40Y': 0xD6DFC0, 'S 1515-G40Y': 0xCFDBA9, 'S 2005-G40Y': 0xBEC3B5, 'S 2010-G40Y': 0xBFC9AD, 'S 2020-G40Y': 0xB4C28B, 'S 2030-G40Y': 0xA4BE6F, 'S 2040-G40Y': 0x99B75E, 'S 2050-G40Y': 0x8DB048, 'S 2060-G40Y': 0x73B400, 'S 2070-G40Y': 0x68AD00, 'S 3010-G40Y': 0x9EA88C, 'S 3020-G40Y': 0x8EA372, 'S 3030-G40Y': 0x869D5D, 'S 3040-G40Y': 0x7B9444, 'S 3050-G40Y': 0x628611, 'S 3060-G40Y': 0x508600, 'S 3065-G40Y': 0x467F00, 'S 3560-G40Y': 0x2F7100, 'S 4040-G40Y': 0x4B7005, 'S 4050-G40Y': 0x376B00, 'S 4550-G40Y': 0x336600, 'S 5040-G40Y': 0x395C00, 'S 5540-G40Y': 0x244E00, 'S 0505-G50Y': 0xFCFCE7, 'S 0510-G50Y': 0xFBFBE3, 'S 0520-G50Y': 0xF6F9CB, 'S 0530-G50Y': 0xEFF5B7, 'S 0540-G50Y': 0xEAF39D, 'S 0550-G50Y': 0xE2EF84, 'S 0560-G50Y': 0xD7E86A, 'S 0565-G50Y': 0xCBE04C, 'S 1005-G50Y': 0xEDEFD8, 'S 1010-G50Y': 0xEBEDCA, 'S 1020-G50Y': 0xF0F6B3, 'S 1030-G50Y': 0xE1EE88, 'S 1040-G50Y': 0xDCEA6E, 'S 1050-G50Y': 0xD2E351, 'S 1060-G50Y': 0xC5DA31, 'S 1070-G50Y': 0xADCF00, 'S 1075-G50Y': 0x9AC800, 'S 2005-G50Y': 0xC1C4B2, 'S 2010-G50Y': 0xC3C9AC, 'S 2020-G50Y': 0xB1BF8A, 'S 2030-G50Y': 0xAEBD71, 'S 2040-G50Y': 0xA6B65B, 'S 2050-G50Y': 0x91B02A, 'S 2060-G50Y': 0x8CB311, 'S 2070-G50Y': 0x79B100, 'S 3005-G50Y': 0xA0A492, 'S 3010-G50Y': 0x9CA17E, 'S 3020-G50Y': 0x9AA574, 'S 3030-G50Y': 0x8B984A, 'S 3040-G50Y': 0x86983A, 'S 3050-G50Y': 0x778C13, 'S 3060-G50Y': 0x698C00, 'S 3065-G50Y': 0x5F8A00, 'S 3560-G50Y': 0x517400, 'S 4005-G50Y': 0x85887A, 'S 4010-G50Y': 0x81876C, 'S 4020-G50Y': 0x7C865B, 'S 4030-G50Y': 0x6C7E3B, 'S 4040-G50Y': 0x607725, 'S 4050-G50Y': 0x486D00, 'S 4550-G50Y': 0x486A00, 'S 5005-G50Y': 0x757766, 'S 5010-G50Y': 0x70745C, 'S 5020-G50Y': 0x666D3E, 'S 5030-G50Y': 0x5C6931, 'S 5040-G50Y': 0x446100, 'S 5540-G50Y': 0x3A5000, 'S 6005-G50Y': 0x5B5E51, 'S 6010-G50Y': 0x5A5D48, 'S 6020-G50Y': 0x52592B, 'S 6030-G50Y': 0x3D4D11, 'S 6530-G50Y': 0x213800, 'S 7005-G50Y': 0x3F4232, 'S 7010-G50Y': 0x51573C, 'S 7020-G50Y': 0x303B16, 'S 8005-G50Y': 0x2A2D1B, 'S 8010-G50Y': 0x252C0E, 'S 0505-G60Y': 0xFDFBE6, 'S 0510-G60Y': 0xFCFBE1, 'S 0515-G60Y': 0xFAF9D8, 'S 0520-G60Y': 0xF8F8CB, 'S 0530-G60Y': 0xF0F4AC, 'S 0540-G60Y': 0xEBF187, 'S 0550-G60Y': 0xE8EA6A, 'S 0560-G60Y': 0xDFE550, 'S 0570-G60Y': 0xD3DD2F, 'S 0575-G60Y': 0xC6D600, 'S 0804-G60Y': 0xF8F8EB, 'S 0907-G60Y': 0xF2F4DE, 'S 1005-G60Y': 0xEFF0DD, 'S 1010-G60Y': 0xF2F3C1, 'S 1015-G60Y': 0xEEEEB1, 'S 1020-G60Y': 0xF0F2AD, 'S 1030-G60Y': 0xEBF28D, 'S 1040-G60Y': 0xE1EB6D, 'S 1050-G60Y': 0xDFE656, 'S 1060-G60Y': 0xD2DD30, 'S 1070-G60Y': 0xC8D700, 'S 1075-G60Y': 0xC2D500, 'S 1510-G60Y': 0xDCE0B8, 'S 1515-G60Y': 0xD5DDA6, 'S 2005-G60Y': 0xC0C3AD, 'S 2010-G60Y': 0xBDC29F, 'S 2020-G60Y': 0xB9C38B, 'S 2030-G60Y': 0xB7BF6F, 'S 2040-G60Y': 0xA8B656, 'S 2050-G60Y': 0xA8B344, 'S 2060-G60Y': 0xA1B126, 'S 2070-G60Y': 0x9CB500, 'S 3010-G60Y': 0x9FA583, 'S 3020-G60Y': 0x9AA26D, 'S 3030-G60Y': 0x909A4B, 'S 3040-G60Y': 0x8C9837, 'S 3050-G60Y': 0x829013, 'S 3060-G60Y': 0x798C00, 'S 3065-G60Y': 0x798A00, 'S 3560-G60Y': 0x647B00, 'S 4040-G60Y': 0x707A32, 'S 4050-G60Y': 0x6B7206, 'S 4550-G60Y': 0x657200, 'S 5040-G60Y': 0x565D00, 'S 5540-G60Y': 0x494E00, 'S 0505-G70Y': 0xFDFBE3, 'S 0510-G70Y': 0xFEFBDE, 'S 0520-G70Y': 0xFBF9CB, 'S 0530-G70Y': 0xF7F39E, 'S 0540-G70Y': 0xF4EF87, 'S 0550-G70Y': 0xEFEB69, 'S 0560-G70Y': 0xE7E44D, 'S 0570-G70Y': 0xE0E029, 'S 0575-G70Y': 0xD9DA00, 'S 1005-G70Y': 0xF5F4E3, 'S 1010-G70Y': 0xF4F3C5, 'S 1020-G70Y': 0xF1F0A7, 'S 1030-G70Y': 0xE9EB85, 'S 1040-G70Y': 0xE3E669, 'S 1050-G70Y': 0xE5E44D, 'S 1060-G70Y': 0xCFD42D, 'S 1070-G70Y': 0xCDD30F, 'S 1075-G70Y': 0xCDD400, 'S 2005-G70Y': 0xC4C6B5, 'S 2010-G70Y': 0xBFC19E, 'S 2020-G70Y': 0xC0C188, 'S 2030-G70Y': 0xBBBE6D, 'S 2040-G70Y': 0xB8B94E, 'S 2050-G70Y': 0xA8AF34, 'S 2060-G70Y': 0xAEB400, 'S 2070-G70Y': 0xA6AA00, 'S 3010-G70Y': 0xA5A685, 'S 3020-G70Y': 0xA4A672, 'S 3030-G70Y': 0x9A9C48, 'S 3040-G70Y': 0x8E9336, 'S 3050-G70Y': 0x828700, 'S 3060-G70Y': 0x838B00, 'S 3560-G70Y': 0x6F7E00, 'S 4010-G70Y': 0x888A6A, 'S 4020-G70Y': 0x808252, 'S 4030-G70Y': 0x83843E, 'S 4040-G70Y': 0x6F7525, 'S 4050-G70Y': 0x707107, 'S 4550-G70Y': 0x686900, 'S 5010-G70Y': 0x707153, 'S 5020-G70Y': 0x71723E, 'S 5030-G70Y': 0x6D6D2E, 'S 5040-G70Y': 0x5F5F00, 'S 5540-G70Y': 0x3D4100, 'S 6010-G70Y': 0x626348, 'S 6020-G70Y': 0x5D5D38, 'S 6030-G70Y': 0x535421, 'S 7010-G70Y': 0x474833, 'S 7020-G70Y': 0x2A2C00, 'S 8010-G70Y': 0x2D2E1C, 'S 0505-G80Y': 0xFEFCE7, 'S 0507-G80Y': 0xFEFAE1, 'S 0510-G80Y': 0xFEFADB, 'S 0515-G80Y': 0xFDFAD7, 'S 0520-G80Y': 0xFCF8CA, 'S 0530-G80Y': 0xFBF4A9, 'S 0540-G80Y': 0xF8EF85, 'S 0550-G80Y': 0xF8EB6A, 'S 0560-G80Y': 0xF5E64E, 'S 0570-G80Y': 0xF3E228, 'S 0603-G80Y': 0xFBF9EE, 'S 1005-G80Y': 0xF5F1D8, 'S 1010-G80Y': 0xF3ECB6, 'S 1015-G80Y': 0xF2EEB0, 'S 1020-G80Y': 0xEEE9A0, 'S 1030-G80Y': 0xEBE27C, 'S 1040-G80Y': 0xEAE265, 'S 1050-G80Y': 0xE3DC4A, 'S 1060-G80Y': 0xE0D926, 'S 1070-G80Y': 0xDDD702, 'S 1075-G80Y': 0xD7D600, 'S 1505-G80Y': 0xDFDDC7, 'S 1510-G80Y': 0xE1DFAD, 'S 1515-G80Y': 0xD9D79E, 'S 2005-G80Y': 0xC7C6AE, 'S 2010-G80Y': 0xC3C196, 'S 2020-G80Y': 0xC1BE7B, 'S 2030-G80Y': 0xBFB75F, 'S 2040-G80Y': 0xBBB44E, 'S 2050-G80Y': 0xAEA934, 'S 2060-G80Y': 0xACA500, 'S 2070-G80Y': 0xAEA700, 'S 3005-G80Y': 0xA8A68C, 'S 3010-G80Y': 0xA2A17E, 'S 3020-G80Y': 0xA39F67, 'S 3030-G80Y': 0x9E984F, 'S 3040-G80Y': 0xA39B3D, 'S 3050-G80Y': 0x8C851B, 'S 3060-G80Y': 0x848000, 'S 4005-G80Y': 0x8B8A75, 'S 4040-G80Y': 0x7C7500, 'S 4050-G80Y': 0x746D00, 'S 5005-G80Y': 0x797866, 'S 5040-G80Y': 0x595500, 'S 6005-G80Y': 0x5C5B4C, 'S 7005-G80Y': 0x444437, 'S 8005-G80Y': 0x27271E, 'S 8505-G80Y': 0x1F1F18, 'S 0505-G90Y': 0xFFFCEA, 'S 0510-G90Y': 0xFFFAE1, 'S 0515-G90Y': 0xFFF9D6, 'S 0520-G90Y': 0xFFF6BE, 'S 0530-G90Y': 0xFFF2A9, 'S 0540-G90Y': 0xFEED89, 'S 0550-G90Y': 0xFDE86A, 'S 0560-G90Y': 0xFCE54D, 'S 0570-G90Y': 0xFBE12F, 'S 0575-G90Y': 0xFADE00, 'S 0804-G90Y': 0xFBF8EA, 'S 0907-G90Y': 0xF7F3D5, 'S 1005-G90Y': 0xF3EFD1, 'S 1010-G90Y': 0xF4EBB4, 'S 1015-G90Y': 0xF1E8A8, 'S 1020-G90Y': 0xF4E99F, 'S 1030-G90Y': 0xF0E385, 'S 1040-G90Y': 0xEFDF5F, 'S 1050-G90Y': 0xEFDC44, 'S 1060-G90Y': 0xE3CF1B, 'S 1070-G90Y': 0xDDC900, 'S 1075-G90Y': 0xD9C500, 'S 1505-G90Y': 0xDFDBC0, 'S 1510-G90Y': 0xDEDAB8, 'S 1515-G90Y': 0xD2CC95, 'S 2005-G90Y': 0xC9C7AE, 'S 2010-G90Y': 0xC1BD91, 'S 2020-G90Y': 0xC6BE79, 'S 2030-G90Y': 0xC1B662, 'S 2040-G90Y': 0xC7B850, 'S 2050-G90Y': 0xB6A530, 'S 2060-G90Y': 0xB39E0C, 'S 2070-G90Y': 0xA89300, 'S 3010-G90Y': 0xA6A17D, 'S 3020-G90Y': 0xB0A86C, 'S 3030-G90Y': 0xA99C52, 'S 3040-G90Y': 0xA19334, 'S 3050-G90Y': 0x8F7E03, 'S 3060-G90Y': 0x8B7B00, 'S 4010-G90Y': 0x898467, 'S 4020-G90Y': 0x8D8555, 'S 4030-G90Y': 0x8B7E35, 'S 4040-G90Y': 0x7D6E0F, 'S 4050-G90Y': 0x6F6200, 'S 5010-G90Y': 0x736D50, 'S 5020-G90Y': 0x716737, 'S 5030-G90Y': 0x6C5D17, 'S 5040-G90Y': 0x594C00, 'S 6010-G90Y': 0x676242, 'S 6020-G90Y': 0x584D29, 'S 6030-G90Y': 0x463A00, 'S 7010-G90Y': 0x4C462B, 'S 7020-G90Y': 0x372900, 'S 8010-G90Y': 0x2B1F00}

#End of tables with color palettes /\

#Create a range of values according to the table
def data_range(ral_data):
    ral_correct_data_in_data_range = {
        ral_data > 1007 < 1011: 1007,
        ral_data > 1037 < 1518: 1037,
        ral_data > 1518 < 2000: 2000,
        ral_data > 2013 < 2506: 2013,
        ral_data > 2506 < 3000: 3000,
        ral_data > 3033 < 3516: 3033,
        ral_data > 3516 < 4001: 4001,
        ral_data > 4012 < 4506: 4012,
        ral_data > 4506 < 5000: 5000,
        ral_data > 5026 < 5512: 5026,
        ral_data > 5512 < 6000: 6000,
        ral_data > 6038 < 6519: 6038,
        ral_data > 6519 < 7000: 7000,
        ral_data > 7048 < 7524: 7048,
        ral_data > 7524 < 8000: 8000,
        ral_data > 8029 < 8515: 8029,
        ral_data > 8515 < 9001: 9001
    }[True]
    return ral_correct_data_in_data_range

#CLASSIC.Property definition for ral_number
bpy.types.Scene.ral_number = bpy.props.IntProperty(name="RAL", default=1000, min=1000, max=9023)

#DESIGN.Property definition for design_number
bpy.types.Scene.design_number = bpy.props.StringProperty(name="RAL", default="000 15 00", maxlen=9)

#EFFECT.Property definition for effect_number
bpy.types.Scene.effect_number = bpy.props.StringProperty(name="RAL", default="110-1", maxlen=5)

#PANTONEnumeric.Property definition for pantone_number
bpy.types.Scene.pantone_number = bpy.props.IntProperty(name="PANTONE", default=100, min=100, max=7771)

#PANTONEstring.Property definition for pantone_number
bpy.types.Scene.nnpantone_number = bpy.props.StringProperty(name="PANTONE", default="Black 2", maxlen=15)

#NCS.Property definition for ncs_number
bpy.types.Scene.ncs_number = bpy.props.StringProperty(name="NCS", default="S 0300-N", maxlen=11)

#Favourites.Property definition for favint_number
bpy.types.Scene.favint_number = bpy.props.IntProperty(name="slot", default=1, min=1)

#Favourites.Property definition for favstr_number
bpy.types.Scene.favstr_number = bpy.props.StringProperty(name="", default=" ")

#CLASSIC.Property definition for boolean button named New
bpy.types.Scene.new_ralmaterial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#DESIGN.Property definition for boolean button named New
bpy.types.Scene.new_designmaterial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#EFFECT.Property definition for boolean button named New
bpy.types.Scene.new_effectmaterial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#PANTONEnumeric.Property definition for boolean button named New
bpy.types.Scene.new_pantonematerial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#PANTONEstring.Property definition for boolean button named New
bpy.types.Scene.new_nnpantonematerial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#NCS.Property definition for boolean button named New
bpy.types.Scene.new_ncsmaterial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#Favourites.Property definition for boolean button named New
bpy.types.Scene.new_favmaterial = bpy.props.BoolProperty(name="New", description="Create new material with its color", default=False)

#Favourites.Change the save folder
bpy.types.Scene.change_save_folder = bpy.props.BoolProperty(name="Load from project folder", description="By default, the dictionary is saved in the Blender folder", default=False)

#Code by K. A. Buhr, for conversion. I used part of the code from the following author's comment: https://blender.stackexchange.com/questions/158896/how-set-hex-in-rgb-node-python.

# \/ Thanks K. A. Buhr for most likely the only correct answer!

def srgb_to_linearrgb(c):
    if   c < 0:       return 0
    elif c < 0.04045: return c/12.92
    else:             return ((c+0.055)/1.055)**2.4

def hex_to_rgb(h,alpha=1):
    r = (h & 0xff0000) >> 16
    g = (h & 0x00ff00) >> 8
    b = (h & 0x0000ff)
    return tuple([srgb_to_linearrgb(c/0xff) for c in (r,g,b)] + [alpha])

# /\ Thanks K. A. Buhr for most likely the only correct answer!

#Code by batFINGER. Original: https://blender.stackexchange.com/questions/234388/how-to-convert-rgb-to-hex-almost-there-1-error-colors

#\/ Thanks batFINGER!

def linear_to_srgb8(c):
    if c < 0.0031308:
        srgb = 0.0 if c < 0.0 else c * 12.92
    else:
        srgb = 1.055 * math.pow(c, 1.0 / 2.4) - 0.055
        
    if srgb > 1: srgb = 1

    return round(255*srgb)

def toHex(r, g, b):
    return "%02x%02x%02x" % (
        linear_to_srgb8(r),
        linear_to_srgb8(g),
        linear_to_srgb8(b),
    )
#/\ Thanks batFINGER!

#Get addon name
addon_name = "setcolordata"

#Load a favorite dictionary \/
def load_dict(dictionary):
    #load the dictionary
    if bpy.context.scene.change_save_folder:
        #if load from project folder is selected
        try:
            project_path = bpy.path.abspath('//')
            #Create a setcolor_data folder
            data_path = os.path.join(project_path, addon_name)
            try:
                if not os.path.exists(data_path):
                    os.makedirs(data_path)
                    print(f'Set Color Addon: Folder "{addon_name}" created successfully')
            except OSError:
                print(f'Set Color Addon: Failed to create folder: "{addon_name}"')
                fav_dict=None
                fav_dict_id=None

            file_path = os.path.join(data_path, 'fav_dict.bin')
            id_path = os.path.join(data_path, 'fav_dict_id.bin')
            if dictionary==1:
                if os.path.isfile(file_path):
                    with open(file_path, 'rb') as file:
                        fav_dict = pickle.load(file)
                        print(f'Set Color Addon: Loaded successfully: {fav_dict}')
                else:
                    print(f'Set Color Addon: The {file_path} is missing.')
                
            elif dictionary==2:
                if os.path.isfile(id_path):
                    with open(id_path, 'rb') as file:
                        fav_dict_id = pickle.load(file)
                        print(f'Set Color Addon: Loaded successfully: {fav_dict_id}')
                else:
                    print(f'Set Color Addon: The {id_path} is missing.')
                
            if dictionary==3:    
                #Tell about the situation
                try:
                    if fav_dict==None:
                        print(f'Set Color Addon: No access to "{project_path}"')
                except:
                    print(f'Set Color Addon: The dictionary was successfully loaded from the project folder: "{project_path}"')
                    
        except OSError:
            if dictionary==3:
                print('Set Color Addon: The dictionary was not loaded from the project folder.')
    else:
        try:
            # Get path user folder
            user_path = bpy.utils.user_resource('SCRIPTS')
            data_path = os.path.join(user_path, "addons", addon_name)

            # Create the folder, if it doesn't exist
            if not os.path.exists(data_path):
                os.makedirs(data_path)
                print(f'Set Color Addon: Folder "{addon_name}" created successfully')

            # Create path for saving data
            file_path = os.path.join(data_path, 'fav_dict.bin')
            id_path = os.path.join(data_path, 'fav_dict_id.bin')
            if dictionary==1:
                if os.path.isfile(file_path):
                    with open(file_path, 'rb') as file:
                        fav_dict=pickle.load(file)
                        print(f'Set Color Addon: Loaded successfully: {fav_dict}')
                else:
                    print(f'Set Color Addon: The {file_path} is missing.')

            elif dictionary==2:
                  if os.path.isfile(id_path):
                      with open(id_path, 'rb') as file:
                          fav_dict_id=pickle.load(file)
                          print(f'Set Color Addon: Loaded successfully: {fav_dict_id}')
                  else:
                      print(f'Set Color Addon: The {id_path} is missing.')
      
            if dictionary==3:        
                #Tell about the situation
                print(f'Set Color Addon: The dictionary was successfully loaded from the Blender folder: "{data_path}"')

        except OSError:
            if dictionary==3:
                print('Set Color Addon: The dictionary was not loaded from the Blender folder.')

    #Create indication: First dictionary = fav_dict; second dictionary = fav_Dict_id; third = only information; fourth and fifth = folder paths
    if dictionary==1:
        return fav_dict
    elif dictionary==2:
        return fav_dict_id
    elif dictionary==4:
        return file_path
    elif dictionary==5:
        return id_path
    
#Code body \/

#RAL CLASSIC CLASS
class ShaderClassicPanel(bpy.types.Panel):
    bl_label = "RAL Classic"
    bl_idname = "SHADER_PT_CLASSIC"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = 'Colors'

    def draw(self, context):
        
        layout = self.layout
        scene = context.scene

        #row for boolean input field
        row = layout.row()
        #Box space for typing RAL
        box = layout.box()
        
        #Add a boolean input field
        row.prop(scene, "new_ralmaterial", toggle=False)
        
        # Add a text input field
        box.prop(scene, "ral_number")
        row.operator('shader.ral_operator')

#CLASSIC.Create a Custom Operator for the RAL Classic Shader
class SHADER_OT_RALCLASSIC(bpy.types.Operator):
    
    """Depending on the selection, a material with these parameters is created or a color is created in the current material with these parameters"""
    bl_label = "Create"
    bl_idname = 'shader.ral_operator'
      
    def execute(self, context):
        
        #Specify your number that matches the ral_list
        ral_data = bpy.context.scene.ral_number
        
        if bpy.context.scene.new_ralmaterial:
            if ral_data in ral_list:
                ralhex = ral_list[ral_data]
                
                #Create a New Shader and calling it RAL Color
                material_ralcolor = bpy.data.materials.new(name = f"RAL {ral_data}")
                #Enabling Use Nodes
                material_ralcolor.use_nodes = True
                
                #Adding a RGB node
                RGB_node = material_ralcolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB_node.location = (-400,0)
                #Setting the default color
                RGB_node.outputs[0].default_value = hex_to_rgb(ralhex)
                #Give the name
                RGB_node.label = f"RAL Classic {ral_data}"
                #Deselect it
                RGB_node.select = False
                
                #Node created by default
                Def_node = material_ralcolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_ralcolor.node_tree.links.new(RGB_node.outputs[0], Def_node.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_ralcolor
                    
                    #If its fluorescent color
                    if ral_data in [1026, 2005, 2007, 3024, 3026, 6038]:
                        self.report({'INFO'}, f'RAL {ral_data} is fluorescent. Keep this in mind when setting up material characteristics')
                    else:
                        #if its pearl gloss color 
                        if ral_data in [1035, 1036, 2013, 3032, 3033, 4011, 4012, 5025, 5026, 6035, 6036, 7048, 9022, 9023]:
                            self.report({'INFO'}, f'RAL {ral_data} is pearl gloss. Keep this in mind when setting up material characteristics')
                        else:
                            #If its iron glimmer color
                            if ral_data in [9006, 9007]:
                                self.report({'INFO'}, f'RAL {ral_data} is iron glimmer. Keep this in mind when setting up material characteristics')
                            else:
                                pass
            else:
                data_range(ral_data)
                ral_correct_data = data_range(ral_data)

                bpy.context.scene.ral_number = ral_correct_data
                self.report({'INFO'}, f'RAL {ral_data} does not exist.')
            
        else:
            if ral_data in ral_list:
                ralhex = ral_list[ral_data]
                
                #Get active object
                ActObj = bpy.context.object
                
                if ActObj is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        ralcolor = ActObj.active_material

                        #Adding a RGB node
                        RGB_node = ralcolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx = randint(-600, -400)
                        randintlocy = randint(-600, -400)
                    
                        #Set location of node
                        RGB_node.location = (randintlocx,randintlocy)
                        
                        #Setting the default color
                        RGB_node.outputs[0].default_value = hex_to_rgb(ralhex)

                        #Give the name
                        RGB_node.label = f"RAL Classic {ral_data}"

                        #Deselect it
                        RGB_node.select = False
                        
                        #If its fluorescent color
                        if ral_data in [1026, 2005, 2007, 3024, 3026, 6038]:
                            self.report({'INFO'}, f'RAL {ral_data} is fluorescent. Keep this in mind when setting up material characteristics')
                        else:
                            #if its pearl gloss color 
                            if ral_data in [1035, 1036, 2013, 3032, 3033, 4011, 4012, 5025, 5026, 6035, 6036, 7048, 9022, 9023]:
                                self.report({'INFO'}, f'RAL {ral_data} is pearl gloss. Keep this in mind when setting up material characteristics')
                            else:
                                #If its iron glimmer color
                                if ral_data in [9006, 9007]:
                                    self.report({'INFO'}, f'RAL {ral_data} is iron glimmer. Keep this in mind when setting up material characteristics')
                                else:
                                    pass
            else:
                data_range(ral_data)
                ral_correct_data = data_range(ral_data)

                bpy.context.scene.ral_number = ral_correct_data
                self.report({'INFO'}, f'RAL {ral_data} does not exist.')
    
        return {'FINISHED'}  

#RAL DESIGN CLASS
class ShaderDesignPanel(bpy.types.Panel):
    bl_label = "RAL Design"
    bl_idname = "SHADER_PT_DESIGN"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = 'Colors'

    def draw(self, context):
        
        layout = self.layout
        scene = context.scene

        #row for boolean input field
        row = layout.row()
        #Box space for typing RAL
        box = layout.box()
        
        #Add a boolean input field
        row.prop(scene, "new_designmaterial", toggle=False)
        
        # Add a text input field
        box.prop(context.scene, "design_number")
        row.operator('shader.design_operator')  

#DESIGN.Create a Custom Operator for the RAL Design Shader
class SHADER_OT_RALDESIGN(bpy.types.Operator):
    
    """Depending on the selection, a material with these parameters is created or a color is created in the current material with these parameters"""
    bl_label = "Create"
    bl_idname = 'shader.design_operator'
    
    def execute(self, context):
        
        #Specify your number that matches the design_dict
        design_data = bpy.context.scene.design_number
        
        if bpy.context.scene.new_designmaterial:
            if design_data in design_dict:
                designhex = design_dict[design_data]
                            
                #Create a New Shader and calling it RAL Color
                material_designcolor = bpy.data.materials.new(name = f"RAL {design_data}")
                #Enabling Use Nodes
                material_designcolor.use_nodes = True
                
                #Adding a RGB node
                RGB_node2 = material_designcolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB_node2.location = (-400,0)
                #Setting the default color
                RGB_node2.outputs[0].default_value = hex_to_rgb(designhex)
                
                #Give the name
                RGB_node2.label = f"RAL Design {design_data}"
                
                #Deselect it
                RGB_node2.select = False
                
                #Node created by default
                Def_node2 = material_designcolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_designcolor.node_tree.links.new(RGB_node2.outputs[0], Def_node2.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_designcolor

            else:
                #Format the string if it is entered incorrectly
                dd = design_data
                
                #Check for another simbols and leave only numbers
                dd = re.sub(r"\D+", "", dd)
                
                #Check how many symbols in string
                if (len(dd) == 4 or len(dd) == 6):
                    #Format dd
                    if len(dd) == 4:
                        fdd = "{} {}".format(dd[:2], dd[2:4])
                        ffdd = "000 "+fdd
                        self.report({'INFO'}, f'The RAL {design_data} value is incorrect. Maybe you mean RAL {ffdd}?')
                        bpy.context.scene.design_number = ffdd
                    else:
                        fdd = "{} {} {}".format(dd[:2], dd[2:4], dd[4:6])
                        ffdd = "0"+fdd
                        self.report({'INFO'}, f'The RAL {design_data} value is incorrect. Maybe you mean RAL {ffdd}?')
                        bpy.context.scene.design_number = ffdd
                else:
                    if len(dd) == 7:
                        fdd = "{} {} {}".format(dd[:3], dd[3:5], dd[5:7])
                        self.report({'INFO'}, f'RAL {design_data} does not exist. Returned the default value.')
                        bpy.context.scene.design_number = "000 15 00"
                    else:
                        if len(dd) == 0:
                            self.report({'INFO'}, 'An empty string. Enter the RAL value.')
                        else:
                            self.report({'INFO'}, f'RAL {design_data} does not exist.')
                            bpy.context.scene.design_number = "000 15 00"
            
        else:
            if design_data in design_dict:
                designhex = design_dict[design_data]
                
                #Get active object
                ActObj2 = bpy.context.object
                
                if ActObj2 is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        designcolor = ActObj2.active_material

                        #Adding a RGB node
                        RGB_node2 = designcolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx2 = randint(-600, -400)
                        randintlocy2 = randint(-600, -400)
                    
                        #Set location of node
                        RGB_node2.location = (randintlocx2,randintlocy2)
                        
                        #Setting the default color
                        RGB_node2.outputs[0].default_value = hex_to_rgb(designhex)
                        
                        #Give the name
                        RGB_node2.label = f"RAL Design {design_data}"

                        #Deselect it
                        RGB_node2.select = False
                   
            else:
                #Format the string if it is entered incorrectly
                dd = design_data
                
                #Check for another simbols and leave only numbers
                dd = re.sub(r"\D+", "", dd)
                
                #Check how many symbols in string
                if (len(dd) == 4 or len(dd) == 6):
                    #Format dd
                    if len(dd) == 4:
                        fdd = "{} {}".format(dd[:2], dd[2:4])
                        ffdd = "000 "+fdd
                        self.report({'INFO'}, f'The RAL {design_data} value is incorrect. Maybe you mean RAL {ffdd}?')
                        bpy.context.scene.design_number = ffdd
                    else:
                        fdd = "{} {} {}".format(dd[:2], dd[2:4], dd[4:6])
                        ffdd = "0"+fdd
                        self.report({'INFO'}, f'The RAL {design_data} value is incorrect. Maybe you mean RAL {ffdd}?')
                        bpy.context.scene.design_number = ffdd
                else:
                    if len(dd) == 7:
                        fdd = "{} {} {}".format(dd[:3], dd[3:5], dd[5:7])
                        self.report({'INFO'}, f'RAL {design_data} does not exist. Returned the default value.')
                        bpy.context.scene.design_number = "000 15 00"
                    else:
                        if len(dd) == 0:
                            self.report({'INFO'}, 'An empty string. Enter the RAL value.')
                        else:
                            self.report({'INFO'}, f'RAL {design_data} does not exist.')
                            bpy.context.scene.design_number = "000 15 00"
    
        return {'FINISHED'}        

#EFFECT.RAL EFFECT CLASS
class ShaderEffectPanel(bpy.types.Panel):
    bl_label = "RAL Effect"
    bl_idname = "SHADER_PT_EFFECT"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = 'Colors'

    def draw(self, context):
        
        layout = self.layout
        scene = context.scene

        #row for boolean input field
        row = layout.row()
        #Box space for typing RAL
        box = layout.box()
        
        #Add a boolean input field
        row.prop(scene, "new_effectmaterial", toggle=False)
        
        # Add a text input field
        box.prop(context.scene, "effect_number")
        row.operator('shader.effect_operator')  

#EFFECT.Create a Custom Operator for the RAL Effect Shader
class SHADER_OT_RALEFFECT(bpy.types.Operator):
    
    """Depending on the selection, a material with these parameters is created or a color is created in the current material with these parameters"""
    
    bl_label = "Create"
    bl_idname = 'shader.effect_operator'
    
    def execute(self, context):
        
        #Specify your number that matches the effect_dict
        effect_data = bpy.context.scene.effect_number
        
        if bpy.context.scene.new_effectmaterial:
            if effect_data in effect_dict:
                effecthex = effect_dict[effect_data]
                            
                #Create a New Shader and calling it RAL Color
                material_effectcolor = bpy.data.materials.new(name = f"RAL {effect_data}")
                #Enabling Use Nodes
                material_effectcolor.use_nodes = True
                
                #Adding a RGB node
                RGB_node3 = material_effectcolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB_node3.location = (-400,0)
                #Setting the default color
                RGB_node3.outputs[0].default_value = hex_to_rgb(effecthex)
                
                #Give the name
                RGB_node3.label = f"RAL Effect {effect_data}"
                
                #Deselect it
                RGB_node3.select = False
                
                #Node created by default
                Def_node3 = material_effectcolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_effectcolor.node_tree.links.new(RGB_node3.outputs[0], Def_node3.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_effectcolor
                    
                    #Check on metallic attribute
                    if "M" in effect_data:
                        self.report({'INFO'}, f'The RAL {effect_data} is metallic. Keep this in mind when setting up material characteristics')
                    else:
                        pass

            else:
                #Format the string if it is entered incorrectly
                dd = effect_data
                
                #Check how many symbols in string
                if len(dd) < 5:
                    self.report({'INFO'}, f'RAL {effect_data} does not exist or is entered incorrectly.')
                    bpy.context.scene.effect_number = "110-1"
                else:
                    pass
            
        else:
            if effect_data in effect_dict:
                effecthex = effect_dict[effect_data]
                
                #Get active object
                ActObj3 = bpy.context.object
                if ActObj3 is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        effectcolor = ActObj3.active_material

                        #Adding a RGB node
                        RGB_node3 = effectcolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx3 = randint(-600, -400)
                        randintlocy3 = randint(-600, -400)
                    
                        #Set location of node
                        RGB_node3.location = (randintlocx3,randintlocy3)
                        
                        #Setting the default color
                        RGB_node3.outputs[0].default_value = hex_to_rgb(effecthex)
                        
                        #Give the name
                        RGB_node3.label = f"RAL Effect {effect_data}"

                        #Deselect it
                        RGB_node3.select = False
                        
                        #Check on metallic attribute
                        if "M" in effect_data:
                            self.report({'INFO'}, f'The RAL {effect_data} is metallic. Keep this in mind when setting up material characteristics')
                        else:
                            pass
                   
            else:
                #Format the string if it is entered incorrectly
                dd = effect_data
                #Check how many symbols in string
                if len(dd) < 5:
                    self.report({'INFO'}, f'RAL {effect_data} does not exist or is entered incorrectly.')
                    bpy.context.scene.effect_number = "110-1"
                else:
                    self.report({'INFO'}, f'RAL {effect_data} does not exist.')
    
        return {'FINISHED'}  

#PANTONE PANEL
class ShaderPantonePanel(bpy.types.Panel):
    bl_label = "Pantone"
    bl_idname = "SHADER_PT_PANTONE"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = 'Colors'

    def draw(self, context):
        
        layout = self.layout
        scene = context.scene

        #Information label (numeric)
        label = layout.label(text="Numeric Colors")
        #row for boolean input field (numeric)
        row = layout.row()
        #Box space for typing RAL(numeric)
        box = layout.box()
        #Information label (string)
        slabel = layout.label(text="Colors containing the words")
        #row for boolean input field (string)
        srow = layout.row()
        #Box space for typing RAL(string)
        sbox = layout.box()
        
        #Add a boolean input field (numeric)
        row.prop(scene, "new_pantonematerial", toggle=False)
        
        # Add a text input field (numeric)
        box.prop(scene, "pantone_number")
        row.operator('shader.pantone_operator')
        
        #Add a boolean input field (string)
        srow.prop(scene, "new_nnpantonematerial", toggle=False)
        
        # Add a text input field (string)
        sbox.prop(scene, "nnpantone_number")
        srow.operator('shader.nnpantone_operator')

#PANTONE.Create a Custom Operator for the Pantone Shader
class SHADER_OT_PANTONE(bpy.types.Operator):
    
    """Depending on the selection, a material with these parameters is created or a color is created in the current material with these parameters"""
    bl_label = "Create"
    bl_idname = 'shader.pantone_operator'
      
    def execute(self, context):
        
        #Specify your number that matches the pantone_dict
        pantone_data = bpy.context.scene.pantone_number
        
        if bpy.context.scene.new_pantonematerial:
            if pantone_data in pantone_dict:
                pantonehex = pantone_dict[pantone_data]
                
                #Create a New Shader and calling it Pantone color
                material_pantonecolor = bpy.data.materials.new(name = f"Pantone {pantone_data}")
                #Enabling Use Nodes
                material_pantonecolor.use_nodes = True
                
                #Adding a RGB node
                RGB4_node = material_pantonecolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB4_node.location = (-400,0)
                #Setting the default color
                RGB4_node.outputs[0].default_value = hex_to_rgb(pantonehex)
                
                #Give the name
                RGB4_node.label = f"PANTONE {pantone_data}"
                
                #Deselect it
                RGB4_node.select = False
                
                #Node created by default
                Def4_node = material_pantonecolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_pantonecolor.node_tree.links.new(RGB4_node.outputs[0], Def4_node.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_pantonecolor
                    
            else:
                self.report({'INFO'}, f'Pantone {pantone_data} does not exist.')
            
        else:
            if pantone_data in pantone_dict:
                pantonehex = pantone_dict[pantone_data]
                
                #Get active object
                ActObj = bpy.context.object
                
                if ActObj is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        pantonecolor = ActObj.active_material

                        #Adding a RGB node
                        RGB4_node = pantonecolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx = randint(-600, -400)
                        randintlocy = randint(-600, -400)
                    
                        #Set location of node
                        RGB4_node.location = (randintlocx,randintlocy)
                        
                        #Setting the default color
                        RGB4_node.outputs[0].default_value = hex_to_rgb(pantonehex)

                        #Give the name
                        RGB4_node.label = f"PANTONE {pantone_data}"

                        #Deselect it
                        RGB4_node.select = False
                    
            else:
                self.report({'INFO'}, f'Pantone {pantone_data} does not exist.')
    
        return {'FINISHED'}  

#NON-NUMERIC PANTONE.Create a Custom Operator for the Pantone Shader
class SHADER_OT_NNPANTONE(bpy.types.Operator):
    
    """Depending on the selection, a material with these parameters is created or a color is created in the current material with these parameters"""
    bl_label = "Create"
    bl_idname = 'shader.nnpantone_operator'
      
    def execute(self, context):
        
        #Specify your number that matches the nnpantone_dict
        nnpantone_data = bpy.context.scene.nnpantone_number
        
        if bpy.context.scene.new_nnpantonematerial:
            if nnpantone_data in nnpantone_dict:
                nnpantonehex = nnpantone_dict[nnpantone_data]
                
                #Create a New Shader and calling it Pantone color
                material_nnpantonecolor = bpy.data.materials.new(name = f"Pantone {nnpantone_data}")
                #Enabling Use Nodes
                material_nnpantonecolor.use_nodes = True
                
                #Adding a RGB node
                RGB5_node = material_nnpantonecolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB5_node.location = (-400,0)
                #Setting the default color
                RGB5_node.outputs[0].default_value = hex_to_rgb(nnpantonehex)
                
                #Give the name
                RGB5_node.label = f"PANTONE {nnpantone_data}"
                
                #Deselect it
                RGB5_node.select = False
                
                #Node created by default
                Def5_node = material_nnpantonecolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_nnpantonecolor.node_tree.links.new(RGB5_node.outputs[0], Def5_node.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_nnpantonecolor
                
            else:
                if len(nnpantone_data) == 0:
                    self.report({'INFO'}, 'Please enter the Pantone color value. For example: Black 2')
                    bpy.context.scene.nnpantone_number = "Black 2"
                else:
                    self.report({'INFO'}, f'Pantone {nnpantone_data} does not exist.')
                    bpy.context.scene.nnpantone_number = "Black 2"
            
        else:
            if nnpantone_data in nnpantone_dict:
                nnpantonehex = nnpantone_dict[nnpantone_data]
                
                #Get active object
                ActObj = bpy.context.object
                
                if ActObj is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        nnpantonecolor = ActObj.active_material

                        #Adding a RGB node
                        RGB5_node = nnpantonecolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx = randint(-600, -400)
                        randintlocy = randint(-600, -400)
                    
                        #Set location of node
                        RGB5_node.location = (randintlocx,randintlocy)
                        
                        #Setting the default color
                        RGB5_node.outputs[0].default_value = hex_to_rgb(nnpantonehex)
                        
                        #Give the name
                        RGB5_node.label = f"PANTONE {nnpantone_data}"

                        #Deselect it
                        RGB5_node.select = False
                        
            else:
                self.report({'INFO'}, f'Pantone {nnpantone_data} does not exist.')
                bpy.context.scene.nnpantone_number = "Black"
    
        return {'FINISHED'}  

#NCS panel
class ShaderNCSPanel(bpy.types.Panel):
    bl_label = "NCS"
    bl_idname = "SHADER_PT_NCS"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = 'Colors'

    def draw(self, context):
        
        layout = self.layout
        scene = context.scene

        #row for boolean input field
        row = layout.row()
        #Box space for typing RAL
        box = layout.box()
        
        #Add a boolean input field
        row.prop(scene, "new_ncsmaterial", toggle=False)
        
        # Add a text input field
        box.prop(context.scene, "ncs_number")
        row.operator('shader.ncs_operator')  

#NCS.Create a Custom Operator for the NCS Shader
class SHADER_OT_NCS(bpy.types.Operator):
    
    """Depending on the selection, a material with these parameters is created or a color is created in the current material with these parameters"""
    bl_label = "Create"
    bl_idname = 'shader.ncs_operator'
    
    def execute(self, context):
        
        #Specify your number that matches the ncs_dict
        ncs_data = bpy.context.scene.ncs_number
        
        if bpy.context.scene.new_ncsmaterial:
            if ncs_data in ncs_dict:
                ncshex = ncs_dict[ncs_data]
                            
                #Create a New Shader and calling it NCS color
                material_ncscolor = bpy.data.materials.new(name = f"NCS {ncs_data}")
                #Enabling Use Nodes
                material_ncscolor.use_nodes = True
                
                #Adding a RGB node
                RGB_node6 = material_ncscolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB_node6.location = (-400,0)
                #Setting the default color
                RGB_node6.outputs[0].default_value = hex_to_rgb(ncshex)
                
                #Give the name
                RGB_node6.label = f"NCS {ncs_data}"
                
                #Deselect it
                RGB_node6.select = False
                
                #Node created by default
                Def_node6 = material_ncscolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_ncscolor.node_tree.links.new(RGB_node6.outputs[0], Def_node6.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_ncscolor

            else:
                if len(ncs_data) == 0:
                    self.report({'INFO'}, 'An empty string. Enter the NCS value.')
                else:
                    self.report({'INFO'}, f'NCS {ncs_data} does not exist.')
                    bpy.context.scene.ncs_number = "S 0300-N"
            
        else:
            if ncs_data in ncs_dict:
                ncshex = ncs_dict[ncs_data]
                
                #Get active object
                ActObj = bpy.context.object
                
                if ActObj is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        ncscolor = ActObj.active_material

                        #Adding a RGB node
                        RGB_node6 = ncscolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx = randint(-600, -400)
                        randintlocy = randint(-600, -400)
                    
                        #Set location of node
                        RGB_node6.location = (randintlocx,randintlocy)
                        
                        #Setting the default color
                        RGB_node6.outputs[0].default_value = hex_to_rgb(ncshex)
                        
                        #Give the name
                        RGB_node6.label = f"NCS {ncs_data}"

                        #Deselect it
                        RGB_node6.select = False
                   
            else:
                if len(ncs_data) == 0:
                    self.report({'INFO'}, 'An empty string. Enter the NCS value.')
                else:
                    self.report({'INFO'}, f'NCS {ncs_data} does not exist.')
                    bpy.context.scene.ncs_number = "S 0300-N"
    
        return {'FINISHED'}  

#Your colors PANEL
class ShaderFavPanel(bpy.types.Panel):
    bl_label = "Your colors"
    bl_idname = "SHADER_PT_FAV"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = 'Colors'

    def draw(self, context):
        
        layout = self.layout
        scene = context.scene

        #Boolean "New"
        row = layout.row()

        #Information label
        label = layout.label(text="Selected slot for saving")
        #id
        box = layout.box()
        
        #Information label
        slabel = layout.label(text="Show the color name of the saved slot")
        #name of color
        sbox = layout.box()
        #buttons
        srow = layout.row()
        crow = layout.row()
        lrow = layout.row()
        #Boolean "save in project folder"
        csfrow = layout.row()
        
        #Add a boolean input field
        row.prop(scene, "new_favmaterial", toggle=False)
        csfrow.prop(scene, "change_save_folder", toggle=False)
        
        # Add a text input field (numeric)
        box.prop(scene, "favint_number")
        
        # Add a text input field (string)
        sbox.prop(scene, "favstr_number")
        srow.operator('shader.show_operator')
        srow.operator('shader.save_operator')
        crow.operator('shader.fav_operator')
        lrow.operator('shader.load_operator')

#FAVORITE.Create a saved color
class SHADER_OT_FAV(bpy.types.Operator):
    
    """Create an RGB node or material (New) according to the saved color in the slot"""
    bl_label = "Create"
    bl_idname = 'shader.fav_operator'
      
    def execute(self, context):
        
        fav_dict=load_dict(1)
        fav_dict_id=load_dict(2)
        load_dict(3)
        file_path=load_dict(4)
        id_path=load_dict(5)
        
        #Checking a dictionary for accessibility
        if fav_dict==None or fav_dict_id==None:
            self.report({'ERROR'}, f'No access: {file_path}.')
            self.report({'INFO'}, 'Please save the project elsewhere')
            return {'FINISHED'}
        
        #Specify your numbe that matches the fav_dict
        fav_data_id = bpy.context.scene.favint_number
        
        if bpy.context.scene.new_favmaterial:
            if fav_data_id in fav_dict_id:
                #Get the name of color from fav_dict_id
                name_of_color = fav_dict_id[fav_data_id]
                #Get the hex-color
                favhex = fav_dict[name_of_color]
                bpy.context.scene.favstr_number = name_of_color
                
                #Create a New Shader and calling it favorite color
                material_favcolor = bpy.data.materials.new(name = f"{name_of_color}")
                #Enabling Use Nodes
                material_favcolor.use_nodes = True
                
                #Adding a RGB node
                RGB_node = material_favcolor.node_tree.nodes.new('ShaderNodeRGB')
                #Set location of node
                RGB_node.location = (-400,0)
                #Setting the default color
                RGB_node.outputs[0].default_value = hex_to_rgb(favhex)
                
                #Give the name
                RGB_node.label = f"{name_of_color}"
                
                #Deselect it
                RGB_node.select = False
                
                #Node created by default
                Def_node = material_favcolor.node_tree.nodes["Principled BSDF"]
                
                #linked its
                material_favcolor.node_tree.links.new(RGB_node.outputs[0], Def_node.inputs[0])
                
                if bpy.context.object is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Apllied material on active object
                    bpy.context.object.active_material = material_favcolor
                
            else:
                self.report({'INFO'}, f'Slot number {fav_data_id} is empty')
            
        else:
            if fav_data_id in fav_dict_id:
                #Get the name of color from fav_dict_id
                name_of_color = fav_dict_id[fav_data_id]
                #Get the hex-color
                favhex = fav_dict[name_of_color]
                bpy.context.scene.favstr_number = name_of_color
                
                #Get active object
                ActObj = bpy.context.object
                if ActObj is None:
                    self.report({'ERROR'}, 'Object is missing.')
                else:
                    #Checking for empty material
                    if bpy.context.object.active_material is None:
                        self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
                    else:
                        #Get active material
                        favcolor = ActObj.active_material

                        #Adding a RGB node
                        RGB_node = favcolor.node_tree.nodes.new('ShaderNodeRGB')
            
                        #Get random int for x and y axis. this is necessary so that the nodes do not overlap each other
                        randintlocx = randint(-600, -400)
                        randintlocy = randint(-600, -400)
                    
                        #Set location of node
                        RGB_node.location = (randintlocx,randintlocy)
                        
                        #Setting the default color
                        RGB_node.outputs[0].default_value = hex_to_rgb(favhex)

                        #Give the name
                        RGB_node.label = f"{name_of_color}"

                        #Deselect it
                        RGB_node.select = False
                    
            else:
                self.report({'INFO'}, f'Slot number {fav_data_id} is empty')
    
        return {'FINISHED'}  

#FAVORITE.Save selected
class SHADER_OT_SAVE(bpy.types.Operator):
    
    """Save the selected color"""
    bl_label = "Save"
    bl_idname = 'shader.save_operator'
      
    def execute(self, context):
        
        fav_dict=load_dict(1)
        fav_dict_id=load_dict(2)
        load_dict(3)
        file_path=load_dict(4)
        id_path=load_dict(5)
        
        #Checking a dictionary for accessibility
        if fav_dict==None or fav_dict_id==None:
            self.report({'ERROR'}, f'No access: {file_path}.')
            self.report({'INFO'}, 'Please save the project elsewhere')
            return {'FINISHED'}
        #Set favint_number and favstr_number
        favint_data = bpy.context.scene.favint_number
        favstr_data = bpy.context.scene.favstr_number
        #Get an active object
        ActObj = bpy.context.object
        #Get an active material
        if ActObj is None:
            self.report({'ERROR'}, 'Object is missing.')
        else:
            ActMat = ActObj.active_material
            #Checking for empty material
            if ActMat is None:
                self.report({'INFO'}, 'The material is missing. Please add existing material or create a new one')
            else:
                #Get an active node
                active_node = bpy.context.active_node
                #Checking the node for RGB node
                if isinstance(active_node, bpy.types.ShaderNodeRGB):
                    #Set the RGB node
                    RGB_node = active_node
                    #Get the name
                    name = RGB_node.label
                    
                    #Get the color
                    color_node = RGB_node.outputs[0].default_value
                    color_values = list(color_node)
                    r = color_values[0]
                    g = color_values[1]
                    b = color_values[2]
                    #Convert to Hex (big thanks to batFINGER!)
                    hex_color = toHex(r, g, b)
                    #Formatting according to the values used
                    color = hex_color
                    color = color.upper()
                    color = '0x' + color
                                    
                    #Converting str hex in int hex
                    color = int(color, base=16)
                    
                    #Save it in the dictionary
                    fav_dict[name] = color
                    fav_dict_id[favint_data] = name
                    #Set name in favstr_number
                    bpy.context.scene.favstr_number = name
                    
                    #Save the dictionary on the storage
                    with open(file_path, 'wb') as file:
                        pickle.dump(fav_dict, file)
                    with open(id_path, 'wb') as file:
                        pickle.dump(fav_dict_id, file)
                    
                    self.report({'INFO'}, f'The "{name}" color has been saved in the slot number {favint_data}')
                else:
                    self.report({'INFO'}, 'Please select the RGB node')
        
        return {'FINISHED'}  
    
#FAVORITE.Show what is in the slot
class SHADER_OT_SHOW(bpy.types.Operator):
    
    """Show what is saved in the slot"""
    bl_label = "Show"
    bl_idname = 'shader.show_operator'
      
    def execute(self, context):
        
        fav_dict=load_dict(1)
        fav_dict_id=load_dict(2)
        load_dict(3)
        file_path=load_dict(4)
        id_path=load_dict(5)
        
        #Checking a dictionary for accessibility
        if fav_dict==None or fav_dict_id==None:
            self.report({'ERROR'}, f'No access: {file_path}.')
            self.report({'INFO'}, 'Please save the project elsewhere')
            return {'FINISHED'}
        
        print(f'Set Color Addon: "SHOW: {fav_dict}"')
        print(f'Set Color Addon: "SHOW: {fav_dict_id}"')
        
        #Specify your number that matches the fav_dict
        fav_id = bpy.context.scene.favint_number
        #Checking for availability
        if fav_id in fav_dict_id:
            name_saved_slot = fav_dict_id[fav_id]
            #Set saved name in favstr_number
            bpy.context.scene.favstr_number = name_saved_slot
            self.report({'INFO'}, f'Slot number {fav_id} contains the "{name_saved_slot}" color')
        else:
            bpy.context.scene.favstr_number = ""
            self.report({'INFO'}, f'Slot number {fav_id} is empty')
        
        return {'FINISHED'} 

#FAVORITE.Load color
class SHADER_OT_LOAD(bpy.types.Operator):
    """Loading a dictionary from a project folder or a Blender folder"""
    bl_label = "Load dictionary"
    bl_idname = 'shader.load_operator'
      
    def execute(self, context):
        try:
            fav_dict=load_dict(1)
            fav_dict_id=load_dict(2)
            load_dict(3)
            path=load_dict(4)
            
            if fav_dict==None or fav_dict_id==None:
                self.report({'ERROR'}, f'No access:"{path}". Please save the project elsewhere or do not load ir from the project folder!')
            else:
                self.report({'INFO'}, f'The dictionary is now in "{path}"')
        except OSError:
            self.report({'ERROR'}, f'No access:"{path}"')

        return {'FINISHED'} 

def register():
    bpy.utils.register_class(ShaderClassicPanel)
    bpy.utils.register_class(ShaderDesignPanel)
    bpy.utils.register_class(ShaderEffectPanel)
    bpy.utils.register_class(ShaderPantonePanel)
    bpy.utils.register_class(ShaderNCSPanel)
    #Your panel with favorite color
    bpy.utils.register_class(ShaderFavPanel)
    
    bpy.utils.register_class(SHADER_OT_RALCLASSIC)
    bpy.utils.register_class(SHADER_OT_RALDESIGN)
    bpy.utils.register_class(SHADER_OT_RALEFFECT)
    bpy.utils.register_class(SHADER_OT_PANTONE)
    #Non-numeric pantone color
    bpy.utils.register_class(SHADER_OT_NNPANTONE)
    bpy.utils.register_class(SHADER_OT_NCS)
    #Your panel with favorite color
    bpy.utils.register_class(SHADER_OT_FAV)
    bpy.utils.register_class(SHADER_OT_SAVE)
    bpy.utils.register_class(SHADER_OT_SHOW)
    bpy.utils.register_class(SHADER_OT_LOAD)
    
def unregister():
    bpy.utils.unregister_class(ShaderClassicPanel)
    bpy.utils.unregister_class(ShaderDesignPanel)
    bpy.utils.unregister_class(ShaderEffectPanel)
    bpy.utils.unregister_class(ShaderPantonePanel)
    bpy.utils.unregister_class(ShaderNCSPanel)
    bpy.utils.unregister_class(ShaderFavPanel)
    bpy.utils.unregister_class(SHADER_OT_RALCLASSIC)
    bpy.utils.unregister_class(SHADER_OT_RALDESIGN)
    bpy.utils.unregister_class(SHADER_OT_RALEFFECT)
    bpy.utils.unregister_class(SHADER_OT_PANTONE)
    #Non-numeric pantone color
    bpy.utils.unregister_class(SHADER_OT_NNPANTONE)
    bpy.utils.unregister_class(SHADER_OT_NCS)
    #Favorite shader \/
    bpy.utils.unregister_class(SHADER_OT_FAV)
    bpy.utils.unregister_class(SHADER_OT_SAVE)
    bpy.utils.unregister_class(SHADER_OT_SHOW)
    bpy.utils.unregister_class(SHADER_OT_LOAD)
    del bpy.types.Scene.new_ralmaterial
    del bpy.types.Scene.new_designmaterial
    del bpy.types.Scene.new_effectmaterial
    del bpy.types.Scene.new_pantonematerial
    del bpy.types.Scene.new_nnpantonematerial
    del bpy.types.Scene.new_ncsmaterial
    
    del bpy.types.Scene.new_favmaterial
    
    del bpy.types.Scene.ral_number
    del bpy.types.Scene.design_number
    del bpy.types.Scene.effect_number
    del bpy.types.Scene.pantone_number
    del bpy.types.Scene.nnpantone_number
    del bpy.types.Scene.ncs_number
    
    del bpy.types.Scene.favint_number
    del bpy.types.Scene.favstr_number


if __name__ == "__main__":
    register()
